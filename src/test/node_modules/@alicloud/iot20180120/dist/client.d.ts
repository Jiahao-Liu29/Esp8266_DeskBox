/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddDataForApiSourceRequest extends $tea.Model {
    apiId?: string;
    content?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDataForApiSourceResponseBody extends $tea.Model {
    code?: string;
    data?: number;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDataForApiSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddDataForApiSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareTaskDeviceRequest extends $tea.Model {
    iotIdList?: string[];
    iotInstanceId?: string;
    productKey?: string;
    shareTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareTaskDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: AddShareTaskDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareTaskDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddShareTaskDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AsyncRRpcRequest extends $tea.Model {
    deviceName?: string;
    extInfo?: string;
    iotInstanceId?: string;
    messageContent?: string;
    productKey?: string;
    topicFullName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AsyncRRpcResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    messageId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AsyncRRpcResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AsyncRRpcResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachDestinationRequest extends $tea.Model {
    destinationId?: number;
    iotInstanceId?: string;
    isFailover?: boolean;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachDestinationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachDestinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AttachDestinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachParserDataSourceRequest extends $tea.Model {
    dataSourceId?: number;
    iotInstanceId?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachParserDataSourceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachParserDataSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AttachParserDataSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDataForApiSourceRequest extends $tea.Model {
    apiId?: string;
    contentList?: {
        [key: string]: any;
    };
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDataForApiSourceShrinkRequest extends $tea.Model {
    apiId?: string;
    contentListShrink?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDataForApiSourceResponseBody extends $tea.Model {
    code?: string;
    data?: {
        [key: string]: any;
    };
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDataForApiSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchAddDataForApiSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDeviceGroupRelationsRequest extends $tea.Model {
    device?: BatchAddDeviceGroupRelationsRequestDevice[];
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDeviceGroupRelationsResponseBody extends $tea.Model {
    alreadyRelatedGroupDeviceCount?: number;
    code?: string;
    errorMessage?: string;
    exceedTenGroupDeviceCount?: number;
    requestId?: string;
    success?: boolean;
    successAddedDeviceCount?: number;
    validDeviceCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDeviceGroupRelationsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchAddDeviceGroupRelationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddThingTopoRequest extends $tea.Model {
    gwDeviceName?: string;
    gwProductKey?: string;
    iotInstanceId?: string;
    topoAddItem?: BatchAddThingTopoRequestTopoAddItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddThingTopoResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddThingTopoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchAddThingTopoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDeviceToEdgeInstanceWithDriverRequest extends $tea.Model {
    driverId?: string;
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDeviceToEdgeInstanceWithDriverResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDeviceToEdgeInstanceWithDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchBindDeviceToEdgeInstanceWithDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDevicesIntoProjectRequest extends $tea.Model {
    devices?: BatchBindDevicesIntoProjectRequestDevices[];
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDevicesIntoProjectResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDevicesIntoProjectResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchBindDevicesIntoProjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindProductsIntoProjectRequest extends $tea.Model {
    iotInstanceId?: string;
    productKeys?: string[];
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindProductsIntoProjectResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindProductsIntoProjectResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchBindProductsIntoProjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesRequest extends $tea.Model {
    deviceName?: string[];
    deviceNameList?: BatchCheckDeviceNamesRequestDeviceNameList[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBody extends $tea.Model {
    code?: string;
    data?: BatchCheckDeviceNamesResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchCheckDeviceNamesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckImportDeviceRequest extends $tea.Model {
    deviceList?: BatchCheckImportDeviceRequestDeviceList[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckImportDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: BatchCheckImportDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckImportDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchCheckImportDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckVehicleDeviceRequest extends $tea.Model {
    deviceList?: BatchCheckVehicleDeviceRequestDeviceList[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckVehicleDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: BatchCheckVehicleDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckVehicleDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchCheckVehicleDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchClearEdgeInstanceDeviceConfigRequest extends $tea.Model {
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchClearEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchClearEdgeInstanceDeviceConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchClearEdgeInstanceDeviceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateSoundCodeLabelRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    scheduleCode?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateSoundCodeLabelResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateSoundCodeLabelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchCreateSoundCodeLabelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateSoundCodeLabelWithLabelsRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    labels?: string[];
    scheduleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateSoundCodeLabelWithLabelsResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateSoundCodeLabelWithLabelsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchCreateSoundCodeLabelWithLabelsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceGroupRelationsRequest extends $tea.Model {
    device?: BatchDeleteDeviceGroupRelationsRequestDevice[];
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceGroupRelationsResponseBody extends $tea.Model {
    alreadyRelatedGroupDeviceCount?: number;
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    successDeviceCount?: number;
    validDeviceCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceGroupRelationsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchDeleteDeviceGroupRelationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteEdgeInstanceChannelRequest extends $tea.Model {
    channelIds?: string[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchDeleteEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceBindStatusRequest extends $tea.Model {
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceBindStatusResponseBody extends $tea.Model {
    code?: string;
    data?: BatchGetDeviceBindStatusResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceBindStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetDeviceBindStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateRequest extends $tea.Model {
    deviceName?: string[];
    iotId?: string[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateResponseBody extends $tea.Model {
    code?: string;
    deviceStatusList?: BatchGetDeviceStateResponseBodyDeviceStatusList;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetDeviceStateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeDriverRequest extends $tea.Model {
    driverIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeDriverResponseBody extends $tea.Model {
    code?: string;
    driverList?: BatchGetEdgeDriverResponseBodyDriverList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetEdgeDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelRequest extends $tea.Model {
    channelIds?: string[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    data?: BatchGetEdgeInstanceChannelResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceChannelRequest extends $tea.Model {
    driverId?: string;
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceChannelResponseBody extends $tea.Model {
    code?: string;
    deviceChannelList?: BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetEdgeInstanceDeviceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigRequest extends $tea.Model {
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    code?: string;
    deviceConfigList?: BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetEdgeInstanceDeviceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceDriverRequest extends $tea.Model {
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceDriverResponseBody extends $tea.Model {
    code?: string;
    deviceDriverList?: BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetEdgeInstanceDeviceDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsRequest extends $tea.Model {
    driverIds?: string[];
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    code?: string;
    driverConfigList?: BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetEdgeInstanceDriverConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGrayMigrationDeviceRequest extends $tea.Model {
    deviceNames?: string[];
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGrayMigrationDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: BatchGrayMigrationDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGrayMigrationDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGrayMigrationDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceRequest extends $tea.Model {
    deviceList?: BatchImportDeviceRequestDeviceList[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: BatchImportDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchImportDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceRequest extends $tea.Model {
    deviceList?: BatchImportVehicleDeviceRequestDeviceList[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: BatchImportVehicleDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchImportVehicleDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchPubRequest extends $tea.Model {
    deviceName?: string[];
    iotInstanceId?: string;
    messageContent?: string;
    productKey?: string;
    qos?: number;
    topicShortName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchPubResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchPubResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchPubResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailRequest extends $tea.Model {
    deviceName?: string[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailResponseBody extends $tea.Model {
    code?: string;
    data?: BatchQueryDeviceDetailResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchQueryDeviceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceRequest extends $tea.Model {
    count?: number;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: BatchRegisterDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchRegisterDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceWithApplyIdRequest extends $tea.Model {
    applyId?: number;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceWithApplyIdResponseBody extends $tea.Model {
    code?: string;
    data?: BatchRegisterDeviceWithApplyIdResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceWithApplyIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchRegisterDeviceWithApplyIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceChannelRequest extends $tea.Model {
    channelId?: string;
    driverId?: string;
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceChannelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchSetEdgeInstanceDeviceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceConfigRequest extends $tea.Model {
    deviceConfigs?: BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs[];
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceConfigResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchSetEdgeInstanceDeviceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindDeviceFromEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotIds?: string[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindDeviceFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindDeviceFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchUnbindDeviceFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectDevicesRequest extends $tea.Model {
    devices?: BatchUnbindProjectDevicesRequestDevices[];
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectDevicesResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectDevicesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchUnbindProjectDevicesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectProductsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKeys?: string[];
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectProductsResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectProductsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchUnbindProjectProductsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceNicknameRequest extends $tea.Model {
    deviceNicknameInfo?: BatchUpdateDeviceNicknameRequestDeviceNicknameInfo[];
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceNicknameResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceNicknameResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchUpdateDeviceNicknameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindApplicationToEdgeInstanceRequest extends $tea.Model {
    applicationId?: string;
    applicationVersion?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindApplicationToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindApplicationToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BindApplicationToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindDriverToEdgeInstanceRequest extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    instanceId?: string;
    iotInstanceId?: string;
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindDriverToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindDriverToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BindDriverToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindGatewayToEdgeInstanceRequest extends $tea.Model {
    deviceName?: string;
    instanceId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindGatewayToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindGatewayToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BindGatewayToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindLicenseDeviceRequest extends $tea.Model {
    deviceNameList?: string[];
    iotIdList?: string[];
    iotInstanceId?: string;
    licenseCode?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindLicenseDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: BindLicenseDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindLicenseDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BindLicenseDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindLicenseProductRequest extends $tea.Model {
    iotInstanceId?: string;
    licenseCode?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindLicenseProductResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindLicenseProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BindLicenseProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindRoleToEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    roleArn?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindRoleToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindRoleToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BindRoleToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSceneRuleToEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSceneRuleToEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSceneRuleToEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BindSceneRuleToEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CancelJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTAStrategyByJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTAStrategyByJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTAStrategyByJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CancelOTAStrategyByJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByDeviceRequest extends $tea.Model {
    deviceName?: string[];
    firmwareId?: string;
    iotInstanceId?: string;
    jobId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByDeviceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CancelOTATaskByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByJobRequest extends $tea.Model {
    cancelInProgressTask?: boolean;
    cancelNotifiedTask?: boolean;
    cancelQueuedTask?: boolean;
    cancelScheduledTask?: boolean;
    cancelUnconfirmedTask?: boolean;
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOTATaskByJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CancelOTATaskByJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelReleaseProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelReleaseProductResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelReleaseProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CancelReleaseProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckBindLicenseDeviceProgressRequest extends $tea.Model {
    checkProgressId?: string;
    iotInstanceId?: string;
    licenseCode?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckBindLicenseDeviceProgressResponseBody extends $tea.Model {
    code?: string;
    data?: CheckBindLicenseDeviceProgressResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckBindLicenseDeviceProgressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckBindLicenseDeviceProgressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDeviceDesiredPropertyRequest extends $tea.Model {
    deviceName?: string;
    identifies?: string[];
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDeviceDesiredPropertyResponseBody extends $tea.Model {
    code?: string;
    data?: ClearDeviceDesiredPropertyResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDeviceDesiredPropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ClearDeviceDesiredPropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearEdgeInstanceDriverConfigsRequest extends $tea.Model {
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearEdgeInstanceDriverConfigsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ClearEdgeInstanceDriverConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseDeviceTunnelRequest extends $tea.Model {
    iotInstanceId?: string;
    tunnelId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseDeviceTunnelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseDeviceTunnelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CloseDeviceTunnelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseEdgeInstanceDeploymentRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseEdgeInstanceDeploymentResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseEdgeInstanceDeploymentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CloseEdgeInstanceDeploymentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmOTATaskRequest extends $tea.Model {
    iotInstanceId?: string;
    taskId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmOTATaskResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConfirmOTATaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ConfirmOTATaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyThingModelRequest extends $tea.Model {
    iotInstanceId?: string;
    resourceGroupId?: string;
    sourceModelVersion?: string;
    sourceProductKey?: string;
    targetProductKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CopyThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountSpeechBroadcastHourRequest extends $tea.Model {
    iotInstanceId?: string;
    queryDateTimeHour?: string;
    shareTaskCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountSpeechBroadcastHourResponseBody extends $tea.Model {
    code?: string;
    data?: number;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountSpeechBroadcastHourResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CountSpeechBroadcastHourResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupRequest extends $tea.Model {
    groupName?: string;
    iotInstanceId?: string;
    subBizCode?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    groupId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateConsumerGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupSubscribeRelationRequest extends $tea.Model {
    consumerGroupId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConsumerGroupSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateConsumerGroupSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceRequest extends $tea.Model {
    apiPath?: string;
    desc?: string;
    displayName?: string;
    iotInstanceId?: string;
    originSql?: string;
    requestParam?: CreateDataAPIServiceRequestRequestParam[];
    responseParam?: CreateDataAPIServiceRequestResponseParam[];
    templateSql?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceResponseBody extends $tea.Model {
    code?: string;
    data?: CreateDataAPIServiceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDataAPIServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataSourceItemRequest extends $tea.Model {
    dataSourceId?: number;
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    scopeType?: string;
    topic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataSourceItemResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataSourceItemResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDataSourceItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDestinationRequest extends $tea.Model {
    configuration?: string;
    description?: string;
    iotInstanceId?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDestinationResponseBody extends $tea.Model {
    code?: string;
    destination?: CreateDestinationResponseBodyDestination;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDestinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDestinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDistributeJobRequest extends $tea.Model {
    deviceName?: string[];
    productKey?: string;
    sourceInstanceId?: string;
    strategy?: number;
    targetAliyunId?: string;
    targetInstanceConfig?: CreateDeviceDistributeJobRequestTargetInstanceConfig[];
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDistributeJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    jobId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDeviceDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDynamicGroupRequest extends $tea.Model {
    dynamicGroupExpression?: string;
    groupDesc?: string;
    groupName?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDynamicGroupResponseBody extends $tea.Model {
    code?: string;
    data?: CreateDeviceDynamicGroupResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDynamicGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDeviceDynamicGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceGroupRequest extends $tea.Model {
    groupDesc?: string;
    groupName?: string;
    iotInstanceId?: string;
    superGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    data?: CreateDeviceGroupResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceTunnelRequest extends $tea.Model {
    description?: string;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    udi?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceTunnelResponseBody extends $tea.Model {
    code?: string;
    data?: CreateDeviceTunnelResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceTunnelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDeviceTunnelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDownloadDataJobRequest extends $tea.Model {
    downloadDataType?: string;
    endTime?: number;
    fileConfig?: {
        [key: string]: any;
    };
    iotInstanceId?: string;
    startTime?: number;
    tableName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDownloadDataJobShrinkRequest extends $tea.Model {
    downloadDataType?: string;
    endTime?: number;
    fileConfigShrink?: string;
    iotInstanceId?: string;
    startTime?: number;
    tableName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDownloadDataJobResponseBody extends $tea.Model {
    code?: string;
    data?: CreateDownloadDataJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDownloadDataJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateDownloadDataJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverRequest extends $tea.Model {
    cpuArch?: string;
    driverName?: string;
    driverProtocol?: string;
    iotInstanceId?: string;
    isBuiltIn?: boolean;
    runtime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverResponseBody extends $tea.Model {
    code?: string;
    driverId?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateEdgeDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverVersionRequest extends $tea.Model {
    argument?: string;
    configCheckRule?: string;
    containerConfig?: string;
    description?: string;
    driverConfig?: string;
    driverId?: string;
    driverVersion?: string;
    edgeVersion?: string;
    iotInstanceId?: string;
    sourceConfig?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceRequest extends $tea.Model {
    iotInstanceId?: string;
    name?: string;
    spec?: number;
    tags?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    instanceId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceChannelRequest extends $tea.Model {
    channelName?: string;
    configs?: CreateEdgeInstanceChannelRequestConfigs[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceDeploymentRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceDeploymentResponseBody extends $tea.Model {
    code?: string;
    deploymentId?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceDeploymentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateEdgeInstanceDeploymentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceMessageRoutingRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    name?: string;
    sourceData?: string;
    sourceType?: string;
    targetData?: string;
    targetIotHubQos?: number;
    targetType?: string;
    topicFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    routeId?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeOssPreSignedAddressRequest extends $tea.Model {
    fileName?: string;
    instanceId?: string;
    iotInstanceId?: string;
    resourceId?: string;
    resourceVersion?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeOssPreSignedAddressResponseBody extends $tea.Model {
    code?: string;
    data?: CreateEdgeOssPreSignedAddressResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeOssPreSignedAddressResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateEdgeOssPreSignedAddressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJobRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    jobDocument?: string;
    jobFile?: {
        [key: string]: any;
    };
    jobName?: string;
    rolloutConfig?: {
        [key: string]: any;
    };
    scheduledTime?: number;
    targetConfig?: {
        [key: string]: any;
    };
    timeoutConfig?: {
        [key: string]: any;
    };
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJobShrinkRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    jobDocument?: string;
    jobFileShrink?: string;
    jobName?: string;
    rolloutConfigShrink?: string;
    scheduledTime?: number;
    targetConfigShrink?: string;
    timeoutConfigShrink?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    jobId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLoRaNodesTaskRequest extends $tea.Model {
    deviceInfo?: CreateLoRaNodesTaskRequestDeviceInfo[];
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLoRaNodesTaskResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLoRaNodesTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateLoRaNodesTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobRequest extends $tea.Model {
    downloadProtocol?: string;
    dynamicMode?: number;
    firmwareId?: string;
    groupId?: string;
    groupType?: string;
    iotInstanceId?: string;
    maximumPerMinute?: number;
    multiModuleMode?: boolean;
    needConfirm?: boolean;
    needPush?: boolean;
    overwriteMode?: number;
    productKey?: string;
    retryCount?: number;
    retryInterval?: number;
    srcVersion?: string[];
    tag?: CreateOTADynamicUpgradeJobRequestTag[];
    timeoutInMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobResponseBody extends $tea.Model {
    code?: string;
    data?: CreateOTADynamicUpgradeJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOTADynamicUpgradeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareRequest extends $tea.Model {
    destVersion?: string;
    firmwareDesc?: string;
    firmwareName?: string;
    firmwareSign?: string;
    firmwareSize?: number;
    firmwareUrl?: string;
    iotInstanceId?: string;
    moduleName?: string;
    multiFiles?: CreateOTAFirmwareRequestMultiFiles[];
    needToVerify?: boolean;
    productKey?: string;
    signMethod?: string;
    srcVersion?: string;
    type?: number;
    udi?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareResponseBody extends $tea.Model {
    code?: string;
    data?: CreateOTAFirmwareResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOTAFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAModuleRequest extends $tea.Model {
    aliasName?: string;
    desc?: string;
    iotInstanceId?: string;
    moduleName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAModuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAModuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOTAModuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobRequest extends $tea.Model {
    dnListFileUrl?: string;
    downloadProtocol?: string;
    firmwareId?: string;
    grayPercent?: string;
    groupId?: string;
    groupType?: string;
    iotInstanceId?: string;
    maximumPerMinute?: number;
    multiModuleMode?: boolean;
    needConfirm?: boolean;
    needPush?: boolean;
    overwriteMode?: number;
    productKey?: string;
    retryCount?: number;
    retryInterval?: number;
    scheduleFinishTime?: number;
    scheduleTime?: number;
    srcVersion?: string[];
    tag?: CreateOTAStaticUpgradeJobRequestTag[];
    targetDeviceName?: string[];
    targetSelection?: string;
    timeoutInMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobResponseBody extends $tea.Model {
    code?: string;
    data?: CreateOTAStaticUpgradeJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOTAStaticUpgradeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobRequest extends $tea.Model {
    downloadProtocol?: string;
    firmwareId?: string;
    iotInstanceId?: string;
    needConfirm?: boolean;
    needPush?: boolean;
    productKey?: string;
    tag?: CreateOTAVerifyJobRequestTag[];
    targetDeviceName?: string[];
    timeoutInMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobResponseBody extends $tea.Model {
    code?: string;
    data?: CreateOTAVerifyJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOTAVerifyJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParserRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParserResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    parserId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateParserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParserDataSourceRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParserDataSourceResponseBody extends $tea.Model {
    code?: string;
    dataSource?: CreateParserDataSourceResponseBodyDataSource;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParserDataSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateParserDataSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductRequest extends $tea.Model {
    aliyunCommodityCode?: string;
    authType?: string;
    categoryKey?: string;
    dataFormat?: number;
    description?: string;
    id2?: boolean;
    iotInstanceId?: string;
    joinPermissionId?: string;
    netType?: string;
    nodeType?: number;
    productName?: string;
    protocolType?: string;
    publishAuto?: boolean;
    resourceGroupId?: string;
    validateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductResponseBody extends $tea.Model {
    code?: string;
    data?: CreateProductResponseBodyData;
    errorMessage?: string;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductDistributeJobRequest extends $tea.Model {
    productKey?: string;
    sourceInstanceId?: string;
    targetAliyunId?: string;
    targetInstanceId?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductDistributeJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    jobId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateProductDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    productTag?: CreateProductTagsRequestProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    invalidProductTags?: CreateProductTagsResponseBodyInvalidProductTags;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateProductTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTopicRequest extends $tea.Model {
    codec?: string;
    desc?: string;
    enableProxySubscribe?: boolean;
    iotInstanceId?: string;
    operation?: string;
    productKey?: string;
    topicShortName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTopicResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    topicId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateProductTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleRequest extends $tea.Model {
    dataType?: string;
    iotInstanceId?: string;
    name?: string;
    productKey?: string;
    resourceGroupId?: string;
    ruleDesc?: string;
    select?: string;
    shortTopic?: string;
    topic?: string;
    topicType?: number;
    where?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleId?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleActionRequest extends $tea.Model {
    configuration?: string;
    errorActionFlag?: boolean;
    iotInstanceId?: string;
    ruleId?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleActionResponseBody extends $tea.Model {
    actionId?: number;
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateRuleActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleContent?: string;
    ruleDescription?: string;
    ruleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSchedulePeriodRequest extends $tea.Model {
    description?: string;
    endTime?: string;
    iotInstanceId?: string;
    scheduleCode?: string;
    soundCodeContent?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSchedulePeriodResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSchedulePeriodResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSchedulePeriodResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeRequest extends $tea.Model {
    duration?: number;
    iotInstanceId?: string;
    name?: string;
    openType?: string;
    soundCodeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSoundCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeLabelRequest extends $tea.Model {
    iotInstanceId?: string;
    label?: string;
    scheduleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeLabelResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeLabelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSoundCodeLabelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeScheduleRequest extends $tea.Model {
    description?: string;
    endDate?: string;
    iotInstanceId?: string;
    name?: string;
    openType?: string;
    startDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeScheduleResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSoundCodeScheduleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSoundCodeScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpeechRequest extends $tea.Model {
    audioFormat?: string;
    bizCode?: string;
    enableSoundCode?: boolean;
    iotInstanceId?: string;
    projectCode?: string;
    soundCodeConfig?: {
        [key: string]: any;
    };
    speechRate?: number;
    speechType?: string;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpeechShrinkRequest extends $tea.Model {
    audioFormat?: string;
    bizCode?: string;
    enableSoundCode?: boolean;
    iotInstanceId?: string;
    projectCode?: string;
    soundCodeConfigShrink?: string;
    speechRate?: number;
    speechType?: string;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStudioAppDomainOpenRequest extends $tea.Model {
    appId?: string;
    host?: string;
    iotInstanceId?: string;
    projectId?: string;
    protocol?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStudioAppDomainOpenResponseBody extends $tea.Model {
    code?: string;
    data?: CreateStudioAppDomainOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStudioAppDomainOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateStudioAppDomainOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribeRelationRequest extends $tea.Model {
    consumerGroupIds?: string[];
    deviceDataFlag?: boolean;
    deviceLifeCycleFlag?: boolean;
    deviceStatusChangeFlag?: boolean;
    deviceTagFlag?: boolean;
    deviceTopoLifeCycleFlag?: boolean;
    foundDeviceListFlag?: boolean;
    iotInstanceId?: string;
    mnsConfiguration?: string;
    otaEventFlag?: boolean;
    otaJobFlag?: boolean;
    otaVersionFlag?: boolean;
    productKey?: string;
    subscribeFlags?: string;
    thingHistoryFlag?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingModelRequest extends $tea.Model {
    functionBlockId?: string;
    functionBlockName?: string;
    iotInstanceId?: string;
    productKey?: string;
    thingModelJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingScriptRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    scriptContent?: string;
    scriptType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingScriptResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateThingScriptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateThingScriptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicConfigRequest extends $tea.Model {
    codec?: string;
    description?: string;
    enableBroadcast?: boolean;
    enableProxySubscribe?: boolean;
    iotInstanceId?: string;
    operation?: string;
    productKey?: string;
    topicFullName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicConfigResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateTopicConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicRouteTableRequest extends $tea.Model {
    dstTopic?: string[];
    iotInstanceId?: string;
    srcTopic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicRouteTableResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    failureTopics?: CreateTopicRouteTableResponseBodyFailureTopics;
    isAllSucceed?: boolean;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicRouteTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateTopicRouteTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClientIdsRequest extends $tea.Model {
    iotId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClientIdsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClientIdsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteClientIdsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteConsumerGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupSubscribeRelationRequest extends $tea.Model {
    consumerGroupId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteConsumerGroupSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteConsumerGroupSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDataSourceItemRequest extends $tea.Model {
    dataSourceId?: number;
    dataSourceItemId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDataSourceItemResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDataSourceItemResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDataSourceItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDestinationRequest extends $tea.Model {
    destinationId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDestinationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDestinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDestinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDistributeJobRequest extends $tea.Model {
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDistributeJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDeviceDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDynamicGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDynamicGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceDynamicGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDeviceDynamicGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceFileRequest extends $tea.Model {
    deviceName?: string;
    fileId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceFileResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDeviceFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDevicePropRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    propKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDevicePropResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDevicePropResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDevicePropResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceSpeechRequest extends $tea.Model {
    deviceSpeechList?: DeleteDeviceSpeechRequestDeviceSpeechList[];
    iotId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceSpeechResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDeviceSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceTunnelRequest extends $tea.Model {
    iotInstanceId?: string;
    tunnelId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceTunnelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceTunnelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteDeviceTunnelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverRequest extends $tea.Model {
    driverId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteEdgeDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverVersionRequest extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceMessageRoutingRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    routeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAFirmwareRequest extends $tea.Model {
    firmwareId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAFirmwareResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteOTAFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAModuleRequest extends $tea.Model {
    iotInstanceId?: string;
    moduleName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAModuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOTAModuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteOTAModuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParserRequest extends $tea.Model {
    iotInstanceId?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParserResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteParserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParserDataSourceRequest extends $tea.Model {
    dataSourceId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParserDataSourceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteParserDataSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteParserDataSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTagsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    productTagKey?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteProductTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTopicRequest extends $tea.Model {
    iotInstanceId?: string;
    topicId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTopicResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProductTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteProductTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleActionRequest extends $tea.Model {
    actionId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleActionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRuleActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteRuleActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSchedulePeriodRequest extends $tea.Model {
    iotInstanceId?: string;
    periodCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSchedulePeriodResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSchedulePeriodResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSchedulePeriodResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShareTaskDeviceRequest extends $tea.Model {
    iotIdList?: string[];
    iotInstanceId?: string;
    shareTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShareTaskDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: DeleteShareTaskDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShareTaskDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteShareTaskDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeRequest extends $tea.Model {
    iotInstanceId?: string;
    soundCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSoundCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeLabelRequest extends $tea.Model {
    iotInstanceId?: string;
    soundCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeLabelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeLabelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSoundCodeLabelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeScheduleRequest extends $tea.Model {
    iotInstanceId?: string;
    scheduleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeScheduleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSoundCodeScheduleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSoundCodeScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpeechRequest extends $tea.Model {
    iotInstanceId?: string;
    speechCodeList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpeechResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudioAppDomainOpenRequest extends $tea.Model {
    appId?: string;
    domainId?: number;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudioAppDomainOpenResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudioAppDomainOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteStudioAppDomainOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribeRelationRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteThingModelRequest extends $tea.Model {
    eventIdentifier?: string[];
    functionBlockId?: string;
    iotInstanceId?: string;
    productKey?: string;
    propertyIdentifier?: string[];
    resourceGroupId?: string;
    serviceIdentifier?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicConfigRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    topicFullName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicConfigResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteTopicConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicRouteTableRequest extends $tea.Model {
    dstTopic?: string[];
    iotInstanceId?: string;
    srcTopic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicRouteTableResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    failureTopics?: DeleteTopicRouteTableResponseBodyFailureTopics;
    isAllSucceed?: boolean;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicRouteTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteTopicRouteTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachDestinationRequest extends $tea.Model {
    destinationId?: number;
    iotInstanceId?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachDestinationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachDestinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DetachDestinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachParserDataSourceRequest extends $tea.Model {
    dataSourceId?: number;
    iotInstanceId?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachParserDataSourceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachParserDataSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DetachParserDataSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DisableDeviceTunnelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelShareRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelShareResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableDeviceTunnelShareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DisableDeviceTunnelShareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DisableSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableThingRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableThingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DisableThingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DisableThingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EnableDeviceTunnelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelShareRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelShareResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableDeviceTunnelShareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EnableDeviceTunnelShareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EnableSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableThingRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableThingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EnableThingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EnableThingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDeviceNameListURLRequest extends $tea.Model {
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDeviceNameListURLResponseBody extends $tea.Model {
    code?: string;
    data?: GenerateDeviceNameListURLResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDeviceNameListURLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GenerateDeviceNameListURLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateFileUploadURLRequest extends $tea.Model {
    bizCode?: string;
    fileName?: string;
    fileSuffix?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateFileUploadURLResponseBody extends $tea.Model {
    code?: string;
    data?: GenerateFileUploadURLResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateFileUploadURLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GenerateFileUploadURLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateOTAUploadURLRequest extends $tea.Model {
    fileSuffix?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateOTAUploadURLResponseBody extends $tea.Model {
    code?: string;
    data?: GenerateOTAUploadURLResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateOTAUploadURLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GenerateOTAUploadURLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailRequest extends $tea.Model {
    apiSrn?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBody extends $tea.Model {
    code?: string;
    data?: GetDataAPIServiceDetailResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDataAPIServiceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDestinationRequest extends $tea.Model {
    destinationId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDestinationResponseBody extends $tea.Model {
    code?: string;
    destination?: GetDestinationResponseBodyDestination;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDestinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDestinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceShadowRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceShadowResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    shadowMessage?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceShadowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDeviceShadowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceStatusRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceStatusResponseBody extends $tea.Model {
    code?: string;
    data?: GetDeviceStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDeviceStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelShareStatusRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelShareStatusResponseBody extends $tea.Model {
    code?: string;
    data?: GetDeviceTunnelShareStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelShareStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDeviceTunnelShareStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelStatusRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelStatusResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDeviceTunnelStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileRequest extends $tea.Model {
    context?: {
        [key: string]: any;
    };
    iotInstanceId?: string;
    longJobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileShrinkRequest extends $tea.Model {
    contextShrink?: string;
    iotInstanceId?: string;
    longJobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileResponseBody extends $tea.Model {
    code?: string;
    data?: GetDownloadFileResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDownloadFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeDriverVersionRequest extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    data?: GetEdgeDriverVersionResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: GetEdgeInstanceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentRequest extends $tea.Model {
    deploymentId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponseBody extends $tea.Model {
    code?: string;
    data?: GetEdgeInstanceDeploymentResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetEdgeInstanceDeploymentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    routeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    data?: GetEdgeInstanceMessageRoutingResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGatewayBySubDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGatewayBySubDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: GetGatewayBySubDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGatewayBySubDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetGatewayBySubDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLoraNodesTaskRequest extends $tea.Model {
    iotInstanceId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLoraNodesTaskResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    successCount?: number;
    successDevEuis?: GetLoraNodesTaskResponseBodySuccessDevEuis;
    taskId?: string;
    taskState?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLoraNodesTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetLoraNodesTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetParserRequest extends $tea.Model {
    iotInstanceId?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetParserResponseBody extends $tea.Model {
    code?: string;
    data?: GetParserResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetParserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetParserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetParserDataSourceRequest extends $tea.Model {
    dataSourceId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetParserDataSourceResponseBody extends $tea.Model {
    code?: string;
    dataSource?: GetParserDataSourceResponseBodyDataSource;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetParserDataSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetParserDataSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleInfo?: GetRuleResponseBodyRuleInfo;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleActionRequest extends $tea.Model {
    actionId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleActionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleActionInfo?: GetRuleActionResponseBodyRuleActionInfo;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetRuleActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneRuleResponseBody extends $tea.Model {
    code?: string;
    data?: GetSceneRuleResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareSpeechModelAudioRequest extends $tea.Model {
    iotInstanceId?: string;
    shareTaskId?: string;
    speechModelCodeList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareSpeechModelAudioResponseBody extends $tea.Model {
    code?: string;
    data?: GetShareSpeechModelAudioResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareSpeechModelAudioResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetShareSpeechModelAudioResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareTaskByDeviceOpenRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareTaskByDeviceOpenResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareTaskByDeviceOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetShareTaskByDeviceOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoundCodeAudioRequest extends $tea.Model {
    iotInstanceId?: string;
    soundCodeList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoundCodeAudioResponseBody extends $tea.Model {
    code?: string;
    data?: GetSoundCodeAudioResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoundCodeAudioResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSoundCodeAudioResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoundCodeScheduleRequest extends $tea.Model {
    iotInstanceId?: string;
    scheduleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoundCodeScheduleResponseBody extends $tea.Model {
    code?: string;
    data?: GetSoundCodeScheduleResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoundCodeScheduleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSoundCodeScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechDeviceDetailRequest extends $tea.Model {
    iotId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechDeviceDetailResponseBody extends $tea.Model {
    code?: string;
    data?: GetSpeechDeviceDetailResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechDeviceDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSpeechDeviceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechLicenseDeviceStatisticsRequest extends $tea.Model {
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechLicenseDeviceStatisticsResponseBody extends $tea.Model {
    code?: string;
    data?: GetSpeechLicenseDeviceStatisticsResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechLicenseDeviceStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSpeechLicenseDeviceStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBody extends $tea.Model {
    code?: string;
    data?: GetSpeechVoiceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSpeechVoiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStudioAppTokenOpenRequest extends $tea.Model {
    appId?: string;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStudioAppTokenOpenResponseBody extends $tea.Model {
    code?: string;
    data?: GetStudioAppTokenOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStudioAppTokenOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetStudioAppTokenOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    simple?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslResponseBody extends $tea.Model {
    code?: string;
    data?: GetThingModelTslResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetThingModelTslResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslPublishedRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    simple?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslPublishedResponseBody extends $tea.Model {
    code?: string;
    data?: GetThingModelTslPublishedResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslPublishedResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetThingModelTslPublishedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingScriptRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingScriptResponseBody extends $tea.Model {
    code?: string;
    data?: GetThingScriptResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingScriptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetThingScriptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTemplateRequest extends $tea.Model {
    categoryKey?: string;
    iotInstanceId?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTemplateResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    thingModelJSON?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetThingTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageNo?: number;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponseBody extends $tea.Model {
    code?: string;
    data?: GetThingTopoResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetThingTopoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisQueryDeviceLocationRequest extends $tea.Model {
    iotInstanceId?: string;
    thingList?: GisQueryDeviceLocationRequestThingList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisQueryDeviceLocationResponseBody extends $tea.Model {
    code?: string;
    data?: GisQueryDeviceLocationResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisQueryDeviceLocationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GisQueryDeviceLocationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisSearchDeviceTraceRequest extends $tea.Model {
    deviceName?: string;
    endTime?: number;
    iotInstanceId?: string;
    mapMatch?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisSearchDeviceTraceResponseBody extends $tea.Model {
    code?: string;
    data?: GisSearchDeviceTraceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisSearchDeviceTraceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GisSearchDeviceTraceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDTDataRequest extends $tea.Model {
    DTInstanceId?: string;
    iotInstanceId?: string;
    items?: ImportDTDataRequestItems[];
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDTDataResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDTDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ImportDTDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDeviceRequest extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    iotInstanceId?: string;
    nickname?: string;
    productKey?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: ImportDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ImportDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportThingModelTslRequest extends $tea.Model {
    functionBlockId?: string;
    functionBlockName?: string;
    iotInstanceId?: string;
    productKey?: string;
    resourceGroupId?: string;
    tslStr?: string;
    tslUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportThingModelTslResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportThingModelTslResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ImportThingModelTslResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceRequest extends $tea.Model {
    apiSrn?: string;
    iotInstanceId?: string;
    param?: InvokeDataAPIServiceRequestParam[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponseBody extends $tea.Model {
    code?: string;
    data?: InvokeDataAPIServiceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: InvokeDataAPIServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingServiceRequest extends $tea.Model {
    args?: string;
    deviceName?: string;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingServiceResponseBody extends $tea.Model {
    code?: string;
    data?: InvokeThingServiceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: InvokeThingServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingsServiceRequest extends $tea.Model {
    args?: string;
    deviceName?: string[];
    identifier?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingsServiceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingsServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: InvokeThingsServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataRequest extends $tea.Model {
    apiPath?: string;
    condition?: ListAnalyticsDataRequestCondition[];
    iotInstanceId?: string;
    isoId?: string;
    pageNum?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataResponseBody extends $tea.Model {
    code?: string;
    data?: ListAnalyticsDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListAnalyticsDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDataSourceItemRequest extends $tea.Model {
    dataSourceId?: number;
    iotInstanceId?: string;
    page?: number;
    pageSize?: number;
    searchName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDataSourceItemResponseBody extends $tea.Model {
    code?: string;
    dataSourceItems?: ListDataSourceItemResponseBodyDataSourceItems;
    errorMessage?: string;
    page?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDataSourceItemResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListDataSourceItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDestinationRequest extends $tea.Model {
    iotInstanceId?: string;
    page?: number;
    pageSize?: number;
    searchName?: string;
    types?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDestinationResponseBody extends $tea.Model {
    code?: string;
    destinations?: ListDestinationResponseBodyDestinations;
    errorMessage?: string;
    page?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDestinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListDestinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobRequest extends $tea.Model {
    currentPage?: number;
    jobId?: string;
    nextToken?: string;
    pageSize?: number;
    productKey?: string;
    status?: number;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBody extends $tea.Model {
    code?: string;
    data?: ListDeviceDistributeJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListDeviceDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    pageSize?: number;
    productKey?: string;
    sourceInstanceId?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: ListDistributedDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListDistributedDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductRequest extends $tea.Model {
    currentPage?: number;
    pageSize?: number;
    productKey?: string;
    sourceInstanceId?: string;
    targetInstanceId?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponseBody extends $tea.Model {
    code?: string;
    data?: ListDistributedProductResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListDistributedProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobResponseBody extends $tea.Model {
    code?: string;
    data?: ListJobResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareRequest extends $tea.Model {
    currentPage?: number;
    destVersion?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    errorMessage?: string;
    firmwareInfo?: ListOTAFirmwareResponseBodyFirmwareInfo;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOTAFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    firmwareId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: ListOTAJobByDeviceResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOTAJobByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareRequest extends $tea.Model {
    currentPage?: number;
    firmwareId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: ListOTAJobByFirmwareResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOTAJobByFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleByProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleByProductResponseBody extends $tea.Model {
    code?: string;
    data?: ListOTAModuleByProductResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleByProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOTAModuleByProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: ListOTAModuleVersionsByDeviceResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOTAModuleVersionsByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobRequest extends $tea.Model {
    currentPage?: number;
    deviceNames?: string[];
    iotInstanceId?: string;
    jobId?: string;
    pageSize?: number;
    taskStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: ListOTATaskByJobResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOTATaskByJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    moduleName?: string;
    productKey?: string;
    taskStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: ListOTAUnfinishedTaskByDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOTAUnfinishedTaskByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    searchName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserResponseBody extends $tea.Model {
    code?: string;
    data?: ListParserResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListParserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDataSourceRequest extends $tea.Model {
    iotInstanceId?: string;
    page?: number;
    pageSize?: number;
    searchName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDataSourceResponseBody extends $tea.Model {
    code?: string;
    data?: ListParserDataSourceResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDataSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListParserDataSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDestinationRequest extends $tea.Model {
    iotInstanceId?: string;
    isFailover?: boolean;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDestinationResponseBody extends $tea.Model {
    code?: string;
    data?: ListParserDestinationResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDestinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListParserDestinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    productTag?: ListProductByTagsRequestProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    productInfos?: ListProductByTagsResponseBodyProductInfos;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListProductByTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsResponseBody extends $tea.Model {
    code?: string;
    data?: ListProductTagsResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListProductTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleResponseBody extends $tea.Model {
    code?: string;
    data?: ListRuleResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    ruleActionList?: ListRuleActionsResponseBodyRuleActionList;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListRuleActionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskRequest extends $tea.Model {
    device?: {
        [key: string]: any;
    };
    iotInstanceId?: string;
    jobId?: string;
    limit?: number;
    nextToken?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskShrinkRequest extends $tea.Model {
    deviceShrink?: string;
    iotInstanceId?: string;
    jobId?: string;
    limit?: number;
    nextToken?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskResponseBody extends $tea.Model {
    code?: string;
    data?: ListTaskResponseBodyData;
    errorMessage?: string;
    nextToken?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionResponseBody extends $tea.Model {
    code?: string;
    data?: ListThingModelVersionResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListThingModelVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingTemplatesRequest extends $tea.Model {
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingTemplatesResponseBody extends $tea.Model {
    code?: string;
    data?: ListThingTemplatesResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListThingTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAddThingTopoRequest extends $tea.Model {
    deviceListStr?: string;
    gwDeviceName?: string;
    gwIotId?: string;
    gwProductKey?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAddThingTopoResponseBody extends $tea.Model {
    code?: string;
    data?: NotifyAddThingTopoResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAddThingTopoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: NotifyAddThingTopoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenIotServiceRequest extends $tea.Model {
    ownerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenIotServiceResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenIotServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OpenIotServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PackageSoundCodeLabelBatchAudioRequest extends $tea.Model {
    batchCode?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PackageSoundCodeLabelBatchAudioResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PackageSoundCodeLabelBatchAudioResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PackageSoundCodeLabelBatchAudioResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySharedSpeechOpenRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    productKey?: string;
    shareTaskCode?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySharedSpeechOpenResponseBody extends $tea.Model {
    code?: string;
    data?: PageQuerySharedSpeechOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySharedSpeechOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PageQuerySharedSpeechOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySpeechBroadcastHourRequest extends $tea.Model {
    iotInstanceId?: string;
    pageSize?: number;
    pageToken?: string;
    queryDateTimeHour?: string;
    shareTaskCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySpeechBroadcastHourResponseBody extends $tea.Model {
    code?: string;
    data?: PageQuerySpeechBroadcastHourResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySpeechBroadcastHourResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PageQuerySpeechBroadcastHourResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrintByTemplateRequest extends $tea.Model {
    deviceName?: string;
    historyPrintTopic?: boolean;
    iotId?: string;
    iotInstanceId?: string;
    paramsJsonString?: string;
    productKey?: string;
    templateBizCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrintByTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: PrintByTemplateResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrintByTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PrintByTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubRequest extends $tea.Model {
    contentType?: string;
    correlationData?: string;
    deviceName?: string;
    iotInstanceId?: string;
    messageContent?: string;
    messageExpiryInterval?: number;
    payloadFormatIndicator?: number;
    productKey?: string;
    qos?: number;
    responseTopic?: string;
    retained?: boolean;
    topicFullName?: string;
    userProp?: PubRequestUserProp[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    messageId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PubResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubBroadcastRequest extends $tea.Model {
    iotInstanceId?: string;
    messageContent?: string;
    productKey?: string;
    topicFullName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubBroadcastResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    messageId?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubBroadcastResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PubBroadcastResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishScriptRequest extends $tea.Model {
    iotInstanceId?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishScriptResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    syntaxErrorMsg?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishScriptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PublishScriptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishStudioAppRequest extends $tea.Model {
    appId?: string;
    description?: string;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishStudioAppResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishStudioAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PublishStudioAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishThingModelRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PublishThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushSpeechRequest extends $tea.Model {
    deviceName?: string;
    groupId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    projectCode?: string;
    pushMode?: string;
    speechCodeList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PushSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusRequest extends $tea.Model {
    applyId?: number;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryBatchRegisterDeviceStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryBatchRegisterDeviceStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCertUrlByApplyIdRequest extends $tea.Model {
    applyId?: number;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCertUrlByApplyIdResponseBody extends $tea.Model {
    certUrl?: string;
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCertUrlByApplyIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryCertUrlByApplyIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClientIdsRequest extends $tea.Model {
    iotId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClientIdsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryClientIdsResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClientIdsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryClientIdsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupByGroupIdRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupByGroupIdResponseBody extends $tea.Model {
    code?: string;
    data?: QueryConsumerGroupByGroupIdResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupByGroupIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryConsumerGroupByGroupIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListRequest extends $tea.Model {
    currentPage?: number;
    fuzzy?: boolean;
    groupName?: string;
    iotInstanceId?: string;
    pageSize?: number;
    subBizCode?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: QueryConsumerGroupListResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryConsumerGroupListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusResponseBody extends $tea.Model {
    accumulatedConsumeCountPerMinute?: number;
    accumulationCount?: number;
    clientConnectionStatusList?: QueryConsumerGroupStatusResponseBodyClientConnectionStatusList;
    code?: string;
    consumerSpeed?: number;
    errorMessage?: string;
    lastConsumerTime?: string;
    realTimeConsumeCountPerMinute?: number;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryConsumerGroupStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogRequest extends $tea.Model {
    currentPage?: number;
    endTime?: number;
    iotInstanceId?: string;
    pageSize?: number;
    ruleId?: string;
    startTime?: number;
    traceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDetailSceneRuleLogResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDetailSceneRuleLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    nextToken?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceResponseBodyData;
    errorMessage?: string;
    nextToken?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLRequest extends $tea.Model {
    iotInstanceId?: string;
    SQL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceBySQLResponseBodyData[];
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceBySQLResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    resourceGroupId?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceByStatusResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceByStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    tag?: QueryDeviceByTagsRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceByTagsResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceByTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCertRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCertResponseBody extends $tea.Model {
    code?: string;
    deviceCertInfo?: QueryDeviceCertResponseBodyDeviceCertInfo;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCertResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceCertResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyRequest extends $tea.Model {
    deviceName?: string;
    functionBlockId?: string;
    identifier?: string[];
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceDesiredPropertyResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceDesiredPropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDetailRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDetailResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceDetailResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeDetailRequest extends $tea.Model {
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeDetailResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    file?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceDistributeDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobRequest extends $tea.Model {
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceDistributeJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceDistributeJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    eventType?: string;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceEventDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceEventDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileRequest extends $tea.Model {
    deviceName?: string;
    fileId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceFileResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: QueryDeviceFileListResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceFileListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    groupInfos?: QueryDeviceGroupByDeviceResponseBodyGroupInfos;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceGroupByDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    tag?: QueryDeviceGroupByTagsRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceGroupByTagsResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceGroupByTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupInfoRequest extends $tea.Model {
    groupId?: string;
    groupType?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupInfoResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceGroupInfoResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListRequest extends $tea.Model {
    currentPage?: number;
    groupName?: string;
    groupTypes?: string[];
    iotInstanceId?: string;
    pageSize?: number;
    superGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    data?: QueryDeviceGroupListResponseBodyData;
    errorMessage?: string;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceGroupListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListRequest extends $tea.Model {
    groupId?: string;
    groupType?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceGroupTagListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceGroupTagListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceInfoRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceInfoResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceInfoResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupRequest extends $tea.Model {
    currentPage?: number;
    groupId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceListByDeviceGroupResponseBodyData;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceListByDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceOriginalEventDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceOriginalEventDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceOriginalPropertyDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceOriginalPropertyDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceOriginalPropertyStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceOriginalPropertyStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceOriginalServiceDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceOriginalServiceDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    props?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDevicePropResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string[];
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    nextTime?: number;
    nextValid?: boolean;
    propertyDataInfos?: QueryDevicePropertiesDataResponseBodyPropertyDataInfos;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDevicePropertiesDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDevicePropertyDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDevicePropertyDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusRequest extends $tea.Model {
    deviceName?: string;
    functionBlockId?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDevicePropertyStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDevicePropertyStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceProvisioningRequest extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceProvisioningResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceProvisioningResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceProvisioningResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceProvisioningResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceServiceDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceServiceDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSpeechRequest extends $tea.Model {
    iotId?: string;
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceSpeechResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceStatisticsRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceStatisticsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceStatisticsResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSubTopicRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSubTopicResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    topicList?: QueryDeviceSubTopicResponseBodyTopicList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSubTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceSubTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceTunnelRequest extends $tea.Model {
    iotInstanceId?: string;
    tunnelId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceTunnelResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDeviceTunnelResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceTunnelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDeviceTunnelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    endTime?: number;
    identifier?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    userTopic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDevicesHotStorageDataResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDevicesHotStorageDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataStatusRequest extends $tea.Model {
    asc?: number;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    nextPageToken?: string;
    pageSize?: number;
    productKey?: string;
    userTopic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataStatusResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDevicesHotStorageDataStatusResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDevicesHotStorageDataStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDynamicGroupDevicesRequest extends $tea.Model {
    currentPage?: number;
    deviceName?: string;
    fuzzyName?: boolean;
    groupId?: string;
    iotInstanceId?: string;
    nextToken?: string;
    pageSize?: number;
    productKey?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDynamicGroupDevicesResponseBody extends $tea.Model {
    code?: string;
    data?: QueryDynamicGroupDevicesResponseBodyData;
    errorMessage?: string;
    nextToken?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDynamicGroupDevicesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDynamicGroupDevicesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverRequest extends $tea.Model {
    currentPage?: number;
    driverName?: string;
    iotInstanceId?: string;
    pageSize?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeDriverResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionRequest extends $tea.Model {
    currentPage?: number;
    driverId?: string;
    driverVersion?: string;
    iotInstanceId?: string;
    pageSize?: number;
    versionState?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeDriverVersionResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    name?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelRequest extends $tea.Model {
    channelName?: string;
    currentPage?: number;
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceChannelResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceRequest extends $tea.Model {
    currentPage?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverRequest extends $tea.Model {
    channelId?: string;
    currentPage?: number;
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceDeviceByDriverResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceDeviceByDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverRequest extends $tea.Model {
    currentPage?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceDriverResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceDriverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceGatewayRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceGatewayResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    gatewayList?: QueryEdgeInstanceGatewayResponseBodyGatewayList[];
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceGatewayResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceGatewayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentRequest extends $tea.Model {
    currentPage?: number;
    endTime?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceHistoricDeploymentResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceHistoricDeploymentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingRequest extends $tea.Model {
    currentPage?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceMessageRoutingResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleRequest extends $tea.Model {
    currentPage?: number;
    instanceId?: string;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleResponseBody extends $tea.Model {
    code?: string;
    data?: QueryEdgeInstanceSceneRuleResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryEdgeInstanceSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryImportedDeviceByApplyIdRequest extends $tea.Model {
    applyId?: number;
    iotInstanceId?: string;
    pageNo?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryImportedDeviceByApplyIdResponseBody extends $tea.Model {
    code?: string;
    deviceList?: QueryImportedDeviceByApplyIdResponseBodyDeviceList;
    errorMessage?: string;
    pageNo?: number;
    pageSize?: number;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryImportedDeviceByApplyIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryImportedDeviceByApplyIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBody extends $tea.Model {
    code?: string;
    data?: QueryJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatisticsRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatisticsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryJobStatisticsResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatisticsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryJobStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLicenseDeviceListRequest extends $tea.Model {
    endTime?: number;
    iotId?: string;
    iotInstanceId?: string;
    licenseCode?: string;
    pageId?: number;
    pageSize?: number;
    productKey?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLicenseDeviceListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryLicenseDeviceListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLicenseDeviceListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryLicenseDeviceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsRequest extends $tea.Model {
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    joinPermissions?: QueryLoRaJoinPermissionsResponseBodyJoinPermissions;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryLoRaJoinPermissionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoRequest extends $tea.Model {
    iotInstanceId?: string;
    uniMsgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    message?: QueryMessageInfoResponseBodyMessage;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryMessageInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareRequest extends $tea.Model {
    firmwareId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    firmwareInfo?: QueryOTAFirmwareResponseBodyFirmwareInfo;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryOTAFirmwareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBody extends $tea.Model {
    code?: string;
    data?: QueryOTAJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryOTAJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdRequest extends $tea.Model {
    applyId?: number;
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdResponseBody extends $tea.Model {
    applyDeviceList?: QueryPageByApplyIdResponseBodyApplyDeviceList;
    code?: string;
    errorMessage?: string;
    page?: number;
    pageCount?: number;
    pageSize?: number;
    requestId?: string;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryPageByApplyIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProductResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductCertInfoRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductCertInfoResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    productCertInfo?: QueryProductCertInfoResponseBodyProductCertInfo;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductCertInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryProductCertInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListRequest extends $tea.Model {
    aliyunCommodityCode?: string;
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProductListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryProductListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProductTopicResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryProductTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectShareDeviceListRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectShareDeviceListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProjectShareDeviceListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectShareDeviceListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryProjectShareDeviceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleRequest extends $tea.Model {
    currentPage?: number;
    iotInstanceId?: string;
    pageSize?: number;
    ruleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySceneRuleResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchedulePeriodListRequest extends $tea.Model {
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    scheduleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchedulePeriodListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySchedulePeriodListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchedulePeriodListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySchedulePeriodListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShareTaskDeviceListRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    shareTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShareTaskDeviceListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryShareTaskDeviceListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShareTaskDeviceListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryShareTaskDeviceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageRequest extends $tea.Model {
    fuzzyGroupName?: string;
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    projectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySolutionDeviceGroupPageResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySolutionDeviceGroupPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchFailedResultRequest extends $tea.Model {
    batchCode?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchFailedResultResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySoundCodeLabelBatchFailedResultResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchFailedResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySoundCodeLabelBatchFailedResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchListRequest extends $tea.Model {
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    scheduleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySoundCodeLabelBatchListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySoundCodeLabelBatchListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelListRequest extends $tea.Model {
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    scheduleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySoundCodeLabelListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySoundCodeLabelListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeListRequest extends $tea.Model {
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySoundCodeListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySoundCodeListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeScheduleListRequest extends $tea.Model {
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeScheduleListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySoundCodeScheduleListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeScheduleListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySoundCodeScheduleListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechRequest extends $tea.Model {
    iotInstanceId?: string;
    speechCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechDeviceRequest extends $tea.Model {
    availableSpace?: string;
    availableSpaceScope?: string;
    deviceName?: string;
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    projectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySpeechDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseAvailableQuotaRequest extends $tea.Model {
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseAvailableQuotaResponseBody extends $tea.Model {
    code?: string;
    data?: number;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseAvailableQuotaResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySpeechLicenseAvailableQuotaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseDeviceListRequest extends $tea.Model {
    checkGroupId?: string;
    deviceName?: string;
    iotInstanceId?: string;
    licenseStatusList?: string[];
    pageId?: number;
    pageSize?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseDeviceListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechLicenseDeviceListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseDeviceListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySpeechLicenseDeviceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListRequest extends $tea.Model {
    audioFormat?: string;
    iotInstanceId?: string;
    pageId?: number;
    pageSize?: number;
    projectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySpeechListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobCode?: string;
    pageId?: number;
    pageSize?: number;
    projectCode?: string;
    pushMode?: string;
    statusList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechPushJobResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySpeechPushJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    jobCode?: string;
    pageId?: number;
    pageSize?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechPushJobDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySpeechPushJobDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechRequest extends $tea.Model {
    iotInstanceId?: string;
    jobCode?: string;
    pageId?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySpeechPushJobSpeechResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySpeechPushJobSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenRequest extends $tea.Model {
    appId?: string;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponseBody extends $tea.Model {
    code?: string;
    data?: QueryStudioAppDomainListOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryStudioAppDomainListOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListRequest extends $tea.Model {
    fuzzyName?: string;
    iotInstanceId?: string;
    pageNo?: number;
    pageSize?: number;
    projectId?: string;
    types?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryStudioAppListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryStudioAppListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenRequest extends $tea.Model {
    appId?: string;
    iotInstanceId?: string;
    isRelease?: boolean;
    pageNo?: number;
    pageSize?: number;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponseBody extends $tea.Model {
    code?: string;
    data?: QueryStudioAppPageListOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryStudioAppPageListOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListRequest extends $tea.Model {
    iotInstanceId?: string;
    name?: string;
    pageNo?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponseBody extends $tea.Model {
    code?: string;
    data?: QueryStudioProjectListResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryStudioProjectListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeRelationRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    consumerGroupIds?: string[];
    deviceDataFlag?: boolean;
    deviceLifeCycleFlag?: boolean;
    deviceStatusChangeFlag?: boolean;
    deviceTagFlag?: boolean;
    deviceTopoLifeCycleFlag?: boolean;
    errorMessage?: string;
    foundDeviceListFlag?: boolean;
    mnsConfiguration?: string;
    otaEventFlag?: boolean;
    otaJobFlag?: boolean;
    otaVersionFlag?: boolean;
    productKey?: string;
    requestId?: string;
    subscribeFlags?: string;
    success?: boolean;
    thingHistoryFlag?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogRequest extends $tea.Model {
    currentPage?: number;
    endTime?: number;
    iotInstanceId?: string;
    pageSize?: number;
    ruleId?: string;
    startTime?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySummarySceneRuleLogResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySummarySceneRuleLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySuperDeviceGroupResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QuerySuperDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskRequest extends $tea.Model {
    iotInstanceId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBody extends $tea.Model {
    code?: string;
    data?: QueryTaskResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelResponseBody extends $tea.Model {
    code?: string;
    data?: QueryThingModelResponseBodyData;
    errorMessage?: string;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigResponseBody extends $tea.Model {
    code?: string;
    data?: QueryThingModelExtendConfigResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryThingModelExtendConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigPublishedRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigPublishedResponseBody extends $tea.Model {
    code?: string;
    data?: QueryThingModelExtendConfigPublishedResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigPublishedResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryThingModelExtendConfigPublishedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelPublishedRequest extends $tea.Model {
    functionBlockId?: string;
    iotInstanceId?: string;
    modelVersion?: string;
    productKey?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelPublishedResponseBody extends $tea.Model {
    code?: string;
    data?: QueryThingModelPublishedResponseBodyData;
    errorMessage?: string;
    productKey?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelPublishedResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryThingModelPublishedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicConfigRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicConfigResponseBody extends $tea.Model {
    code?: string;
    data?: QueryTopicConfigResponseBodyData;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryTopicConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicReverseRouteTableRequest extends $tea.Model {
    iotInstanceId?: string;
    regionId?: string;
    topic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicReverseRouteTableResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    srcTopics?: QueryTopicReverseRouteTableResponseBodySrcTopics;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicReverseRouteTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryTopicReverseRouteTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicRouteTableRequest extends $tea.Model {
    iotInstanceId?: string;
    topic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicRouteTableResponseBody extends $tea.Model {
    code?: string;
    dstTopics?: QueryTopicRouteTableResponseBodyDstTopics;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicRouteTableResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryTopicRouteTableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVehicleDeviceRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVehicleDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryVehicleDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVehicleDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryVehicleDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RRpcRequest extends $tea.Model {
    contentType?: string;
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    requestBase64Byte?: string;
    timeout?: number;
    topic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RRpcResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    messageId?: number;
    payloadBase64Byte?: string;
    requestId?: string;
    rrpcCode?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RRpcResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RRpcResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReBindLicenseDeviceRequest extends $tea.Model {
    deviceNameList?: string[];
    iotInstanceId?: string;
    licenseCode?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReBindLicenseDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: ReBindLicenseDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReBindLicenseDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReBindLicenseDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeCarNumRequest extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeCarNumResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeCarNumResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecognizeCarNumResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizePictureGeneralRequest extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizePictureGeneralResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizePictureGeneralResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecognizePictureGeneralResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshDeviceTunnelSharePasswordRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshDeviceTunnelSharePasswordResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    password?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshDeviceTunnelSharePasswordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RefreshDeviceTunnelSharePasswordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshStudioAppTokenOpenRequest extends $tea.Model {
    appId?: string;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshStudioAppTokenOpenResponseBody extends $tea.Model {
    code?: string;
    data?: RefreshStudioAppTokenOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshStudioAppTokenOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RefreshStudioAppTokenOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceRequest extends $tea.Model {
    appKey?: string;
    devEui?: string;
    deviceName?: string;
    iotInstanceId?: string;
    joinEui?: string;
    loraNodeType?: string;
    nickname?: string;
    pinCode?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponseBody extends $tea.Model {
    code?: string;
    data?: RegisterDeviceResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RegisterDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseEdgeDriverVersionRequest extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReleaseEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseProductRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseProductResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReleaseProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveThingTopoRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveThingTopoResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveThingTopoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RemoveThingTopoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplaceEdgeInstanceGatewayRequest extends $tea.Model {
    currentGatewayId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    newGatewayId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplaceEdgeInstanceGatewayResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplaceEdgeInstanceGatewayResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReplaceEdgeInstanceGatewayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RerunJobRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RerunJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RerunJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RerunJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetConsumerGroupPositionRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetConsumerGroupPositionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetConsumerGroupPositionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ResetConsumerGroupPositionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetThingRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetThingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    jobId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResetThingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ResetThingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrySoundCodeLabelBatchRequest extends $tea.Model {
    batchCode?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrySoundCodeLabelBatchResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrySoundCodeLabelBatchResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RetrySoundCodeLabelBatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReupgradeOTATaskRequest extends $tea.Model {
    iotInstanceId?: string;
    jobId?: string;
    taskId?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReupgradeOTATaskResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReupgradeOTATaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReupgradeOTATaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveDevicePropRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    props?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveDevicePropResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveDevicePropResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveDevicePropResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveScriptRequest extends $tea.Model {
    iotInstanceId?: string;
    parserId?: number;
    scriptDraft?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveScriptResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveScriptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveScriptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceDesiredPropertyRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    items?: string;
    productKey?: string;
    versions?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceDesiredPropertyResponseBody extends $tea.Model {
    code?: string;
    data?: SetDeviceDesiredPropertyResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceDesiredPropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetDeviceDesiredPropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceGroupTagsRequest extends $tea.Model {
    groupId?: string;
    groupType?: string;
    iotInstanceId?: string;
    tagString?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceGroupTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceGroupTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetDeviceGroupTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicePropertyRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    items?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicePropertyResponseBody extends $tea.Model {
    code?: string;
    data?: SetDevicePropertyResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicePropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetDevicePropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicesPropertyRequest extends $tea.Model {
    deviceName?: string[];
    iotInstanceId?: string;
    items?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicesPropertyResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicesPropertyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetDevicesPropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEdgeInstanceDriverConfigsRequest extends $tea.Model {
    configs?: SetEdgeInstanceDriverConfigsRequestConfigs[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEdgeInstanceDriverConfigsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEdgeInstanceDriverConfigsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetEdgeInstanceDriverConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetProductCertInfoRequest extends $tea.Model {
    iotInstanceId?: string;
    issueModel?: number;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetProductCertInfoResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetProductCertInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetProductCertInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetStudioProjectCooperationRequest extends $tea.Model {
    iotInstanceId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetStudioProjectCooperationResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetStudioProjectCooperationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetStudioProjectCooperationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenRequest extends $tea.Model {
    appId?: string;
    authMode?: number;
    iotInstanceId?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenResponseBody extends $tea.Model {
    code?: string;
    data?: SetupStudioAppAuthModeOpenResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetupStudioAppAuthModeOpenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareSpeechByCombinationRequest extends $tea.Model {
    audioFormat?: string;
    combinationList?: string[];
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    speechId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareSpeechByCombinationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareSpeechByCombinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ShareSpeechByCombinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechByCombinationRequest extends $tea.Model {
    audioFormat?: string;
    combinationList?: string[];
    deviceName?: string;
    enforceFlag?: boolean;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    speechId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechByCombinationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechByCombinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SpeechByCombinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechBySynthesisRequest extends $tea.Model {
    audioFormat?: string;
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    speechId?: string;
    speechRate?: number;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechBySynthesisResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpeechBySynthesisResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SpeechBySynthesisResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartParserRequest extends $tea.Model {
    iotInstanceId?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartParserResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartParserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StartParserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StartRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopParserRequest extends $tea.Model {
    iotInstanceId?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopParserResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopParserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StopParserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StopRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeTopicRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    topic?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeTopicResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SubscribeTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSpeechByCombinationRequest extends $tea.Model {
    audioFormat?: string;
    combinationList?: string[];
    deviceName?: string;
    enforceFlag?: boolean;
    iotId?: string;
    iotInstanceId?: string;
    productKey?: string;
    speechId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSpeechByCombinationResponseBody extends $tea.Model {
    code?: string;
    data?: SyncSpeechByCombinationResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSpeechByCombinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SyncSpeechByCombinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechRequest extends $tea.Model {
    audioFormat?: string;
    enableSoundCode?: boolean;
    iotInstanceId?: string;
    projectCode?: string;
    soundCodeConfig?: {
        [key: string]: any;
    };
    speechRate?: number;
    speechType?: string;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechShrinkRequest extends $tea.Model {
    audioFormat?: string;
    enableSoundCode?: boolean;
    iotInstanceId?: string;
    projectCode?: string;
    soundCodeConfigShrink?: string;
    speechRate?: number;
    speechType?: string;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechResponseBody extends $tea.Model {
    code?: string;
    data?: TestSpeechResponseBodyData;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TestSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSwitchRequest extends $tea.Model {
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSwitchResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    iotId?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSwitchResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TestSwitchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformClientIdRequest extends $tea.Model {
    clientId?: string;
    iotId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformClientIdResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformClientIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TransformClientIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TriggerSceneRuleRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TriggerSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TriggerSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TriggerSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindApplicationFromEdgeInstanceRequest extends $tea.Model {
    applicationId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindApplicationFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindApplicationFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnbindApplicationFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindDriverFromEdgeInstanceRequest extends $tea.Model {
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindDriverFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindDriverFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnbindDriverFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindLicenseProductRequest extends $tea.Model {
    iotInstanceId?: string;
    licenseCode?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindLicenseProductResponseBody extends $tea.Model {
    code?: string;
    data?: boolean;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindLicenseProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnbindLicenseProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindRoleFromEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindRoleFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindRoleFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnbindRoleFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindSceneRuleFromEdgeInstanceRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    ruleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindSceneRuleFromEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindSceneRuleFromEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnbindSceneRuleFromEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConsumerGroupRequest extends $tea.Model {
    groupId?: string;
    iotInstanceId?: string;
    newGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConsumerGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConsumerGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateConsumerGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDestinationRequest extends $tea.Model {
    configuration?: string;
    description?: string;
    destinationId?: number;
    iotInstanceId?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDestinationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDestinationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateDestinationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceGroupRequest extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupType?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceGroupResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceShadowRequest extends $tea.Model {
    deltaUpdate?: boolean;
    deviceName?: string;
    iotInstanceId?: string;
    productKey?: string;
    shadowMessage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceShadowResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceShadowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateDeviceShadowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeDriverVersionRequest extends $tea.Model {
    argument?: string;
    configCheckRule?: string;
    containerConfig?: string;
    description?: string;
    driverConfig?: string;
    driverId?: string;
    driverVersion?: string;
    edgeVersion?: string;
    iotInstanceId?: string;
    sourceConfig?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeDriverVersionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeDriverVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateEdgeDriverVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceRequest extends $tea.Model {
    bizEnable?: boolean;
    instanceId?: string;
    iotInstanceId?: string;
    name?: string;
    spec?: number;
    tags?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateEdgeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceChannelRequest extends $tea.Model {
    channelId?: string;
    channelName?: string;
    configs?: UpdateEdgeInstanceChannelRequestConfigs[];
    driverId?: string;
    instanceId?: string;
    iotInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceChannelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceChannelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateEdgeInstanceChannelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceMessageRoutingRequest extends $tea.Model {
    instanceId?: string;
    iotInstanceId?: string;
    name?: string;
    routeId?: number;
    sourceData?: string;
    sourceType?: string;
    targetData?: string;
    targetIotHubQos?: number;
    targetType?: string;
    topicFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceMessageRoutingResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceMessageRoutingResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateEdgeInstanceMessageRoutingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateJobRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    jobId?: string;
    rolloutConfig?: {
        [key: string]: any;
    };
    timeoutConfig?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateJobShrinkRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    jobId?: string;
    rolloutConfigShrink?: string;
    timeoutConfigShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateJobResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateJobResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateJobResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOTAModuleRequest extends $tea.Model {
    aliasName?: string;
    desc?: string;
    iotInstanceId?: string;
    moduleName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOTAModuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOTAModuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateOTAModuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateParserRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    name?: string;
    parserId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateParserResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateParserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateParserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateParserDataSourceRequest extends $tea.Model {
    dataSourceId?: number;
    description?: string;
    iotInstanceId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateParserDataSourceResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateParserDataSourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateParserDataSourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductRequest extends $tea.Model {
    description?: string;
    iotInstanceId?: string;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateProductResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductFilterConfigRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    propertyTimestampFilter?: boolean;
    propertyValueFilter?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductFilterConfigResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductFilterConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateProductFilterConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    productTag?: UpdateProductTagsRequestProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    invalidProductTags?: UpdateProductTagsResponseBodyInvalidProductTags;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateProductTagsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTopicRequest extends $tea.Model {
    codec?: string;
    desc?: string;
    enableProxySubscribe?: boolean;
    iotInstanceId?: string;
    operation?: string;
    topicId?: string;
    topicShortName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTopicResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTopicResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateProductTopicResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    name?: string;
    productKey?: string;
    ruleDesc?: string;
    ruleId?: number;
    select?: string;
    shortTopic?: string;
    topic?: string;
    topicType?: number;
    where?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleActionRequest extends $tea.Model {
    actionId?: number;
    configuration?: string;
    iotInstanceId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleActionResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRuleActionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateRuleActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneRuleRequest extends $tea.Model {
    iotInstanceId?: string;
    ruleContent?: string;
    ruleDescription?: string;
    ruleId?: string;
    ruleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneRuleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneRuleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateSceneRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSchedulePeriodRequest extends $tea.Model {
    description?: string;
    endTime?: string;
    iotInstanceId?: string;
    periodCode?: string;
    soundCodeContent?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSchedulePeriodResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSchedulePeriodResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateSchedulePeriodResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeRequest extends $tea.Model {
    duration?: number;
    iotInstanceId?: string;
    name?: string;
    soundCode?: string;
    soundCodeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateSoundCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeLabelRequest extends $tea.Model {
    iotInstanceId?: string;
    label?: string;
    soundCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeLabelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeLabelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateSoundCodeLabelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeScheduleRequest extends $tea.Model {
    description?: string;
    endDate?: string;
    endTime?: string;
    iotInstanceId?: string;
    name?: string;
    scheduleCode?: string;
    startDate?: string;
    startTime?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeScheduleResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSoundCodeScheduleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateSoundCodeScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpeechRequest extends $tea.Model {
    enableSoundCode?: boolean;
    iotInstanceId?: string;
    projectCode?: string;
    soundCodeConfig?: {
        [key: string]: any;
    };
    speechCode?: string;
    speechRate?: number;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpeechShrinkRequest extends $tea.Model {
    enableSoundCode?: boolean;
    iotInstanceId?: string;
    projectCode?: string;
    soundCodeConfigShrink?: string;
    speechCode?: string;
    speechRate?: number;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpeechResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpeechResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateSpeechResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribeRelationRequest extends $tea.Model {
    consumerGroupIds?: string[];
    deviceDataFlag?: boolean;
    deviceLifeCycleFlag?: boolean;
    deviceStatusChangeFlag?: boolean;
    deviceTagFlag?: boolean;
    deviceTopoLifeCycleFlag?: boolean;
    foundDeviceListFlag?: boolean;
    iotInstanceId?: string;
    mnsConfiguration?: string;
    otaEventFlag?: boolean;
    otaJobFlag?: boolean;
    otaVersionFlag?: boolean;
    productKey?: string;
    subscribeFlags?: string;
    thingHistoryFlag?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribeRelationResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSubscribeRelationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateSubscribeRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelRequest extends $tea.Model {
    functionBlockId?: string;
    functionBlockName?: string;
    identifier?: string;
    iotInstanceId?: string;
    productKey?: string;
    thingModelJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingModelResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateThingModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingScriptRequest extends $tea.Model {
    iotInstanceId?: string;
    productKey?: string;
    scriptContent?: string;
    scriptType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingScriptResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateThingScriptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateThingScriptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTopicConfigRequest extends $tea.Model {
    codec?: string;
    description?: string;
    enableBroadcast?: boolean;
    enableProxySubscribe?: boolean;
    iotInstanceId?: string;
    operation?: string;
    productKey?: string;
    topicFullName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTopicConfigResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTopicConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateTopicConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteDevicesHotStorageDataRequest extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    iotInstanceId?: string;
    items?: string;
    productKey?: string;
    userTopic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteDevicesHotStorageDataResponseBody extends $tea.Model {
    code?: string;
    errorMessage?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WriteDevicesHotStorageDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: WriteDevicesHotStorageDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareTaskDeviceResponseBodyData extends $tea.Model {
    failSum?: number;
    failedResultCsvFile?: string;
    progress?: number;
    progressId?: string;
    successSum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddDeviceGroupRelationsRequestDevice extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddThingTopoRequestTopoAddItem extends $tea.Model {
    clientId?: string;
    deviceName?: string;
    productKey?: string;
    sign?: string;
    signMethod?: string;
    timestamp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBindDevicesIntoProjectRequestDevices extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesRequestDeviceNameList extends $tea.Model {
    deviceName?: string;
    deviceNickname?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyDataInvalidDetailListInvalidDetailList extends $tea.Model {
    deviceName?: string;
    errorMsg?: string;
    nickName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyDataInvalidDetailList extends $tea.Model {
    invalidDetailList?: BatchCheckDeviceNamesResponseBodyDataInvalidDetailListInvalidDetailList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList extends $tea.Model {
    invalidDeviceName?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList extends $tea.Model {
    invalidDeviceNickname?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyDataRepeatedDeviceNameList extends $tea.Model {
    repeatDevieNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckDeviceNamesResponseBodyData extends $tea.Model {
    applyId?: number;
    invalidDetailList?: BatchCheckDeviceNamesResponseBodyDataInvalidDetailList;
    invalidDeviceNameList?: BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList;
    invalidDeviceNicknameList?: BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList;
    repeatedDeviceNameList?: BatchCheckDeviceNamesResponseBodyDataRepeatedDeviceNameList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckImportDeviceRequestDeviceList extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckImportDeviceResponseBodyDataInvalidDetailList extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    errorMsg?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckImportDeviceResponseBodyData extends $tea.Model {
    invalidDetailList?: BatchCheckImportDeviceResponseBodyDataInvalidDetailList[];
    invalidDeviceNameList?: string[];
    invalidDeviceSecretList?: string[];
    invalidSnList?: string[];
    repeatedDeviceNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckVehicleDeviceRequestDeviceList extends $tea.Model {
    deviceId?: string;
    deviceModel?: string;
    deviceName?: string;
    manufacturer?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckVehicleDeviceResponseBodyDataInvalidDetailList extends $tea.Model {
    deviceId?: string;
    deviceModel?: string;
    deviceName?: string;
    errorMsg?: string;
    manufacturer?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCheckVehicleDeviceResponseBodyData extends $tea.Model {
    invalidDetailList?: BatchCheckVehicleDeviceResponseBodyDataInvalidDetailList[];
    invalidDeviceIdList?: string[];
    invalidDeviceModelList?: string[];
    invalidDeviceNameList?: string[];
    invalidManufacturerList?: string[];
    repeatedDeviceIdList?: string[];
    repeatedDeviceNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceGroupRelationsRequestDevice extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceBindStatusResponseBodyData extends $tea.Model {
    bindStatus?: number;
    instanceId?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus extends $tea.Model {
    asAddress?: string;
    deviceId?: string;
    deviceName?: string;
    iotId?: string;
    lastOnlineTime?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetDeviceStateResponseBodyDeviceStatusList extends $tea.Model {
    deviceStatus?: BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeDriverResponseBodyDriverList extends $tea.Model {
    cpuArch?: string;
    driverId?: string;
    driverName?: string;
    driverProtocol?: string;
    gmtCreateTimestamp?: number;
    gmtModifiedTimestamp?: number;
    isBuiltIn?: boolean;
    runtime?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig extends $tea.Model {
    configId?: string;
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList extends $tea.Model {
    config?: BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBodyDataChannel extends $tea.Model {
    channelId?: string;
    channelName?: string;
    configList?: BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceChannelResponseBodyData extends $tea.Model {
    channel?: BatchGetEdgeInstanceChannelResponseBodyDataChannel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList extends $tea.Model {
    channelId?: string;
    channelName?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig extends $tea.Model {
    content?: string;
    format?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList extends $tea.Model {
    config?: BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList extends $tea.Model {
    driverId?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList extends $tea.Model {
    configId?: string;
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList extends $tea.Model {
    configList?: BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList[];
    driverId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGrayMigrationDeviceResponseBodyDataDetailsItem extends $tea.Model {
    code?: number;
    deviceName?: string;
    message?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGrayMigrationDeviceResponseBodyDataDetails extends $tea.Model {
    item?: BatchGrayMigrationDeviceResponseBodyDataDetailsItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGrayMigrationDeviceResponseBodyData extends $tea.Model {
    details?: BatchGrayMigrationDeviceResponseBodyDataDetails;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceRequestDeviceList extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponseBodyDataInvalidDetailListInvalidDetailList extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    errorMsg?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponseBodyDataInvalidDetailList extends $tea.Model {
    invalidDetailList?: BatchImportDeviceResponseBodyDataInvalidDetailListInvalidDetailList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponseBodyDataInvalidDeviceNameList extends $tea.Model {
    invalidDeviceName?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponseBodyDataInvalidDeviceSecretList extends $tea.Model {
    invalidDeviceSecret?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponseBodyDataInvalidSnList extends $tea.Model {
    invalidSn?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponseBodyDataRepeatedDeviceNameList extends $tea.Model {
    repeatedDeviceName?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportDeviceResponseBodyData extends $tea.Model {
    applyId?: number;
    invalidDetailList?: BatchImportDeviceResponseBodyDataInvalidDetailList;
    invalidDeviceNameList?: BatchImportDeviceResponseBodyDataInvalidDeviceNameList;
    invalidDeviceSecretList?: BatchImportDeviceResponseBodyDataInvalidDeviceSecretList;
    invalidSnList?: BatchImportDeviceResponseBodyDataInvalidSnList;
    repeatedDeviceNameList?: BatchImportDeviceResponseBodyDataRepeatedDeviceNameList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceRequestDeviceList extends $tea.Model {
    deviceId?: string;
    deviceModel?: string;
    deviceName?: string;
    manufacturer?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyDataInvalidDetailListInvalidDetailList extends $tea.Model {
    deviceId?: string;
    deviceModel?: string;
    deviceName?: string;
    errorMsg?: string;
    manufacturer?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyDataInvalidDetailList extends $tea.Model {
    invalidDetailList?: BatchImportVehicleDeviceResponseBodyDataInvalidDetailListInvalidDetailList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyDataInvalidDeviceIdList extends $tea.Model {
    invalidDeviceIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyDataInvalidDeviceModelList extends $tea.Model {
    invalidDeviceModelList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyDataInvalidDeviceNameList extends $tea.Model {
    invalidDeviceNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyDataInvalidManufacturerList extends $tea.Model {
    invalidManufacturerList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyDataRepeatedDeviceIdList extends $tea.Model {
    repeatedDeviceIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyDataRepeatedDeviceNameList extends $tea.Model {
    repeatedDeviceNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchImportVehicleDeviceResponseBodyData extends $tea.Model {
    applyId?: number;
    invalidDetailList?: BatchImportVehicleDeviceResponseBodyDataInvalidDetailList;
    invalidDeviceIdList?: BatchImportVehicleDeviceResponseBodyDataInvalidDeviceIdList;
    invalidDeviceModelList?: BatchImportVehicleDeviceResponseBodyDataInvalidDeviceModelList;
    invalidDeviceNameList?: BatchImportVehicleDeviceResponseBodyDataInvalidDeviceNameList;
    invalidManufacturerList?: BatchImportVehicleDeviceResponseBodyDataInvalidManufacturerList;
    repeatedDeviceIdList?: BatchImportVehicleDeviceResponseBodyDataRepeatedDeviceIdList;
    repeatedDeviceNameList?: BatchImportVehicleDeviceResponseBodyDataRepeatedDeviceNameList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailResponseBodyDataData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    firmwareVersion?: string;
    gmtActive?: string;
    gmtCreate?: string;
    iotId?: string;
    nickname?: string;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    region?: string;
    status?: string;
    utcActive?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryDeviceDetailResponseBodyData extends $tea.Model {
    data?: BatchQueryDeviceDetailResponseBodyDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponseBodyData extends $tea.Model {
    applyId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceWithApplyIdResponseBodyData extends $tea.Model {
    applyId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs extends $tea.Model {
    content?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUnbindProjectDevicesRequestDevices extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceNicknameRequestDeviceNicknameInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindLicenseDeviceResponseBodyData extends $tea.Model {
    checkProgressId?: string;
    failSum?: number;
    progress?: number;
    resultCsvFile?: string;
    successSum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckBindLicenseDeviceProgressResponseBodyData extends $tea.Model {
    failSum?: number;
    progress?: number;
    resultCsvFile?: string;
    successSum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDeviceDesiredPropertyResponseBodyData extends $tea.Model {
    versions?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceRequestRequestParam extends $tea.Model {
    desc?: string;
    example?: string;
    name?: string;
    required?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceRequestResponseParam extends $tea.Model {
    desc?: string;
    example?: string;
    name?: string;
    required?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDataAPIServiceResponseBodyData extends $tea.Model {
    apiSrn?: string;
    createTime?: number;
    lastUpdateTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDestinationResponseBodyDestination extends $tea.Model {
    configuration?: string;
    destinationId?: number;
    isFailover?: boolean;
    name?: string;
    type?: string;
    utcCreated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDistributeJobRequestTargetInstanceConfig extends $tea.Model {
    targetInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceDynamicGroupResponseBodyData extends $tea.Model {
    dynamicGroupExpression?: string;
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceGroupResponseBodyData extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceTunnelResponseBodyData extends $tea.Model {
    sourceAccessToken?: string;
    sourceURI?: string;
    tunnelId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDownloadDataJobResponseBodyData extends $tea.Model {
    asyncExecute?: boolean;
    csvFileName?: string;
    csvUrl?: string;
    longJobId?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeInstanceChannelRequestConfigs extends $tea.Model {
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeOssPreSignedAddressResponseBodyData extends $tea.Model {
    ossAddress?: string;
    ossPreSignedAddress?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLoRaNodesTaskRequestDeviceInfo extends $tea.Model {
    devEui?: string;
    pinCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTADynamicUpgradeJobResponseBodyData extends $tea.Model {
    jobId?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareRequestMultiFiles extends $tea.Model {
    fileMd5?: string;
    name?: string;
    signValue?: string;
    size?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAFirmwareResponseBodyData extends $tea.Model {
    firmwareId?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAStaticUpgradeJobResponseBodyData extends $tea.Model {
    jobId?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOTAVerifyJobResponseBodyData extends $tea.Model {
    jobId?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateParserDataSourceResponseBodyDataSource extends $tea.Model {
    dataSourceId?: number;
    description?: string;
    name?: string;
    utcCreated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductResponseBodyData extends $tea.Model {
    aliyunCommodityCode?: string;
    authType?: string;
    dataFormat?: number;
    description?: string;
    id2?: boolean;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    productSecret?: string;
    protocolType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsRequestProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsResponseBodyInvalidProductTagsProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProductTagsResponseBodyInvalidProductTags extends $tea.Model {
    productTag?: CreateProductTagsResponseBodyInvalidProductTagsProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStudioAppDomainOpenResponseBodyData extends $tea.Model {
    appId?: string;
    host?: string;
    id?: number;
    isBeian?: string;
    projectId?: string;
    protocol?: string;
    tenantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTopicRouteTableResponseBodyFailureTopics extends $tea.Model {
    topic?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceSpeechRequestDeviceSpeechList extends $tea.Model {
    audioFormat?: string;
    bizCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShareTaskDeviceResponseBodyData extends $tea.Model {
    progress?: number;
    progressId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTopicRouteTableResponseBodyFailureTopics extends $tea.Model {
    topic?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDeviceNameListURLResponseBodyData extends $tea.Model {
    accessKeyId?: string;
    fileUrl?: string;
    host?: string;
    key?: string;
    objectStorage?: string;
    policy?: string;
    signature?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateFileUploadURLResponseBodyData extends $tea.Model {
    host?: string;
    key?: string;
    objectStorage?: string;
    ossAccessKeyId?: string;
    policy?: string;
    signature?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateOTAUploadURLResponseBodyData extends $tea.Model {
    firmwareUrl?: string;
    host?: string;
    key?: string;
    OSSAccessKeyId?: string;
    objectStorage?: string;
    policy?: string;
    signature?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams extends $tea.Model {
    desc?: string;
    example?: string;
    name?: string;
    required?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams extends $tea.Model {
    requestParams?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams extends $tea.Model {
    desc?: string;
    example?: string;
    name?: string;
    required?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams extends $tea.Model {
    responseParams?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO extends $tea.Model {
    originSql?: string;
    requestParams?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams;
    responseParams?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams;
    templateSql?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataAPIServiceDetailResponseBodyData extends $tea.Model {
    apiPath?: string;
    apiSrn?: string;
    createTime?: number;
    dateFormat?: string;
    description?: string;
    displayName?: string;
    lastUpdateTime?: number;
    requestMethod?: string;
    requestProtocol?: string;
    sqlTemplateDTO?: GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDestinationResponseBodyDestination extends $tea.Model {
    configuration?: string;
    destinationId?: string;
    isFailover?: boolean;
    name?: string;
    status?: string;
    type?: string;
    utcCreated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceStatusResponseBodyData extends $tea.Model {
    status?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceTunnelShareStatusResponseBodyData extends $tea.Model {
    gmtOpened?: number;
    isOpen?: boolean;
    password?: string;
    shareId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileResponseBodyDataHeader extends $tea.Model {
    alias?: string;
    dimDateClass?: string;
    fieldName?: string;
    fieldType?: string;
    geoClass?: string;
    timeClass?: string;
    typeClass?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileResponseBodyDataQuerySettingAstExpr extends $tea.Model {
    expr?: string;
    exprType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileResponseBodyDataQuerySettingSelectedHeaders extends $tea.Model {
    alias?: string;
    dimDateClass?: string;
    fieldName?: string;
    fieldType?: string;
    geoClass?: string;
    timeClass?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileResponseBodyDataQuerySetting extends $tea.Model {
    astExpr?: GetDownloadFileResponseBodyDataQuerySettingAstExpr[];
    selectedHeaders?: GetDownloadFileResponseBodyDataQuerySettingSelectedHeaders[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadFileResponseBodyData extends $tea.Model {
    asyncExecute?: boolean;
    beginTime?: number;
    csvFileName?: string;
    csvUrl?: string;
    datasetId?: string;
    endTime?: number;
    header?: GetDownloadFileResponseBodyDataHeader[];
    longJobId?: string;
    pageNo?: number;
    pageSize?: number;
    previewSize?: number;
    querySetting?: GetDownloadFileResponseBodyDataQuerySetting;
    result?: {
        [key: string]: any;
    }[];
    resultDataInString?: string;
    status?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeDriverVersionResponseBodyData extends $tea.Model {
    argument?: string;
    configCheckRule?: string;
    containerConfig?: string;
    description?: string;
    driverConfig?: string;
    driverId?: string;
    driverVersion?: string;
    edgeVersion?: string;
    gmtCreateTimestamp?: number;
    gmtModifiedTimestamp?: number;
    sourceConfig?: string;
    versionState?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceResponseBodyData extends $tea.Model {
    bizEnable?: boolean;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    instanceId?: string;
    latestDeploymentStatus?: number;
    latestDeploymentType?: string;
    name?: string;
    roleArn?: string;
    roleAttachTime?: string;
    roleAttachTimestamp?: number;
    roleName?: string;
    spec?: number;
    tags?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList extends $tea.Model {
    gmtCompleted?: string;
    gmtCompletedTimestamp?: number;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    log?: string;
    operateType?: number;
    resourceId?: string;
    resourceName?: string;
    resourceType?: string;
    snapshotId?: string;
    stage?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponseBodyDataTaskList extends $tea.Model {
    gatewayId?: string;
    gmtCompleted?: string;
    gmtCompletedTimestamp?: number;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    resourceSnapshotList?: GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList[];
    stage?: number;
    status?: number;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceDeploymentResponseBodyData extends $tea.Model {
    deploymentId?: string;
    description?: string;
    gmtCompleted?: string;
    gmtCompletedTimestamp?: number;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    status?: number;
    taskList?: GetEdgeInstanceDeploymentResponseBodyDataTaskList[];
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingResponseBodyDataRouteContext extends $tea.Model {
    qos?: string;
    sourceApplicationName?: string;
    sourceFcFunctionName?: string;
    sourceFcServiceName?: string;
    targetApplicationName?: string;
    targetFcFunctionName?: string;
    targetFcServiceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEdgeInstanceMessageRoutingResponseBodyData extends $tea.Model {
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    name?: string;
    routeContext?: GetEdgeInstanceMessageRoutingResponseBodyDataRouteContext;
    sourceData?: string;
    sourceType?: string;
    targetData?: string;
    targetType?: string;
    topicFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGatewayBySubDeviceResponseBodyData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    firmwareVersion?: string;
    gmtActive?: string;
    gmtCreate?: string;
    gmtOnline?: string;
    ipAddress?: string;
    nodeType?: string;
    productKey?: string;
    productName?: string;
    status?: string;
    utcActive?: string;
    utcCreate?: string;
    utcOnline?: string;
    iotId?: string;
    region?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLoraNodesTaskResponseBodySuccessDevEuis extends $tea.Model {
    successDevEui?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetParserResponseBodyData extends $tea.Model {
    dataSourceId?: number;
    description?: string;
    name?: string;
    parserId?: number;
    script?: string;
    scriptDraft?: string;
    status?: string;
    utcCreated?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetParserDataSourceResponseBodyDataSource extends $tea.Model {
    createUserId?: number;
    dataSourceId?: number;
    description?: string;
    name?: string;
    utcCreated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleResponseBodyRuleInfo extends $tea.Model {
    createUserId?: number;
    created?: string;
    dataType?: string;
    id?: number;
    modified?: string;
    name?: string;
    productKey?: string;
    ruleDesc?: string;
    select?: string;
    shortTopic?: string;
    status?: string;
    topic?: string;
    topicType?: number;
    utcCreated?: string;
    utcModified?: string;
    where?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRuleActionResponseBodyRuleActionInfo extends $tea.Model {
    configuration?: string;
    errorActionFlag?: boolean;
    id?: number;
    ruleId?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneRuleResponseBodyData extends $tea.Model {
    gmtCreate?: number;
    gmtModified?: number;
    ruleContent?: string;
    ruleDescription?: string;
    ruleName?: string;
    ruleStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareSpeechModelAudioResponseBodyData extends $tea.Model {
    data?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoundCodeAudioResponseBodyData extends $tea.Model {
    items?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoundCodeScheduleResponseBodyData extends $tea.Model {
    description?: string;
    endDate?: string;
    endTime?: string;
    gmtCreate?: number;
    name?: string;
    openType?: string;
    scheduleCode?: string;
    startDate?: string;
    startTime?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechDeviceDetailResponseBodyData extends $tea.Model {
    availableSpace?: number;
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    speechListUpdateTime?: number;
    status?: string;
    totalSpace?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechLicenseDeviceStatisticsResponseBodyData extends $tea.Model {
    availableQuota?: number;
    expiredQuota?: number;
    expiringQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBodyDataItemsVoiceListItems extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBodyDataItemsVoiceList extends $tea.Model {
    items?: GetSpeechVoiceResponseBodyDataItemsVoiceListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBodyDataItems extends $tea.Model {
    label?: string;
    value?: string;
    voiceList?: GetSpeechVoiceResponseBodyDataItemsVoiceList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpeechVoiceResponseBodyData extends $tea.Model {
    items?: GetSpeechVoiceResponseBodyDataItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStudioAppTokenOpenResponseBodyData extends $tea.Model {
    bizId?: string;
    bizType?: string;
    isEnable?: string;
    token?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslResponseBodyData extends $tea.Model {
    tslStr?: string;
    tslUri?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingModelTslPublishedResponseBodyData extends $tea.Model {
    tslStr?: string;
    tslUri?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingScriptResponseBodyData extends $tea.Model {
    scriptType?: string;
    scriptUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponseBodyDataListDeviceInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponseBodyDataList extends $tea.Model {
    deviceInfo?: GetThingTopoResponseBodyDataListDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingTopoResponseBodyData extends $tea.Model {
    currentPage?: number;
    list?: GetThingTopoResponseBodyDataList;
    pageCount?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisQueryDeviceLocationRequestThingList extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisQueryDeviceLocationResponseBodyData extends $tea.Model {
    adcode?: number;
    city?: string;
    coordinateSystem?: number;
    country?: string;
    deviceName?: string;
    ip?: string;
    latitude?: number;
    longitude?: number;
    productKey?: string;
    province?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisSearchDeviceTraceResponseBodyDataPoints extends $tea.Model {
    locateTime?: number;
    location?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GisSearchDeviceTraceResponseBodyData extends $tea.Model {
    deviceName?: string;
    points?: GisSearchDeviceTraceResponseBodyDataPoints[];
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDTDataRequestItems extends $tea.Model {
    deviceName?: string;
    params?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ImportDeviceResponseBodyData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceRequestParam extends $tea.Model {
    listParamType?: string;
    listParamValue?: string[];
    paramName?: string;
    paramType?: string;
    paramValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponseBodyDataFieldNameList extends $tea.Model {
    fieldNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponseBodyDataResultList extends $tea.Model {
    resultList?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeDataAPIServiceResponseBodyData extends $tea.Model {
    apiSrn?: string;
    fieldNameList?: InvokeDataAPIServiceResponseBodyDataFieldNameList;
    pageNo?: number;
    pageSize?: number;
    resultList?: InvokeDataAPIServiceResponseBodyDataResultList;
    totalSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeThingServiceResponseBodyData extends $tea.Model {
    messageId?: string;
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataRequestCondition extends $tea.Model {
    betweenEnd?: string;
    betweenStart?: string;
    fieldName?: string;
    operate?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAnalyticsDataResponseBodyData extends $tea.Model {
    count?: number;
    hasNext?: boolean;
    pageNum?: number;
    pageSize?: number;
    resultJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDataSourceItemResponseBodyDataSourceItemsDataSourceItem extends $tea.Model {
    dataSourceItemId?: number;
    deviceName?: string;
    productKey?: string;
    scopeType?: string;
    topic?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDataSourceItemResponseBodyDataSourceItems extends $tea.Model {
    dataSourceItem?: ListDataSourceItemResponseBodyDataSourceItemsDataSourceItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDestinationResponseBodyDestinationsDestinations extends $tea.Model {
    configuration?: string;
    description?: string;
    destinationId?: number;
    isFailover?: boolean;
    name?: string;
    status?: string;
    type?: string;
    utcCreated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDestinationResponseBodyDestinations extends $tea.Model {
    destinations?: ListDestinationResponseBodyDestinationsDestinations[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs extends $tea.Model {
    targetInstanceId?: string;
    targetInstanceName?: string;
    targetRegion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs extends $tea.Model {
    targetInstanceConfigs?: ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyDataJobInfoItems extends $tea.Model {
    gmtCreate?: number;
    jobId?: string;
    productKey?: string;
    sourceInstanceId?: string;
    sourceInstanceName?: string;
    sourceRegion?: string;
    sourceUid?: string;
    status?: number;
    strategy?: number;
    targetInstanceConfigs?: ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs;
    targetUid?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyDataJobInfo extends $tea.Model {
    items?: ListDeviceDistributeJobResponseBodyDataJobInfoItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDeviceDistributeJobResponseBodyData extends $tea.Model {
    jobInfo?: ListDeviceDistributeJobResponseBodyDataJobInfo;
    nextToken?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponseBodyDataInfoItems extends $tea.Model {
    deviceName?: string;
    gmtCreate?: number;
    gmtModified?: number;
    productKey?: string;
    sourceInstanceId?: string;
    sourceInstanceName?: string;
    sourceRegion?: string;
    sourceUid?: string;
    targetAliyunId?: string;
    targetInstanceId?: string;
    targetInstanceName?: string;
    targetRegion?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponseBodyDataInfo extends $tea.Model {
    items?: ListDistributedDeviceResponseBodyDataInfoItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedDeviceResponseBodyData extends $tea.Model {
    info?: ListDistributedDeviceResponseBodyDataInfo;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponseBodyDataInfoItems extends $tea.Model {
    gmtCreate?: number;
    productKey?: string;
    sourceInstanceId?: string;
    sourceInstanceName?: string;
    sourceRegion?: string;
    sourceUid?: string;
    targetAliyunId?: string;
    targetInstanceId?: string;
    targetInstanceName?: string;
    targetRegion?: string;
    targetUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponseBodyDataInfo extends $tea.Model {
    items?: ListDistributedProductResponseBodyDataInfoItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDistributedProductResponseBodyData extends $tea.Model {
    info?: ListDistributedProductResponseBodyDataInfo;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobResponseBodyDataData extends $tea.Model {
    description?: string;
    jobId?: string;
    jobName?: string;
    scheduledTime?: number;
    status?: string;
    type?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJobResponseBodyData extends $tea.Model {
    data?: ListJobResponseBodyDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo extends $tea.Model {
    destVersion?: string;
    firmwareDesc?: string;
    firmwareId?: string;
    firmwareName?: string;
    firmwareSign?: string;
    firmwareSize?: number;
    moduleName?: string;
    productKey?: string;
    productName?: string;
    signMethod?: string;
    srcVersion?: string;
    status?: number;
    type?: number;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAFirmwareResponseBodyFirmwareInfo extends $tea.Model {
    simpleFirmwareInfo?: ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags extends $tea.Model {
    otaTagDTO?: ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo extends $tea.Model {
    firmwareId?: string;
    jobId?: string;
    jobStatus?: string;
    jobType?: string;
    productKey?: string;
    selectionType?: string;
    tags?: ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags;
    targetSelection?: string;
    utcCreate?: string;
    utcEndTime?: string;
    utcModified?: string;
    utcStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByDeviceResponseBodyData extends $tea.Model {
    simpleOTAJobInfo?: ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags extends $tea.Model {
    otaTagDTO?: ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo extends $tea.Model {
    firmwareId?: string;
    jobId?: string;
    jobStatus?: string;
    jobType?: string;
    productKey?: string;
    selectionType?: string;
    tags?: ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags;
    targetSelection?: string;
    utcCreate?: string;
    utcEndTime?: string;
    utcModified?: string;
    utcStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAJobByFirmwareResponseBodyData extends $tea.Model {
    simpleOTAJobInfo?: ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleByProductResponseBodyData extends $tea.Model {
    aliasName?: string;
    desc?: string;
    gmtCreate?: string;
    gmtModified?: string;
    moduleName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    moduleName?: string;
    moduleVersion?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAModuleVersionsByDeviceResponseBodyData extends $tea.Model {
    simpleOTAModuleInfo?: ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo extends $tea.Model {
    destVersion?: string;
    deviceName?: string;
    firmwareId?: string;
    iotId?: string;
    jobId?: string;
    productKey?: string;
    productName?: string;
    progress?: string;
    srcVersion?: string;
    taskDesc?: string;
    taskId?: string;
    taskStatus?: string;
    timeout?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTATaskByJobResponseBodyData extends $tea.Model {
    simpleOTATaskInfo?: ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceResponseBodyDataSimpleOTATaskInfo extends $tea.Model {
    destVersion?: string;
    deviceName?: string;
    firmwareId?: string;
    iotId?: string;
    jobId?: string;
    moduleName?: string;
    productKey?: string;
    productName?: string;
    srcVersion?: string;
    taskId?: string;
    taskStatus?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOTAUnfinishedTaskByDeviceResponseBodyData extends $tea.Model {
    simpleOTATaskInfo?: ListOTAUnfinishedTaskByDeviceResponseBodyDataSimpleOTATaskInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserResponseBodyDataParserList extends $tea.Model {
    description?: string;
    name?: string;
    parserId?: number;
    status?: string;
    utcCreated?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserResponseBodyData extends $tea.Model {
    parserList?: ListParserResponseBodyDataParserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDataSourceResponseBodyDataDataSource extends $tea.Model {
    dataSourceId?: number;
    description?: string;
    name?: string;
    utcCreated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDataSourceResponseBodyData extends $tea.Model {
    dataSource?: ListParserDataSourceResponseBodyDataDataSource[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDestinationResponseBodyDataDestinations extends $tea.Model {
    configuration?: string;
    destinationId?: number;
    isFailover?: boolean;
    name?: string;
    type?: string;
    utcCreated?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListParserDestinationResponseBodyData extends $tea.Model {
    destinations?: ListParserDestinationResponseBodyDataDestinations[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsRequestProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsResponseBodyProductInfosProductInfo extends $tea.Model {
    createTime?: number;
    description?: string;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductByTagsResponseBodyProductInfos extends $tea.Model {
    productInfo?: ListProductByTagsResponseBodyProductInfosProductInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsResponseBodyDataProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListProductTagsResponseBodyData extends $tea.Model {
    productTag?: ListProductTagsResponseBodyDataProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleResponseBodyDataRuleInfo extends $tea.Model {
    createUserId?: number;
    created?: string;
    dataType?: string;
    id?: number;
    modified?: string;
    name?: string;
    productKey?: string;
    ruleDesc?: string;
    select?: string;
    shortTopic?: string;
    status?: string;
    topic?: string;
    utcCreated?: string;
    utcModified?: string;
    where?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleResponseBodyData extends $tea.Model {
    ruleInfo?: ListRuleResponseBodyDataRuleInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsResponseBodyRuleActionListRuleActionInfo extends $tea.Model {
    configuration?: string;
    errorActionFlag?: boolean;
    id?: number;
    ruleId?: number;
    status?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRuleActionsResponseBodyRuleActionList extends $tea.Model {
    ruleActionInfo?: ListRuleActionsResponseBodyRuleActionListRuleActionInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskResponseBodyDataData extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    jobId?: string;
    jobName?: string;
    productKey?: string;
    progress?: string;
    status?: string;
    taskId?: string;
    utcModified?: string;
    utcQueueTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTaskResponseBodyData extends $tea.Model {
    data?: ListTaskResponseBodyDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionResponseBodyDataModelVersions extends $tea.Model {
    description?: string;
    gmtCreate?: number;
    modelVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingModelVersionResponseBodyData extends $tea.Model {
    modelVersions?: ListThingModelVersionResponseBodyDataModelVersions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListThingTemplatesResponseBodyData extends $tea.Model {
    categoryKey?: string;
    categoryName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAddThingTopoResponseBodyData extends $tea.Model {
    messageId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySharedSpeechOpenResponseBodyDataResultDataData extends $tea.Model {
    audioFormat?: string;
    bizCode?: string;
    code?: string;
    speechRate?: number;
    status?: number;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySharedSpeechOpenResponseBodyDataResultData extends $tea.Model {
    data?: PageQuerySharedSpeechOpenResponseBodyDataResultDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySharedSpeechOpenResponseBodyData extends $tea.Model {
    pageId?: number;
    pageSize?: number;
    resultData?: PageQuerySharedSpeechOpenResponseBodyDataResultData;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySpeechBroadcastHourResponseBodyDataResultDataData extends $tea.Model {
    code?: number;
    deviceName?: string;
    msg?: string;
    productKey?: string;
    shareTaskCode?: string;
    speechId?: string;
    speechs?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySpeechBroadcastHourResponseBodyDataResultData extends $tea.Model {
    data?: PageQuerySpeechBroadcastHourResponseBodyDataResultDataData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQuerySpeechBroadcastHourResponseBodyData extends $tea.Model {
    pageId?: number;
    pageSize?: number;
    pageToken?: string;
    resultData?: PageQuerySpeechBroadcastHourResponseBodyDataResultData;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrintByTemplateResponseBodyData extends $tea.Model {
    deviceErrorCode?: string;
    deviceErrorMessage?: string;
    id?: string;
    maxRetryCount?: number;
    retryCount?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PubRequestUserProp extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBodyDataInvalidDetailListInvalidDetailList extends $tea.Model {
    deviceName?: string;
    errorMsg?: string;
    nickName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBodyDataInvalidDetailList extends $tea.Model {
    invalidDetailList?: QueryBatchRegisterDeviceStatusResponseBodyDataInvalidDetailListInvalidDetailList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList extends $tea.Model {
    name?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBodyDataValidList extends $tea.Model {
    name?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchRegisterDeviceStatusResponseBodyData extends $tea.Model {
    invalidDetailList?: QueryBatchRegisterDeviceStatusResponseBodyDataInvalidDetailList;
    invalidList?: QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList;
    status?: string;
    validList?: QueryBatchRegisterDeviceStatusResponseBodyDataValidList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClientIdsResponseBodyDataDynamicRegClientIds extends $tea.Model {
    clientId?: string;
    createTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClientIdsResponseBodyData extends $tea.Model {
    dynamicRegClientIds?: QueryClientIdsResponseBodyDataDynamicRegClientIds[];
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupByGroupIdResponseBodyData extends $tea.Model {
    createTime?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListResponseBodyDataConsumerGroupDTO extends $tea.Model {
    createTime?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupListResponseBodyData extends $tea.Model {
    consumerGroupDTO?: QueryConsumerGroupListResponseBodyDataConsumerGroupDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo extends $tea.Model {
    accumulatedConsumeCountPerMinute?: number;
    clientId?: string;
    clientIpPort?: string;
    onlineTime?: number;
    realTimeConsumeCountPerMinute?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConsumerGroupStatusResponseBodyClientConnectionStatusList extends $tea.Model {
    consumerGroupClientConnectionInfo?: QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogResponseBodyDataLogList extends $tea.Model {
    code?: string;
    message?: string;
    pkDn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDetailSceneRuleLogResponseBodyData extends $tea.Model {
    currentPage?: number;
    logList?: QueryDetailSceneRuleLogResponseBodyDataLogList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBodyDataDeviceInfo extends $tea.Model {
    deviceId?: string;
    deviceName?: string;
    deviceSecret?: string;
    deviceStatus?: string;
    deviceType?: string;
    gmtCreate?: string;
    gmtModified?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBodyData extends $tea.Model {
    deviceInfo?: QueryDeviceResponseBodyDataDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBodyDataGroups extends $tea.Model {
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBodyDataOTAModules extends $tea.Model {
    firmwareVersion?: string;
    moduleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBodyDataTags extends $tea.Model {
    tagName?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceBySQLResponseBodyData extends $tea.Model {
    activeTime?: string;
    deviceName?: string;
    gmtCreate?: string;
    gmtModified?: string;
    groups?: QueryDeviceBySQLResponseBodyDataGroups[];
    iotId?: string;
    nickname?: string;
    OTAModules?: QueryDeviceBySQLResponseBodyDataOTAModules[];
    productKey?: string;
    status?: string;
    tags?: QueryDeviceBySQLResponseBodyDataTags[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    gmtCreate?: string;
    gmtModified?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    status?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByStatusResponseBodyData extends $tea.Model {
    simpleDeviceInfo?: QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsRequestTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceByTagsResponseBodyData extends $tea.Model {
    simpleDeviceInfo?: QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCertResponseBodyDeviceCertInfo extends $tea.Model {
    certSN?: string;
    certificate?: string;
    privateKey?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo extends $tea.Model {
    dataType?: string;
    identifier?: string;
    name?: string;
    time?: string;
    unit?: string;
    value?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponseBodyDataList extends $tea.Model {
    desiredPropertyInfo?: QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDesiredPropertyResponseBodyData extends $tea.Model {
    list?: QueryDeviceDesiredPropertyResponseBodyDataList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDetailResponseBodyData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    firmwareVersion?: string;
    gmtActive?: string;
    gmtCreate?: string;
    gmtOnline?: string;
    iotId?: string;
    ipAddress?: string;
    nickname?: string;
    nodeType?: number;
    owner?: boolean;
    productKey?: string;
    productName?: string;
    region?: string;
    status?: string;
    utcActive?: string;
    utcCreate?: string;
    utcOnline?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs extends $tea.Model {
    targetInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs extends $tea.Model {
    targetInstanceConfigs?: QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceDistributeJobResponseBodyData extends $tea.Model {
    gmtCreate?: number;
    jobId?: string;
    productKey?: string;
    sourceInstanceId?: string;
    sourceUid?: string;
    status?: number;
    strategy?: number;
    targetInstanceConfigs?: QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs;
    targetUid?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponseBodyDataListEventInfo extends $tea.Model {
    eventType?: string;
    identifier?: string;
    name?: string;
    outputData?: string;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponseBodyDataList extends $tea.Model {
    eventInfo?: QueryDeviceEventDataResponseBodyDataListEventInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceEventDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceEventDataResponseBodyDataList;
    nextTime?: number;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileResponseBodyData extends $tea.Model {
    downloadUrl?: string;
    fileId?: string;
    name?: string;
    size?: string;
    utcCreatedOn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListResponseBodyDataFileSummary extends $tea.Model {
    fileId?: string;
    name?: string;
    size?: string;
    utcCreatedOn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceFileListResponseBodyData extends $tea.Model {
    fileSummary?: QueryDeviceFileListResponseBodyDataFileSummary[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    groupType?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByDeviceResponseBodyGroupInfos extends $tea.Model {
    groupInfo?: QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsRequestTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsResponseBodyDataDeviceGroup extends $tea.Model {
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupByTagsResponseBodyData extends $tea.Model {
    deviceGroup?: QueryDeviceGroupByTagsResponseBodyDataDeviceGroup[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupInfoResponseBodyData extends $tea.Model {
    deviceActive?: number;
    deviceCount?: number;
    deviceOnline?: number;
    dynamicGroupExpression?: string;
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListResponseBodyDataGroupInfo extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    groupType?: string;
    utcCreate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupListResponseBodyData extends $tea.Model {
    groupInfo?: QueryDeviceGroupListResponseBodyDataGroupInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListResponseBodyDataGroupTagInfo extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceGroupTagListResponseBodyData extends $tea.Model {
    groupTagInfo?: QueryDeviceGroupTagListResponseBodyDataGroupTagInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceInfoResponseBodyData extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    iotId?: string;
    nickname?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByDeviceGroupResponseBodyData extends $tea.Model {
    simpleDeviceInfo?: QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponseBodyDataListEventInfo extends $tea.Model {
    eventType?: string;
    identifier?: string;
    name?: string;
    outputData?: string;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponseBodyDataList extends $tea.Model {
    eventInfo?: QueryDeviceOriginalEventDataResponseBodyDataListEventInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalEventDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceOriginalEventDataResponseBodyDataList;
    nextPageToken?: string;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo extends $tea.Model {
    time?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponseBodyDataList extends $tea.Model {
    propertyInfo?: QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceOriginalPropertyDataResponseBodyDataList;
    nextValid?: boolean;
    nextPageToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo extends $tea.Model {
    identifier?: string;
    time?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponseBodyDataList extends $tea.Model {
    propertyStatusDataInfo?: QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalPropertyStatusResponseBodyData extends $tea.Model {
    list?: QueryDeviceOriginalPropertyStatusResponseBodyDataList;
    nextPageToken?: string;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo extends $tea.Model {
    identifier?: string;
    inputData?: string;
    name?: string;
    outputData?: string;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponseBodyDataList extends $tea.Model {
    serviceInfo?: QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceOriginalServiceDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceOriginalServiceDataResponseBodyDataList;
    nextPageToken?: string;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo extends $tea.Model {
    time?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList extends $tea.Model {
    propertyInfo?: QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo extends $tea.Model {
    identifier?: string;
    list?: QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesDataResponseBodyPropertyDataInfos extends $tea.Model {
    propertyDataInfo?: QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponseBodyDataListPropertyInfo extends $tea.Model {
    time?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponseBodyDataList extends $tea.Model {
    propertyInfo?: QueryDevicePropertyDataResponseBodyDataListPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyDataResponseBodyData extends $tea.Model {
    list?: QueryDevicePropertyDataResponseBodyDataList;
    nextTime?: number;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo extends $tea.Model {
    dataType?: string;
    identifier?: string;
    name?: string;
    time?: string;
    unit?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponseBodyDataList extends $tea.Model {
    propertyStatusInfo?: QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertyStatusResponseBodyData extends $tea.Model {
    list?: QueryDevicePropertyStatusResponseBodyDataList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceProvisioningResponseBodyData extends $tea.Model {
    aliyunUid?: string;
    deviceName?: string;
    gmtCreate?: number;
    gmtModified?: number;
    productKey?: string;
    sourceIotInstanceId?: string;
    sourceRegion?: string;
    targetIotInstanceId?: string;
    targetRegion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponseBodyDataListServiceInfo extends $tea.Model {
    identifier?: string;
    inputData?: string;
    name?: string;
    outputData?: string;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponseBodyDataList extends $tea.Model {
    serviceInfo?: QueryDeviceServiceDataResponseBodyDataListServiceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceServiceDataResponseBodyData extends $tea.Model {
    list?: QueryDeviceServiceDataResponseBodyDataList;
    nextTime?: number;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSpeechResponseBodyDataListItems extends $tea.Model {
    audioFormat?: string;
    bizCode?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSpeechResponseBodyDataList extends $tea.Model {
    items?: QueryDeviceSpeechResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSpeechResponseBodyData extends $tea.Model {
    list?: QueryDeviceSpeechResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceStatisticsResponseBodyData extends $tea.Model {
    activeCount?: number;
    deviceCount?: number;
    onlineCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceSubTopicResponseBodyTopicList extends $tea.Model {
    timestamp?: number;
    topicName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceTunnelResponseBodyData extends $tea.Model {
    description?: string;
    deviceConnState?: string;
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    productName?: string;
    sourceConnState?: string;
    tunnelId?: string;
    tunnelState?: string;
    udi?: string;
    utcClosed?: string;
    utcCreated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataResponseBodyDataListPropertyInfo extends $tea.Model {
    time?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataResponseBodyDataList extends $tea.Model {
    propertyInfo?: QueryDevicesHotStorageDataResponseBodyDataListPropertyInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataResponseBodyData extends $tea.Model {
    list?: QueryDevicesHotStorageDataResponseBodyDataList;
    nextValid?: boolean;
    nextPageToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataStatusResponseBodyDataListPropertyStatusDataInfo extends $tea.Model {
    identifier?: string;
    time?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataStatusResponseBodyDataList extends $tea.Model {
    propertyStatusDataInfo?: QueryDevicesHotStorageDataStatusResponseBodyDataListPropertyStatusDataInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicesHotStorageDataStatusResponseBodyData extends $tea.Model {
    list?: QueryDevicesHotStorageDataStatusResponseBodyDataList;
    nextPageToken?: string;
    nextValid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDynamicGroupDevicesResponseBodyDataSimpleDeviceInfo extends $tea.Model {
    activeTime?: string;
    categoryKey?: string;
    deviceName?: string;
    iotId?: string;
    lastOnlineTime?: string;
    nickname?: string;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    status?: string;
    utcActiveTime?: string;
    utcLastOnlineTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDynamicGroupDevicesResponseBodyData extends $tea.Model {
    simpleDeviceInfo?: QueryDynamicGroupDevicesResponseBodyDataSimpleDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverResponseBodyDataDriverList extends $tea.Model {
    cpuArch?: string;
    driverId?: string;
    driverName?: string;
    driverProtocol?: string;
    gmtCreateTimestamp?: number;
    gmtModifiedTimestamp?: number;
    isApply?: boolean;
    isBuiltIn?: boolean;
    runtime?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverResponseBodyData extends $tea.Model {
    currentPage?: number;
    driverList?: QueryEdgeDriverResponseBodyDataDriverList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionResponseBodyDataDriverVersionList extends $tea.Model {
    argument?: string;
    configCheckRule?: string;
    containerConfig?: string;
    description?: string;
    driverConfig?: string;
    driverId?: string;
    driverVersion?: string;
    edgeVersion?: string;
    gmtCreateTimestamp?: number;
    gmtModifiedTimestamp?: number;
    sourceConfig?: string;
    versionState?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeDriverVersionResponseBodyData extends $tea.Model {
    currentPage?: number;
    driverVersionList?: QueryEdgeDriverVersionResponseBodyDataDriverVersionList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceResponseBodyDataInstanceList extends $tea.Model {
    bizEnable?: boolean;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    instanceId?: string;
    latestDeploymentStatus?: number;
    latestDeploymentType?: string;
    name?: string;
    roleArn?: string;
    roleAttachTime?: string;
    roleAttachTimestamp?: number;
    roleName?: string;
    spec?: number;
    tags?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceResponseBodyData extends $tea.Model {
    currentPage?: number;
    instanceList?: QueryEdgeInstanceResponseBodyDataInstanceList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig extends $tea.Model {
    configId?: string;
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList extends $tea.Model {
    config?: QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyDataChannelListChannel extends $tea.Model {
    channelId?: string;
    channelName?: string;
    configList?: QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyDataChannelList extends $tea.Model {
    channel?: QueryEdgeInstanceChannelResponseBodyDataChannelListChannel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceChannelResponseBodyData extends $tea.Model {
    channelList?: QueryEdgeInstanceChannelResponseBodyDataChannelList;
    currentPage?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceResponseBodyDataDeviceList extends $tea.Model {
    deviceName?: string;
    driverId?: string;
    iotId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceResponseBodyData extends $tea.Model {
    currentPage?: number;
    deviceList?: QueryEdgeInstanceDeviceResponseBodyDataDeviceList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList extends $tea.Model {
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDeviceByDriverResponseBodyData extends $tea.Model {
    currentPage?: number;
    deviceList?: QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverResponseBodyDataDriverList extends $tea.Model {
    driverId?: string;
    driverVersion?: string;
    gmtCreate?: string;
    gmtModified?: string;
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceDriverResponseBodyData extends $tea.Model {
    currentPage?: number;
    driverList?: QueryEdgeInstanceDriverResponseBodyDataDriverList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceGatewayResponseBodyGatewayList extends $tea.Model {
    deviceName?: string;
    edgeVersion?: string;
    iotId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList extends $tea.Model {
    deploymentId?: string;
    description?: string;
    gmtCompleted?: string;
    gmtCompletedTimestamp?: number;
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    status?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceHistoricDeploymentResponseBodyData extends $tea.Model {
    currentPage?: number;
    deploymentList?: QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRouteRouteContext extends $tea.Model {
    qos?: string;
    sourceApplicationName?: string;
    sourceFcFunctionName?: string;
    sourceFcServiceName?: string;
    targetApplicationName?: string;
    targetFcFunctionName?: string;
    targetFcServiceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRoute extends $tea.Model {
    gmtCreate?: string;
    gmtCreateTimestamp?: number;
    gmtModified?: string;
    gmtModifiedTimestamp?: number;
    name?: string;
    routeContext?: QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRouteRouteContext;
    routeId?: number;
    sourceData?: string;
    sourceType?: string;
    targetData?: string;
    targetType?: string;
    topicFilter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteList extends $tea.Model {
    messageRoute?: QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteListMessageRoute[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceMessageRoutingResponseBodyData extends $tea.Model {
    currentPage?: number;
    messageRouteList?: QueryEdgeInstanceMessageRoutingResponseBodyDataMessageRouteList;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleResponseBodyDataRuleList extends $tea.Model {
    gmtCreate?: number;
    isExisted?: number;
    ruleId?: string;
    ruleName?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEdgeInstanceSceneRuleResponseBodyData extends $tea.Model {
    currentPage?: number;
    pageSize?: number;
    ruleList?: QueryEdgeInstanceSceneRuleResponseBodyDataRuleList[];
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryImportedDeviceByApplyIdResponseBodyDeviceListDevice extends $tea.Model {
    deviceName?: string;
    deviceSecret?: string;
    productKey?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryImportedDeviceByApplyIdResponseBodyDeviceList extends $tea.Model {
    device?: QueryImportedDeviceByApplyIdResponseBodyDeviceListDevice[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataJobFile extends $tea.Model {
    fileUrl?: string;
    sign?: string;
    signMethod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataRolloutConfig extends $tea.Model {
    maximumPerMinute?: number;
    messageQoS?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices extends $tea.Model {
    deviceName?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataTargetConfigTargetDevices extends $tea.Model {
    targetDevices?: QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataTargetConfig extends $tea.Model {
    targetDevices?: QueryJobResponseBodyDataTargetConfigTargetDevices;
    targetGroup?: string;
    targetProduct?: string;
    targetType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyDataTimeoutConfig extends $tea.Model {
    inProgressTimeoutInMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobResponseBodyData extends $tea.Model {
    description?: string;
    jobDocument?: string;
    jobFile?: QueryJobResponseBodyDataJobFile;
    jobId?: string;
    jobName?: string;
    rolloutConfig?: QueryJobResponseBodyDataRolloutConfig;
    scheduledTime?: number;
    status?: string;
    targetConfig?: QueryJobResponseBodyDataTargetConfig;
    timeoutConfig?: QueryJobResponseBodyDataTimeoutConfig;
    type?: string;
    utcCreate?: string;
    utcModified?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatisticsResponseBodyData extends $tea.Model {
    cancelled?: number;
    failed?: number;
    inProgress?: number;
    queued?: number;
    rejected?: number;
    sent?: number;
    succeeded?: number;
    timeOut?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLicenseDeviceListResponseBodyDataDeviceListItem extends $tea.Model {
    deviceName?: string;
    expiryTime?: number;
    gmtCreate?: number;
    iotId?: string;
    licenseCode?: string;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLicenseDeviceListResponseBodyDataDeviceList extends $tea.Model {
    item?: QueryLicenseDeviceListResponseBodyDataDeviceListItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLicenseDeviceListResponseBodyData extends $tea.Model {
    deviceList?: QueryLicenseDeviceListResponseBodyDataDeviceList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission extends $tea.Model {
    classMode?: string;
    enabled?: boolean;
    joinPermissionId?: string;
    joinPermissionName?: string;
    joinPermissionType?: string;
    ownerAliyunPk?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLoRaJoinPermissionsResponseBodyJoinPermissions extends $tea.Model {
    joinPermission?: QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoResponseBodyMessageUserProperties extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageInfoResponseBodyMessage extends $tea.Model {
    generateTime?: number;
    messageContent?: string;
    topicFullName?: string;
    uniMsgId?: string;
    userProperties?: QueryMessageInfoResponseBodyMessageUserProperties[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareResponseBodyFirmwareInfoMultiFiles extends $tea.Model {
    fileMd5?: string;
    name?: string;
    signValue?: string;
    size?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAFirmwareResponseBodyFirmwareInfo extends $tea.Model {
    destVersion?: string;
    firmwareDesc?: string;
    firmwareId?: string;
    firmwareName?: string;
    firmwareSign?: string;
    firmwareSize?: number;
    firmwareUrl?: string;
    moduleName?: string;
    multiFiles?: QueryOTAFirmwareResponseBodyFirmwareInfoMultiFiles[];
    productKey?: string;
    productName?: string;
    signMethod?: string;
    srcVersion?: string;
    status?: number;
    type?: number;
    udi?: string;
    utcCreate?: string;
    utcModified?: string;
    verifyProgress?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBodyDataSrcVersions extends $tea.Model {
    srcVersion?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBodyDataTagsOtaTagDTO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBodyDataTags extends $tea.Model {
    otaTagDTO?: QueryOTAJobResponseBodyDataTagsOtaTagDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOTAJobResponseBodyData extends $tea.Model {
    destVersion?: string;
    downloadProtocol?: string;
    dynamicMode?: number;
    firmwareId?: string;
    grayPercent?: string;
    groupId?: string;
    groupName?: string;
    jobDesc?: string;
    jobId?: string;
    jobStatus?: string;
    jobType?: string;
    maximumPerMinute?: number;
    multiModuleMode?: boolean;
    name?: string;
    needConfirm?: boolean;
    needPush?: boolean;
    overwriteMode?: number;
    productKey?: string;
    retryCount?: number;
    retryInterval?: number;
    selectionType?: string;
    srcVersions?: QueryOTAJobResponseBodyDataSrcVersions;
    tags?: QueryOTAJobResponseBodyDataTags;
    targetSelection?: string;
    timeoutInMinutes?: number;
    utcCreate?: string;
    utcEndTime?: string;
    utcModified?: string;
    utcScheduleFinishTime?: string;
    utcScheduleTime?: string;
    utcStartTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo extends $tea.Model {
    deviceId?: string;
    deviceName?: string;
    deviceSecret?: string;
    iotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageByApplyIdResponseBodyApplyDeviceList extends $tea.Model {
    applyDeviceInfo?: QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductResponseBodyData extends $tea.Model {
    aliyunCommodityCode?: string;
    authType?: string;
    categoryKey?: string;
    categoryName?: string;
    dataFormat?: number;
    description?: string;
    deviceCount?: number;
    gmtCreate?: number;
    id2?: boolean;
    netType?: number;
    nodeType?: number;
    owner?: boolean;
    productKey?: string;
    productName?: string;
    productSecret?: string;
    productStatus?: string;
    protocolType?: string;
    validateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductCertInfoResponseBodyProductCertInfo extends $tea.Model {
    issueModel?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyDataListProductInfo extends $tea.Model {
    authType?: string;
    dataFormat?: number;
    description?: string;
    deviceCount?: number;
    gmtCreate?: number;
    nodeType?: number;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyDataList extends $tea.Model {
    productInfo?: QueryProductListResponseBodyDataListProductInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductListResponseBodyData extends $tea.Model {
    currentPage?: number;
    list?: QueryProductListResponseBodyDataList;
    pageCount?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicResponseBodyDataProductTopicInfo extends $tea.Model {
    codec?: string;
    desc?: string;
    enableProxySubscribe?: boolean;
    id?: string;
    operation?: string;
    productKey?: string;
    topicShortName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProductTopicResponseBodyData extends $tea.Model {
    productTopicInfo?: QueryProductTopicResponseBodyDataProductTopicInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectShareDeviceListResponseBodyDataDeviceListItems extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    sharable?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectShareDeviceListResponseBodyDataDeviceList extends $tea.Model {
    items?: QueryProjectShareDeviceListResponseBodyDataDeviceListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectShareDeviceListResponseBodyData extends $tea.Model {
    deviceList?: QueryProjectShareDeviceListResponseBodyDataDeviceList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleResponseBodyDataRuleList extends $tea.Model {
    gmtCreate?: number;
    gmtModified?: number;
    ruleDescription?: string;
    ruleId?: string;
    ruleName?: string;
    ruleStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneRuleResponseBodyData extends $tea.Model {
    currentPage?: number;
    pageSize?: number;
    ruleList?: QuerySceneRuleResponseBodyDataRuleList[];
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchedulePeriodListResponseBodyDataListItems extends $tea.Model {
    description?: string;
    endTime?: string;
    periodCode?: string;
    soundCodeContent?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchedulePeriodListResponseBodyDataList extends $tea.Model {
    items?: QuerySchedulePeriodListResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchedulePeriodListResponseBodyData extends $tea.Model {
    list?: QuerySchedulePeriodListResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShareTaskDeviceListResponseBodyDataDeviceListItems extends $tea.Model {
    deviceName?: string;
    gmtAdded?: number;
    iotId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShareTaskDeviceListResponseBodyDataDeviceList extends $tea.Model {
    items?: QueryShareTaskDeviceListResponseBodyDataDeviceListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShareTaskDeviceListResponseBodyData extends $tea.Model {
    deviceList?: QueryShareTaskDeviceListResponseBodyDataDeviceList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponseBodyDataListItemName extends $tea.Model {
    deviceCount?: number;
    gmtCreate?: number;
    gmtModified?: number;
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponseBodyDataList extends $tea.Model {
    itemName?: QuerySolutionDeviceGroupPageResponseBodyDataListItemName[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySolutionDeviceGroupPageResponseBodyData extends $tea.Model {
    list?: QuerySolutionDeviceGroupPageResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchFailedResultResponseBodyDataItems extends $tea.Model {
    errorMessage?: string;
    label?: string;
    resultCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchFailedResultResponseBodyData extends $tea.Model {
    items?: QuerySoundCodeLabelBatchFailedResultResponseBodyDataItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchListResponseBodyDataListItems extends $tea.Model {
    batchCode?: string;
    description?: string;
    gmtCreate?: number;
    status?: string;
    successNum?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchListResponseBodyDataList extends $tea.Model {
    items?: QuerySoundCodeLabelBatchListResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelBatchListResponseBodyData extends $tea.Model {
    list?: QuerySoundCodeLabelBatchListResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelListResponseBodyDataListItems extends $tea.Model {
    label?: string;
    soundCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelListResponseBodyDataList extends $tea.Model {
    items?: QuerySoundCodeLabelListResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeLabelListResponseBodyData extends $tea.Model {
    list?: QuerySoundCodeLabelListResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeListResponseBodyDataListItems extends $tea.Model {
    duration?: number;
    gmtCreate?: number;
    name?: string;
    openType?: string;
    soundCode?: string;
    soundCodeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeListResponseBodyDataList extends $tea.Model {
    items?: QuerySoundCodeListResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeListResponseBodyData extends $tea.Model {
    list?: QuerySoundCodeListResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeScheduleListResponseBodyDataListItems extends $tea.Model {
    description?: string;
    endDate?: string;
    endTime?: string;
    gmtCreate?: number;
    name?: string;
    openType?: string;
    scheduleCode?: string;
    startDate?: string;
    startTime?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeScheduleListResponseBodyDataList extends $tea.Model {
    items?: QuerySoundCodeScheduleListResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySoundCodeScheduleListResponseBodyData extends $tea.Model {
    list?: QuerySoundCodeScheduleListResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechResponseBodyDataSoundCodeConfig extends $tea.Model {
    additionalDuration?: number;
    soundCodeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechResponseBodyData extends $tea.Model {
    audioFormat?: string;
    bizCode?: string;
    enableSoundCode?: boolean;
    soundCodeConfig?: QuerySpeechResponseBodyDataSoundCodeConfig;
    speechCode?: string;
    speechRate?: number;
    speechType?: string;
    text?: string;
    voice?: string;
    volume?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechDeviceResponseBodyDataListItems extends $tea.Model {
    availableSpace?: number;
    deviceName?: string;
    iotId?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechDeviceResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechDeviceResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechDeviceResponseBodyData extends $tea.Model {
    list?: QuerySpeechDeviceResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseDeviceListResponseBodyDataDeviceListItem extends $tea.Model {
    deviceName?: string;
    deviceStatus?: string;
    expiryTime?: number;
    inSpecifiedGroup?: boolean;
    iotId?: string;
    licenseStatus?: string;
    productKey?: string;
    productName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseDeviceListResponseBodyDataDeviceList extends $tea.Model {
    item?: QuerySpeechLicenseDeviceListResponseBodyDataDeviceListItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechLicenseDeviceListResponseBodyData extends $tea.Model {
    deviceList?: QuerySpeechLicenseDeviceListResponseBodyDataDeviceList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyDataListItemsSpeechListItems extends $tea.Model {
    bizCode?: string;
    speechCode?: string;
    text?: string;
    voice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyDataListItemsSpeechList extends $tea.Model {
    items?: QuerySpeechListResponseBodyDataListItemsSpeechListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyDataListItems extends $tea.Model {
    audioFormat?: string;
    bizCode?: string;
    speechCode?: string;
    speechList?: QuerySpeechListResponseBodyDataListItemsSpeechList;
    speechType?: string;
    text?: string;
    voice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechListResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechListResponseBodyData extends $tea.Model {
    list?: QuerySpeechListResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponseBodyDataListItems extends $tea.Model {
    code?: string;
    createdTime?: number;
    deviceName?: string;
    expiredTime?: number;
    failDeviceNum?: number;
    groupId?: string;
    groupName?: string;
    iotId?: string;
    productKey?: string;
    pushMode?: string;
    runningDeviceNum?: number;
    speechNum?: number;
    speechStatus?: boolean;
    status?: string;
    successDeviceNum?: number;
    totalDeviceNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechPushJobResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobResponseBodyData extends $tea.Model {
    list?: QuerySpeechPushJobResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponseBodyDataListItems extends $tea.Model {
    deviceName?: string;
    errorCode?: string;
    errorMessage?: string;
    gmtModified?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechPushJobDeviceResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobDeviceResponseBodyData extends $tea.Model {
    list?: QuerySpeechPushJobDeviceResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechListItems extends $tea.Model {
    bizCode?: string;
    text?: string;
    voice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechList extends $tea.Model {
    items?: QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyDataListItems extends $tea.Model {
    bizCode?: string;
    speechList?: QuerySpeechPushJobSpeechResponseBodyDataListItemsSpeechList;
    speechType?: string;
    text?: string;
    voice?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyDataList extends $tea.Model {
    items?: QuerySpeechPushJobSpeechResponseBodyDataListItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpeechPushJobSpeechResponseBodyData extends $tea.Model {
    list?: QuerySpeechPushJobSpeechResponseBodyDataList;
    pageId?: number;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponseBodyDataListDomainInfo extends $tea.Model {
    appId?: string;
    gmtCreate?: string;
    gmtModified?: string;
    host?: string;
    id?: number;
    isBeian?: string;
    projectId?: string;
    protocol?: string;
    tenantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponseBodyDataList extends $tea.Model {
    domainInfo?: QueryStudioAppDomainListOpenResponseBodyDataListDomainInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppDomainListOpenResponseBodyData extends $tea.Model {
    list?: QueryStudioAppDomainListOpenResponseBodyDataList;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponseBodyDataListAppInfo extends $tea.Model {
    appId?: string;
    appKey?: string;
    appSecret?: string;
    description?: string;
    gmtCreate?: string;
    gmtModified?: string;
    gmtRelease?: string;
    name?: string;
    projectId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponseBodyDataList extends $tea.Model {
    appInfo?: QueryStudioAppListResponseBodyDataListAppInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppListResponseBodyData extends $tea.Model {
    list?: QueryStudioAppListResponseBodyDataList;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponseBodyDataListPageInfo extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    id?: number;
    isHidden?: number;
    isHome?: number;
    isLoginPage?: number;
    name?: string;
    pageId?: string;
    path?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponseBodyDataList extends $tea.Model {
    pageInfo?: QueryStudioAppPageListOpenResponseBodyDataListPageInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioAppPageListOpenResponseBodyData extends $tea.Model {
    list?: QueryStudioAppPageListOpenResponseBodyDataList;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponseBodyDataListProjectInfo extends $tea.Model {
    description?: string;
    gmtCreate?: number;
    gmtModified?: number;
    name?: string;
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponseBodyDataList extends $tea.Model {
    projectInfo?: QueryStudioProjectListResponseBodyDataListProjectInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStudioProjectListResponseBodyData extends $tea.Model {
    list?: QueryStudioProjectListResponseBodyDataList;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo extends $tea.Model {
    logTime?: number;
    result?: string;
    traceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponseBodyDataLogList extends $tea.Model {
    logInfo?: QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySummarySceneRuleLogResponseBodyData extends $tea.Model {
    currentPage?: number;
    logList?: QuerySummarySceneRuleLogResponseBodyDataLogList;
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupResponseBodyDataGroupInfo extends $tea.Model {
    groupDesc?: string;
    groupId?: string;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySuperDeviceGroupResponseBodyData extends $tea.Model {
    groupInfo?: QuerySuperDeviceGroupResponseBodyDataGroupInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBodyData extends $tea.Model {
    deviceName?: string;
    iotId?: string;
    jobId?: string;
    jobName?: string;
    message?: string;
    productKey?: string;
    progress?: string;
    status?: string;
    statusDetail?: string;
    taskId?: string;
    utcModified?: string;
    utcQueueTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelResponseBodyData extends $tea.Model {
    thingModelJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigResponseBodyData extends $tea.Model {
    configuration?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelExtendConfigPublishedResponseBodyData extends $tea.Model {
    configuration?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryThingModelPublishedResponseBodyData extends $tea.Model {
    thingModelJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicConfigResponseBodyDataTopicConfigInfo extends $tea.Model {
    codec?: string;
    description?: string;
    enableBroadcast?: boolean;
    enableProxySubscribe?: boolean;
    operation?: string;
    productKey?: string;
    topicFullName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicConfigResponseBodyData extends $tea.Model {
    topicConfigInfo?: QueryTopicConfigResponseBodyDataTopicConfigInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicReverseRouteTableResponseBodySrcTopics extends $tea.Model {
    topic?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTopicRouteTableResponseBodyDstTopics extends $tea.Model {
    topic?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVehicleDeviceResponseBodyDataJtProtocolDeviceData extends $tea.Model {
    authCode?: string;
    city?: string;
    deviceId?: string;
    deviceModel?: string;
    manufacturer?: string;
    province?: string;
    registerTime?: string;
    status?: string;
    vehicleColour?: string;
    vehicleNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVehicleDeviceResponseBodyData extends $tea.Model {
    createTime?: number;
    deviceName?: string;
    iotId?: string;
    jtProtocolDeviceData?: QueryVehicleDeviceResponseBodyDataJtProtocolDeviceData;
    modifiedTime?: number;
    productKey?: string;
    protocol?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReBindLicenseDeviceResponseBodyData extends $tea.Model {
    checkProgressId?: string;
    failSum?: number;
    progress?: number;
    resultCsvFile?: string;
    successSum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshStudioAppTokenOpenResponseBodyData extends $tea.Model {
    bizId?: string;
    bizType?: string;
    isEnable?: string;
    token?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponseBodyData extends $tea.Model {
    devEui?: string;
    deviceName?: string;
    deviceSecret?: string;
    iotId?: string;
    joinEui?: string;
    nickname?: string;
    productKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeviceDesiredPropertyResponseBodyData extends $tea.Model {
    messageId?: string;
    versions?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDevicePropertyResponseBodyData extends $tea.Model {
    messageId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEdgeInstanceDriverConfigsRequestConfigs extends $tea.Model {
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenResponseBodyDataTokenInfo extends $tea.Model {
    bizId?: string;
    bizType?: string;
    isEnable?: string;
    token?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetupStudioAppAuthModeOpenResponseBodyData extends $tea.Model {
    authMode?: number;
    tokenInfo?: SetupStudioAppAuthModeOpenResponseBodyDataTokenInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSpeechByCombinationResponseBodyData extends $tea.Model {
    detail?: string;
    deviceErrorCode?: string;
    deviceErrorMessage?: string;
    id?: string;
    maxRetryCount?: number;
    retryCount?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TestSpeechResponseBodyData extends $tea.Model {
    items?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEdgeInstanceChannelRequestConfigs extends $tea.Model {
    content?: string;
    format?: string;
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsRequestProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsResponseBodyInvalidProductTagsProductTag extends $tea.Model {
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProductTagsResponseBodyInvalidProductTags extends $tea.Model {
    productTag?: UpdateProductTagsResponseBodyInvalidProductTagsProductTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    addDataForApiSourceWithOptions(request: AddDataForApiSourceRequest, runtime: $Util.RuntimeOptions): Promise<AddDataForApiSourceResponse>;
    addDataForApiSource(request: AddDataForApiSourceRequest): Promise<AddDataForApiSourceResponse>;
    addShareTaskDeviceWithOptions(request: AddShareTaskDeviceRequest, runtime: $Util.RuntimeOptions): Promise<AddShareTaskDeviceResponse>;
    addShareTaskDevice(request: AddShareTaskDeviceRequest): Promise<AddShareTaskDeviceResponse>;
    asyncRRpcWithOptions(request: AsyncRRpcRequest, runtime: $Util.RuntimeOptions): Promise<AsyncRRpcResponse>;
    asyncRRpc(request: AsyncRRpcRequest): Promise<AsyncRRpcResponse>;
    attachDestinationWithOptions(request: AttachDestinationRequest, runtime: $Util.RuntimeOptions): Promise<AttachDestinationResponse>;
    attachDestination(request: AttachDestinationRequest): Promise<AttachDestinationResponse>;
    attachParserDataSourceWithOptions(request: AttachParserDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<AttachParserDataSourceResponse>;
    attachParserDataSource(request: AttachParserDataSourceRequest): Promise<AttachParserDataSourceResponse>;
    batchAddDataForApiSourceWithOptions(tmpReq: BatchAddDataForApiSourceRequest, runtime: $Util.RuntimeOptions): Promise<BatchAddDataForApiSourceResponse>;
    batchAddDataForApiSource(request: BatchAddDataForApiSourceRequest): Promise<BatchAddDataForApiSourceResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request BatchAddDeviceGroupRelationsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchAddDeviceGroupRelationsResponse
     */
    batchAddDeviceGroupRelationsWithOptions(request: BatchAddDeviceGroupRelationsRequest, runtime: $Util.RuntimeOptions): Promise<BatchAddDeviceGroupRelationsResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request BatchAddDeviceGroupRelationsRequest
      * @return BatchAddDeviceGroupRelationsResponse
     */
    batchAddDeviceGroupRelations(request: BatchAddDeviceGroupRelationsRequest): Promise<BatchAddDeviceGroupRelationsResponse>;
    /**
      * *   You can attach up to 10 sub-devices to a gateway in a single call.
      * *   The API operation caller must be the gateway owner.
      * *   If you specify a sub-device that is already attached to a gateway, the original gateway is replaced with the specified gateway.
      * *   If one of the specified sub-devices fails to establish a topological relationship with the gateway, the system rolls back, and all specified sub-devices fail to establish topological relationships with the gateway.
      * *   After you call this operation to establish topological relationships between sub-devices and the gateway, IoT Platform uses the `/sys/${productKey}/${deviceName}/thing/topo/change` topic to push information that includes the result of this operation to the gateway. For more information, see [Notify gateways of changes of topological relationships](~~89299~~).
      * ## QPS limits
      * You can call this API operation up to 10 times per second per Alibaba Cloud account.
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchAddThingTopoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchAddThingTopoResponse
     */
    batchAddThingTopoWithOptions(request: BatchAddThingTopoRequest, runtime: $Util.RuntimeOptions): Promise<BatchAddThingTopoResponse>;
    /**
      * *   You can attach up to 10 sub-devices to a gateway in a single call.
      * *   The API operation caller must be the gateway owner.
      * *   If you specify a sub-device that is already attached to a gateway, the original gateway is replaced with the specified gateway.
      * *   If one of the specified sub-devices fails to establish a topological relationship with the gateway, the system rolls back, and all specified sub-devices fail to establish topological relationships with the gateway.
      * *   After you call this operation to establish topological relationships between sub-devices and the gateway, IoT Platform uses the `/sys/${productKey}/${deviceName}/thing/topo/change` topic to push information that includes the result of this operation to the gateway. For more information, see [Notify gateways of changes of topological relationships](~~89299~~).
      * ## QPS limits
      * You can call this API operation up to 10 times per second per Alibaba Cloud account.
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchAddThingTopoRequest
      * @return BatchAddThingTopoResponse
     */
    batchAddThingTopo(request: BatchAddThingTopoRequest): Promise<BatchAddThingTopoResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information about common request parameters, see [Common parameters](~~30561~~).
      *
      * @param request BatchBindDeviceToEdgeInstanceWithDriverRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchBindDeviceToEdgeInstanceWithDriverResponse
     */
    batchBindDeviceToEdgeInstanceWithDriverWithOptions(request: BatchBindDeviceToEdgeInstanceWithDriverRequest, runtime: $Util.RuntimeOptions): Promise<BatchBindDeviceToEdgeInstanceWithDriverResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information about common request parameters, see [Common parameters](~~30561~~).
      *
      * @param request BatchBindDeviceToEdgeInstanceWithDriverRequest
      * @return BatchBindDeviceToEdgeInstanceWithDriverResponse
     */
    batchBindDeviceToEdgeInstanceWithDriver(request: BatchBindDeviceToEdgeInstanceWithDriverRequest): Promise<BatchBindDeviceToEdgeInstanceWithDriverResponse>;
    batchBindDevicesIntoProjectWithOptions(request: BatchBindDevicesIntoProjectRequest, runtime: $Util.RuntimeOptions): Promise<BatchBindDevicesIntoProjectResponse>;
    batchBindDevicesIntoProject(request: BatchBindDevicesIntoProjectRequest): Promise<BatchBindDevicesIntoProjectResponse>;
    batchBindProductsIntoProjectWithOptions(request: BatchBindProductsIntoProjectRequest, runtime: $Util.RuntimeOptions): Promise<BatchBindProductsIntoProjectResponse>;
    batchBindProductsIntoProject(request: BatchBindProductsIntoProjectRequest): Promise<BatchBindProductsIntoProjectResponse>;
    /**
      * You can call this operation with the **BatchRegisterDeviceWithApplyId** operation to register multiple devices under a product. Each device carries a unique DeviceName.
      * Procedure:
      * 1\\. Call this operation to specify the DeviceNames of the devices to be registered. IoT Platform returns an application ID (**ApplyId**). A successful response indicates that the request to verify the DeviceNames is submitted. The actual registration process is asynchronously implemented and takes some minutes.
      * 2\\. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the name setting result.
      * 3\\. Call the [BatchRegisterDeviceWithApplyId](~~69514~~) operation to register multiple devices.
      * 4\\. Optional. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to view the registration result.
      * 5\\. Call the [QueryPageByApplyId](~~69518~~) operation to query the information about the registered devices.
      * ## Limits
      * - You can specify a maximum of 10,000 DeviceNames in a single call.
      * - Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchCheckDeviceNamesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchCheckDeviceNamesResponse
     */
    batchCheckDeviceNamesWithOptions(request: BatchCheckDeviceNamesRequest, runtime: $Util.RuntimeOptions): Promise<BatchCheckDeviceNamesResponse>;
    /**
      * You can call this operation with the **BatchRegisterDeviceWithApplyId** operation to register multiple devices under a product. Each device carries a unique DeviceName.
      * Procedure:
      * 1\\. Call this operation to specify the DeviceNames of the devices to be registered. IoT Platform returns an application ID (**ApplyId**). A successful response indicates that the request to verify the DeviceNames is submitted. The actual registration process is asynchronously implemented and takes some minutes.
      * 2\\. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the name setting result.
      * 3\\. Call the [BatchRegisterDeviceWithApplyId](~~69514~~) operation to register multiple devices.
      * 4\\. Optional. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to view the registration result.
      * 5\\. Call the [QueryPageByApplyId](~~69518~~) operation to query the information about the registered devices.
      * ## Limits
      * - You can specify a maximum of 10,000 DeviceNames in a single call.
      * - Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchCheckDeviceNamesRequest
      * @return BatchCheckDeviceNamesResponse
     */
    batchCheckDeviceNames(request: BatchCheckDeviceNamesRequest): Promise<BatchCheckDeviceNamesResponse>;
    batchCheckImportDeviceWithOptions(request: BatchCheckImportDeviceRequest, runtime: $Util.RuntimeOptions): Promise<BatchCheckImportDeviceResponse>;
    batchCheckImportDevice(request: BatchCheckImportDeviceRequest): Promise<BatchCheckImportDeviceResponse>;
    /**
      * The invalid device models returned if the call fails.
      *
      * @param request BatchCheckVehicleDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchCheckVehicleDeviceResponse
     */
    batchCheckVehicleDeviceWithOptions(request: BatchCheckVehicleDeviceRequest, runtime: $Util.RuntimeOptions): Promise<BatchCheckVehicleDeviceResponse>;
    /**
      * The invalid device models returned if the call fails.
      *
      * @param request BatchCheckVehicleDeviceRequest
      * @return BatchCheckVehicleDeviceResponse
     */
    batchCheckVehicleDevice(request: BatchCheckVehicleDeviceRequest): Promise<BatchCheckVehicleDeviceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchClearEdgeInstanceDeviceConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchClearEdgeInstanceDeviceConfigResponse
     */
    batchClearEdgeInstanceDeviceConfigWithOptions(request: BatchClearEdgeInstanceDeviceConfigRequest, runtime: $Util.RuntimeOptions): Promise<BatchClearEdgeInstanceDeviceConfigResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchClearEdgeInstanceDeviceConfigRequest
      * @return BatchClearEdgeInstanceDeviceConfigResponse
     */
    batchClearEdgeInstanceDeviceConfig(request: BatchClearEdgeInstanceDeviceConfigRequest): Promise<BatchClearEdgeInstanceDeviceConfigResponse>;
    batchCreateSoundCodeLabelWithOptions(request: BatchCreateSoundCodeLabelRequest, runtime: $Util.RuntimeOptions): Promise<BatchCreateSoundCodeLabelResponse>;
    batchCreateSoundCodeLabel(request: BatchCreateSoundCodeLabelRequest): Promise<BatchCreateSoundCodeLabelResponse>;
    batchCreateSoundCodeLabelWithLabelsWithOptions(request: BatchCreateSoundCodeLabelWithLabelsRequest, runtime: $Util.RuntimeOptions): Promise<BatchCreateSoundCodeLabelWithLabelsResponse>;
    batchCreateSoundCodeLabelWithLabels(request: BatchCreateSoundCodeLabelWithLabelsRequest): Promise<BatchCreateSoundCodeLabelWithLabelsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchDeleteDeviceGroupRelationsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchDeleteDeviceGroupRelationsResponse
     */
    batchDeleteDeviceGroupRelationsWithOptions(request: BatchDeleteDeviceGroupRelationsRequest, runtime: $Util.RuntimeOptions): Promise<BatchDeleteDeviceGroupRelationsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchDeleteDeviceGroupRelationsRequest
      * @return BatchDeleteDeviceGroupRelationsResponse
     */
    batchDeleteDeviceGroupRelations(request: BatchDeleteDeviceGroupRelationsRequest): Promise<BatchDeleteDeviceGroupRelationsResponse>;
    batchDeleteEdgeInstanceChannelWithOptions(request: BatchDeleteEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<BatchDeleteEdgeInstanceChannelResponse>;
    batchDeleteEdgeInstanceChannel(request: BatchDeleteEdgeInstanceChannelRequest): Promise<BatchDeleteEdgeInstanceChannelResponse>;
    batchGetDeviceBindStatusWithOptions(request: BatchGetDeviceBindStatusRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetDeviceBindStatusResponse>;
    batchGetDeviceBindStatus(request: BatchGetDeviceBindStatusRequest): Promise<BatchGetDeviceBindStatusResponse>;
    /**
      * When you call this operation, you can perform the following operations:
      * *   You can specify a value for the **ProductKey** parameter and multiple values for the **DeviceName** parameter to query the status of devices that belong to a product.
      * *   You can specify multiple values for the **IotId** parameter to query the status of devices that belong to different products.****
      * >You can query the status of up to 50 devices in a call.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchGetDeviceStateRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchGetDeviceStateResponse
     */
    batchGetDeviceStateWithOptions(request: BatchGetDeviceStateRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetDeviceStateResponse>;
    /**
      * When you call this operation, you can perform the following operations:
      * *   You can specify a value for the **ProductKey** parameter and multiple values for the **DeviceName** parameter to query the status of devices that belong to a product.
      * *   You can specify multiple values for the **IotId** parameter to query the status of devices that belong to different products.****
      * >You can query the status of up to 50 devices in a call.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchGetDeviceStateRequest
      * @return BatchGetDeviceStateResponse
     */
    batchGetDeviceState(request: BatchGetDeviceStateRequest): Promise<BatchGetDeviceStateResponse>;
    /**
      * ## Limits
      * A single Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users share the quota of the Alibaba Cloud account.
      *
      * @param request BatchGetEdgeDriverRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchGetEdgeDriverResponse
     */
    batchGetEdgeDriverWithOptions(request: BatchGetEdgeDriverRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeDriverResponse>;
    /**
      * ## Limits
      * A single Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users share the quota of the Alibaba Cloud account.
      *
      * @param request BatchGetEdgeDriverRequest
      * @return BatchGetEdgeDriverResponse
     */
    batchGetEdgeDriver(request: BatchGetEdgeDriverRequest): Promise<BatchGetEdgeDriverResponse>;
    batchGetEdgeInstanceChannelWithOptions(request: BatchGetEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceChannelResponse>;
    batchGetEdgeInstanceChannel(request: BatchGetEdgeInstanceChannelRequest): Promise<BatchGetEdgeInstanceChannelResponse>;
    batchGetEdgeInstanceDeviceChannelWithOptions(request: BatchGetEdgeInstanceDeviceChannelRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceDeviceChannelResponse>;
    batchGetEdgeInstanceDeviceChannel(request: BatchGetEdgeInstanceDeviceChannelRequest): Promise<BatchGetEdgeInstanceDeviceChannelResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchGetEdgeInstanceDeviceConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchGetEdgeInstanceDeviceConfigResponse
     */
    batchGetEdgeInstanceDeviceConfigWithOptions(request: BatchGetEdgeInstanceDeviceConfigRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceDeviceConfigResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchGetEdgeInstanceDeviceConfigRequest
      * @return BatchGetEdgeInstanceDeviceConfigResponse
     */
    batchGetEdgeInstanceDeviceConfig(request: BatchGetEdgeInstanceDeviceConfigRequest): Promise<BatchGetEdgeInstanceDeviceConfigResponse>;
    batchGetEdgeInstanceDeviceDriverWithOptions(request: BatchGetEdgeInstanceDeviceDriverRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceDeviceDriverResponse>;
    batchGetEdgeInstanceDeviceDriver(request: BatchGetEdgeInstanceDeviceDriverRequest): Promise<BatchGetEdgeInstanceDeviceDriverResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchGetEdgeInstanceDriverConfigsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchGetEdgeInstanceDriverConfigsResponse
     */
    batchGetEdgeInstanceDriverConfigsWithOptions(request: BatchGetEdgeInstanceDriverConfigsRequest, runtime: $Util.RuntimeOptions): Promise<BatchGetEdgeInstanceDriverConfigsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchGetEdgeInstanceDriverConfigsRequest
      * @return BatchGetEdgeInstanceDriverConfigsResponse
     */
    batchGetEdgeInstanceDriverConfigs(request: BatchGetEdgeInstanceDriverConfigsRequest): Promise<BatchGetEdgeInstanceDriverConfigsResponse>;
    batchGrayMigrationDeviceWithOptions(request: BatchGrayMigrationDeviceRequest, runtime: $Util.RuntimeOptions): Promise<BatchGrayMigrationDeviceResponse>;
    batchGrayMigrationDevice(request: BatchGrayMigrationDeviceRequest): Promise<BatchGrayMigrationDeviceResponse>;
    batchImportDeviceWithOptions(request: BatchImportDeviceRequest, runtime: $Util.RuntimeOptions): Promise<BatchImportDeviceResponse>;
    batchImportDevice(request: BatchImportDeviceRequest): Promise<BatchImportDeviceResponse>;
    /**
      * Indicates whether the call was successful. Valid values:
      * - **true**: The call was successful.
      * - **false**: The call failed.
      *
      * @param request BatchImportVehicleDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchImportVehicleDeviceResponse
     */
    batchImportVehicleDeviceWithOptions(request: BatchImportVehicleDeviceRequest, runtime: $Util.RuntimeOptions): Promise<BatchImportVehicleDeviceResponse>;
    /**
      * Indicates whether the call was successful. Valid values:
      * - **true**: The call was successful.
      * - **false**: The call failed.
      *
      * @param request BatchImportVehicleDeviceRequest
      * @return BatchImportVehicleDeviceResponse
     */
    batchImportVehicleDevice(request: BatchImportVehicleDeviceRequest): Promise<BatchImportVehicleDeviceResponse>;
    /**
      * *   You can call this operation to publish a message to a maximum of 100 devices of a product at a time.
      * *   The BatchPub operation cannot be used to send commands of setting properties or calling services. If you need to set properties, use the [SetDeviceProperty](~~69579~~) or [SetDevicesProperty](~~96243~~) operation. If you need to call services, use the [InvokeThingService](~~69584~~) or [InvokeThingsService](~~96242~~) operation.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchPubRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchPubResponse
     */
    batchPubWithOptions(request: BatchPubRequest, runtime: $Util.RuntimeOptions): Promise<BatchPubResponse>;
    /**
      * *   You can call this operation to publish a message to a maximum of 100 devices of a product at a time.
      * *   The BatchPub operation cannot be used to send commands of setting properties or calling services. If you need to set properties, use the [SetDeviceProperty](~~69579~~) or [SetDevicesProperty](~~96243~~) operation. If you need to call services, use the [InvokeThingService](~~69584~~) or [InvokeThingsService](~~96242~~) operation.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchPubRequest
      * @return BatchPubResponse
     */
    batchPub(request: BatchPubRequest): Promise<BatchPubResponse>;
    /**
      * ## Limits
      * *   You can query a maximum of 100 devices in a single call.
      * *   You can query the details of devices that belong only to the current Alibaba Cloud account. If you specify a device that does not belong to the current account, an error message is returned.
      * *   If you specify multiple devices and some devices do not exist, only the details of existing devices are returned.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchQueryDeviceDetailRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchQueryDeviceDetailResponse
     */
    batchQueryDeviceDetailWithOptions(request: BatchQueryDeviceDetailRequest, runtime: $Util.RuntimeOptions): Promise<BatchQueryDeviceDetailResponse>;
    /**
      * ## Limits
      * *   You can query a maximum of 100 devices in a single call.
      * *   You can query the details of devices that belong only to the current Alibaba Cloud account. If you specify a device that does not belong to the current account, an error message is returned.
      * *   If you specify multiple devices and some devices do not exist, only the details of existing devices are returned.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchQueryDeviceDetailRequest
      * @return BatchQueryDeviceDetailResponse
     */
    batchQueryDeviceDetail(request: BatchQueryDeviceDetailRequest): Promise<BatchQueryDeviceDetailResponse>;
    /**
      * You can use one of the following methods to register multiple devices:
      * *   If you want to generate random DeviceNames, call the BatchRegisterDevice operation.
      *     Perform the following steps to register devices and view the result:
      *     1\\. Call the BatchRegisterDevice operation to register multiple devices. A successful response indicates that the registration request is submitted. The actual registration process is asynchronously implemented and takes some minutes.
      *     2\\. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the device registration result.
      *     3\\. Call the [QueryPageByApplyId](~~69518~~) operation to view the details of registered devices. The details include the DeviceName, DeviceSecret, and IotId parameters.
      * *   If you want to specify custom DeviceNames, call the BatchRegisterDeviceWithApplyId operation. For more information, see [BatchRegisterDeviceWithApplyId](~~69514~~).
      * ## Limits
      * - You can create a maximum of 10,000 devices in a single call.
      * - Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchRegisterDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchRegisterDeviceResponse
     */
    batchRegisterDeviceWithOptions(request: BatchRegisterDeviceRequest, runtime: $Util.RuntimeOptions): Promise<BatchRegisterDeviceResponse>;
    /**
      * You can use one of the following methods to register multiple devices:
      * *   If you want to generate random DeviceNames, call the BatchRegisterDevice operation.
      *     Perform the following steps to register devices and view the result:
      *     1\\. Call the BatchRegisterDevice operation to register multiple devices. A successful response indicates that the registration request is submitted. The actual registration process is asynchronously implemented and takes some minutes.
      *     2\\. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the device registration result.
      *     3\\. Call the [QueryPageByApplyId](~~69518~~) operation to view the details of registered devices. The details include the DeviceName, DeviceSecret, and IotId parameters.
      * *   If you want to specify custom DeviceNames, call the BatchRegisterDeviceWithApplyId operation. For more information, see [BatchRegisterDeviceWithApplyId](~~69514~~).
      * ## Limits
      * - You can create a maximum of 10,000 devices in a single call.
      * - Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchRegisterDeviceRequest
      * @return BatchRegisterDeviceResponse
     */
    batchRegisterDevice(request: BatchRegisterDeviceRequest): Promise<BatchRegisterDeviceResponse>;
    /**
      * You can use one of the following methods to register multiple devices at a time:
      * *   Call the [BatchRegisterDevice](~~69473~~) operation to generate random DeviceNames.
      * *   Call the BatchRegisterDeviceWithApplyId and **BatchCheckDeviceNames** operations to specify custom DeviceNames. Procedure:
      *     Call the [BatchCheckDeviceNames](~~69482~~) operation and specify the names of devices that you want to register. If the DeviceNames are valid, IoT Platform returns an application ID that is specified by the **ApplyId** parameter. You can query the DeviceName setting results, device registration results, and device details by **ApplyId**.
      *     Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the name setting result.
      *     Call the BatchRegisterDeviceWithApplyId operation to register multiple devices. The successful result that is returned by this operation indicates that only the batch registration request is submitted. In actual scenarios, the registration process takes a few minutes.
      *     Optional. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the device registration result.
      *     Call the [QueryPageByApplyId](~~69518~~) operation to view the details of devices that are registered in batches.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request BatchRegisterDeviceWithApplyIdRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchRegisterDeviceWithApplyIdResponse
     */
    batchRegisterDeviceWithApplyIdWithOptions(request: BatchRegisterDeviceWithApplyIdRequest, runtime: $Util.RuntimeOptions): Promise<BatchRegisterDeviceWithApplyIdResponse>;
    /**
      * You can use one of the following methods to register multiple devices at a time:
      * *   Call the [BatchRegisterDevice](~~69473~~) operation to generate random DeviceNames.
      * *   Call the BatchRegisterDeviceWithApplyId and **BatchCheckDeviceNames** operations to specify custom DeviceNames. Procedure:
      *     Call the [BatchCheckDeviceNames](~~69482~~) operation and specify the names of devices that you want to register. If the DeviceNames are valid, IoT Platform returns an application ID that is specified by the **ApplyId** parameter. You can query the DeviceName setting results, device registration results, and device details by **ApplyId**.
      *     Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the name setting result.
      *     Call the BatchRegisterDeviceWithApplyId operation to register multiple devices. The successful result that is returned by this operation indicates that only the batch registration request is submitted. In actual scenarios, the registration process takes a few minutes.
      *     Optional. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the device registration result.
      *     Call the [QueryPageByApplyId](~~69518~~) operation to view the details of devices that are registered in batches.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request BatchRegisterDeviceWithApplyIdRequest
      * @return BatchRegisterDeviceWithApplyIdResponse
     */
    batchRegisterDeviceWithApplyId(request: BatchRegisterDeviceWithApplyIdRequest): Promise<BatchRegisterDeviceWithApplyIdResponse>;
    batchSetEdgeInstanceDeviceChannelWithOptions(request: BatchSetEdgeInstanceDeviceChannelRequest, runtime: $Util.RuntimeOptions): Promise<BatchSetEdgeInstanceDeviceChannelResponse>;
    batchSetEdgeInstanceDeviceChannel(request: BatchSetEdgeInstanceDeviceChannelRequest): Promise<BatchSetEdgeInstanceDeviceChannelResponse>;
    batchSetEdgeInstanceDeviceConfigWithOptions(request: BatchSetEdgeInstanceDeviceConfigRequest, runtime: $Util.RuntimeOptions): Promise<BatchSetEdgeInstanceDeviceConfigResponse>;
    batchSetEdgeInstanceDeviceConfig(request: BatchSetEdgeInstanceDeviceConfigRequest): Promise<BatchSetEdgeInstanceDeviceConfigResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchUnbindDeviceFromEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchUnbindDeviceFromEdgeInstanceResponse
     */
    batchUnbindDeviceFromEdgeInstanceWithOptions(request: BatchUnbindDeviceFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BatchUnbindDeviceFromEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchUnbindDeviceFromEdgeInstanceRequest
      * @return BatchUnbindDeviceFromEdgeInstanceResponse
     */
    batchUnbindDeviceFromEdgeInstance(request: BatchUnbindDeviceFromEdgeInstanceRequest): Promise<BatchUnbindDeviceFromEdgeInstanceResponse>;
    batchUnbindProjectDevicesWithOptions(request: BatchUnbindProjectDevicesRequest, runtime: $Util.RuntimeOptions): Promise<BatchUnbindProjectDevicesResponse>;
    batchUnbindProjectDevices(request: BatchUnbindProjectDevicesRequest): Promise<BatchUnbindProjectDevicesResponse>;
    batchUnbindProjectProductsWithOptions(request: BatchUnbindProjectProductsRequest, runtime: $Util.RuntimeOptions): Promise<BatchUnbindProjectProductsResponse>;
    batchUnbindProjectProducts(request: BatchUnbindProjectProductsRequest): Promise<BatchUnbindProjectProductsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchUpdateDeviceNicknameRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BatchUpdateDeviceNicknameResponse
     */
    batchUpdateDeviceNicknameWithOptions(request: BatchUpdateDeviceNicknameRequest, runtime: $Util.RuntimeOptions): Promise<BatchUpdateDeviceNicknameResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BatchUpdateDeviceNicknameRequest
      * @return BatchUpdateDeviceNicknameResponse
     */
    batchUpdateDeviceNickname(request: BatchUpdateDeviceNicknameRequest): Promise<BatchUpdateDeviceNicknameResponse>;
    bindApplicationToEdgeInstanceWithOptions(request: BindApplicationToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindApplicationToEdgeInstanceResponse>;
    bindApplicationToEdgeInstance(request: BindApplicationToEdgeInstanceRequest): Promise<BindApplicationToEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BindDriverToEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BindDriverToEdgeInstanceResponse
     */
    bindDriverToEdgeInstanceWithOptions(request: BindDriverToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindDriverToEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BindDriverToEdgeInstanceRequest
      * @return BindDriverToEdgeInstanceResponse
     */
    bindDriverToEdgeInstance(request: BindDriverToEdgeInstanceRequest): Promise<BindDriverToEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BindGatewayToEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return BindGatewayToEdgeInstanceResponse
     */
    bindGatewayToEdgeInstanceWithOptions(request: BindGatewayToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindGatewayToEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request BindGatewayToEdgeInstanceRequest
      * @return BindGatewayToEdgeInstanceResponse
     */
    bindGatewayToEdgeInstance(request: BindGatewayToEdgeInstanceRequest): Promise<BindGatewayToEdgeInstanceResponse>;
    bindLicenseDeviceWithOptions(request: BindLicenseDeviceRequest, runtime: $Util.RuntimeOptions): Promise<BindLicenseDeviceResponse>;
    bindLicenseDevice(request: BindLicenseDeviceRequest): Promise<BindLicenseDeviceResponse>;
    bindLicenseProductWithOptions(request: BindLicenseProductRequest, runtime: $Util.RuntimeOptions): Promise<BindLicenseProductResponse>;
    bindLicenseProduct(request: BindLicenseProductRequest): Promise<BindLicenseProductResponse>;
    bindRoleToEdgeInstanceWithOptions(request: BindRoleToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindRoleToEdgeInstanceResponse>;
    bindRoleToEdgeInstance(request: BindRoleToEdgeInstanceRequest): Promise<BindRoleToEdgeInstanceResponse>;
    bindSceneRuleToEdgeInstanceWithOptions(request: BindSceneRuleToEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<BindSceneRuleToEdgeInstanceResponse>;
    bindSceneRuleToEdgeInstance(request: BindSceneRuleToEdgeInstanceRequest): Promise<BindSceneRuleToEdgeInstanceResponse>;
    cancelJobWithOptions(request: CancelJobRequest, runtime: $Util.RuntimeOptions): Promise<CancelJobResponse>;
    cancelJob(request: CancelJobRequest): Promise<CancelJobResponse>;
    /**
      * ## Limits
      * *   You can cancel only the dynamic update policy that is attached to a dynamic update batch. This operation is not applicable to static update batches.
      *     After the operation is successful, the **JobStatus** parameter is set to CANCELED.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CancelOTAStrategyByJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CancelOTAStrategyByJobResponse
     */
    cancelOTAStrategyByJobWithOptions(request: CancelOTAStrategyByJobRequest, runtime: $Util.RuntimeOptions): Promise<CancelOTAStrategyByJobResponse>;
    /**
      * ## Limits
      * *   You can cancel only the dynamic update policy that is attached to a dynamic update batch. This operation is not applicable to static update batches.
      *     After the operation is successful, the **JobStatus** parameter is set to CANCELED.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CancelOTAStrategyByJobRequest
      * @return CancelOTAStrategyByJobResponse
     */
    cancelOTAStrategyByJob(request: CancelOTAStrategyByJobRequest): Promise<CancelOTAStrategyByJobResponse>;
    /**
      * This operation can cancel device update tasks only when the tasks are in the to be pushed, pushed, or in upgrade state.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request CancelOTATaskByDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CancelOTATaskByDeviceResponse
     */
    cancelOTATaskByDeviceWithOptions(request: CancelOTATaskByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<CancelOTATaskByDeviceResponse>;
    /**
      * This operation can cancel device update tasks only when the tasks are in the to be pushed, pushed, or in upgrade state.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request CancelOTATaskByDeviceRequest
      * @return CancelOTATaskByDeviceResponse
     */
    cancelOTATaskByDevice(request: CancelOTATaskByDeviceRequest): Promise<CancelOTATaskByDeviceResponse>;
    /**
      * When you call this operation, make sure that you specify at least one of the CancelScheduledTask, CancelQueuedTask, CancelInProgressTask, CancelNotifiedTask, and CancelUnconfirmedTask parameters. Otherwise, the request will fail.
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CancelOTATaskByJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CancelOTATaskByJobResponse
     */
    cancelOTATaskByJobWithOptions(request: CancelOTATaskByJobRequest, runtime: $Util.RuntimeOptions): Promise<CancelOTATaskByJobResponse>;
    /**
      * When you call this operation, make sure that you specify at least one of the CancelScheduledTask, CancelQueuedTask, CancelInProgressTask, CancelNotifiedTask, and CancelUnconfirmedTask parameters. Otherwise, the request will fail.
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CancelOTATaskByJobRequest
      * @return CancelOTATaskByJobResponse
     */
    cancelOTATaskByJob(request: CancelOTATaskByJobRequest): Promise<CancelOTATaskByJobResponse>;
    /**
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CancelReleaseProductRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CancelReleaseProductResponse
     */
    cancelReleaseProductWithOptions(request: CancelReleaseProductRequest, runtime: $Util.RuntimeOptions): Promise<CancelReleaseProductResponse>;
    /**
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CancelReleaseProductRequest
      * @return CancelReleaseProductResponse
     */
    cancelReleaseProduct(request: CancelReleaseProductRequest): Promise<CancelReleaseProductResponse>;
    checkBindLicenseDeviceProgressWithOptions(request: CheckBindLicenseDeviceProgressRequest, runtime: $Util.RuntimeOptions): Promise<CheckBindLicenseDeviceProgressResponse>;
    checkBindLicenseDeviceProgress(request: CheckBindLicenseDeviceProgressRequest): Promise<CheckBindLicenseDeviceProgressResponse>;
    /**
      * *   Each time you call this operation, you must specify the identifiers of properties whose desired values you want to delete for the **Identifies** parameter. If you do not configure the **Identifies** parameter, the call fails.
      * *   You can specify up to 10 property identifiers for the **Identifies** parameter in a single call.
      * *   After you call this operation to deletes the desired values of properties of a device, you can call the [QueryDeviceDesiredProperty](~~107566~~) operation to query the desired values of properties of the device. In this case, the QueryDeviceDesiredProperty operation returns the **Identifier** parameter instead of the **Value** parameter.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ClearDeviceDesiredPropertyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ClearDeviceDesiredPropertyResponse
     */
    clearDeviceDesiredPropertyWithOptions(request: ClearDeviceDesiredPropertyRequest, runtime: $Util.RuntimeOptions): Promise<ClearDeviceDesiredPropertyResponse>;
    /**
      * *   Each time you call this operation, you must specify the identifiers of properties whose desired values you want to delete for the **Identifies** parameter. If you do not configure the **Identifies** parameter, the call fails.
      * *   You can specify up to 10 property identifiers for the **Identifies** parameter in a single call.
      * *   After you call this operation to deletes the desired values of properties of a device, you can call the [QueryDeviceDesiredProperty](~~107566~~) operation to query the desired values of properties of the device. In this case, the QueryDeviceDesiredProperty operation returns the **Identifier** parameter instead of the **Value** parameter.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ClearDeviceDesiredPropertyRequest
      * @return ClearDeviceDesiredPropertyResponse
     */
    clearDeviceDesiredProperty(request: ClearDeviceDesiredPropertyRequest): Promise<ClearDeviceDesiredPropertyResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ClearEdgeInstanceDriverConfigsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ClearEdgeInstanceDriverConfigsResponse
     */
    clearEdgeInstanceDriverConfigsWithOptions(request: ClearEdgeInstanceDriverConfigsRequest, runtime: $Util.RuntimeOptions): Promise<ClearEdgeInstanceDriverConfigsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ClearEdgeInstanceDriverConfigsRequest
      * @return ClearEdgeInstanceDriverConfigsResponse
     */
    clearEdgeInstanceDriverConfigs(request: ClearEdgeInstanceDriverConfigsRequest): Promise<ClearEdgeInstanceDriverConfigsResponse>;
    closeDeviceTunnelWithOptions(request: CloseDeviceTunnelRequest, runtime: $Util.RuntimeOptions): Promise<CloseDeviceTunnelResponse>;
    closeDeviceTunnel(request: CloseDeviceTunnelRequest): Promise<CloseDeviceTunnelResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CloseEdgeInstanceDeploymentRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CloseEdgeInstanceDeploymentResponse
     */
    closeEdgeInstanceDeploymentWithOptions(request: CloseEdgeInstanceDeploymentRequest, runtime: $Util.RuntimeOptions): Promise<CloseEdgeInstanceDeploymentResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CloseEdgeInstanceDeploymentRequest
      * @return CloseEdgeInstanceDeploymentResponse
     */
    closeEdgeInstanceDeployment(request: CloseEdgeInstanceDeploymentRequest): Promise<CloseEdgeInstanceDeploymentResponse>;
    /**
      * To confirm update tasks in a scheduled update batch, you must call this operation within the specified time range.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ConfirmOTATaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ConfirmOTATaskResponse
     */
    confirmOTATaskWithOptions(request: ConfirmOTATaskRequest, runtime: $Util.RuntimeOptions): Promise<ConfirmOTATaskResponse>;
    /**
      * To confirm update tasks in a scheduled update batch, you must call this operation within the specified time range.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ConfirmOTATaskRequest
      * @return ConfirmOTATaskResponse
     */
    confirmOTATask(request: ConfirmOTATaskRequest): Promise<ConfirmOTATaskResponse>;
    /**
      * *   If a destination product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you can copy a TSL model.
      * *   The categories of the source product and destination product must be the same. The product category is indicated by the **CategoryKey** parameter. You can call the [QueryProduct](~~69272~~) operation and view the **CategoryKey** parameter of a product in the returned result.
      * *   You must specify the version of the TSL model that you want to copy by using the **SourceModelVersion** parameter in the request. Otherwise, the CopyThingModel operation fails.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to five queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CopyThingModelRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CopyThingModelResponse
     */
    copyThingModelWithOptions(request: CopyThingModelRequest, runtime: $Util.RuntimeOptions): Promise<CopyThingModelResponse>;
    /**
      * *   If a destination product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you can copy a TSL model.
      * *   The categories of the source product and destination product must be the same. The product category is indicated by the **CategoryKey** parameter. You can call the [QueryProduct](~~69272~~) operation and view the **CategoryKey** parameter of a product in the returned result.
      * *   You must specify the version of the TSL model that you want to copy by using the **SourceModelVersion** parameter in the request. Otherwise, the CopyThingModel operation fails.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to five queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CopyThingModelRequest
      * @return CopyThingModelResponse
     */
    copyThingModel(request: CopyThingModelRequest): Promise<CopyThingModelResponse>;
    countSpeechBroadcastHourWithOptions(request: CountSpeechBroadcastHourRequest, runtime: $Util.RuntimeOptions): Promise<CountSpeechBroadcastHourResponse>;
    countSpeechBroadcastHour(request: CountSpeechBroadcastHourRequest): Promise<CountSpeechBroadcastHourResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateConsumerGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateConsumerGroupResponse
     */
    createConsumerGroupWithOptions(request: CreateConsumerGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateConsumerGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateConsumerGroupRequest
      * @return CreateConsumerGroupResponse
     */
    createConsumerGroup(request: CreateConsumerGroupRequest): Promise<CreateConsumerGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateConsumerGroupSubscribeRelationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateConsumerGroupSubscribeRelationResponse
     */
    createConsumerGroupSubscribeRelationWithOptions(request: CreateConsumerGroupSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<CreateConsumerGroupSubscribeRelationResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateConsumerGroupSubscribeRelationRequest
      * @return CreateConsumerGroupSubscribeRelationResponse
     */
    createConsumerGroupSubscribeRelation(request: CreateConsumerGroupSubscribeRelationRequest): Promise<CreateConsumerGroupSubscribeRelationResponse>;
    createDataAPIServiceWithOptions(request: CreateDataAPIServiceRequest, runtime: $Util.RuntimeOptions): Promise<CreateDataAPIServiceResponse>;
    createDataAPIService(request: CreateDataAPIServiceRequest): Promise<CreateDataAPIServiceResponse>;
    createDataSourceItemWithOptions(request: CreateDataSourceItemRequest, runtime: $Util.RuntimeOptions): Promise<CreateDataSourceItemResponse>;
    createDataSourceItem(request: CreateDataSourceItemRequest): Promise<CreateDataSourceItemResponse>;
    createDestinationWithOptions(request: CreateDestinationRequest, runtime: $Util.RuntimeOptions): Promise<CreateDestinationResponse>;
    createDestination(request: CreateDestinationRequest): Promise<CreateDestinationResponse>;
    /**
      * To distribute devices, perform the following steps:
      * 1\\. Asynchronously call this operation to create a device distribution task and obtain the **JobId** parameter.
      * 2\\. Use **JobId** as a request parameter and repeatedly call the [QueryDeviceDistributeJob](~~199536~~) operation to obtain the **Status** parameter.
      * >  You must control the frequency of calls based on the QPS limit of the QueryDeviceDistributeJob operation.
      * If either of the following values is returned for the **Status** parameter, the distribution task ends:
      * *   **2**: The device distribution task is completed. This return value does not indicate that the devices are distributed. To obtain the distribution result of each device, perform the next step.
      * *   **3**: The distribution is unexpectedly interrupted. After you process the error, you can initiate a device distribution task again.
      * 3\\. Use **JobId** that is returned in Step 1 as a request parameter and call the [QueryDeviceDistributeDetail](~~199533~~) operation to obtain the **File** parameter. The File parameter indicates the file URL of the distribution result.
      * >  The file URL is valid for 10 minutes.
      * 4\\. Obtain the distribution result by using the file URL. The **Code** parameter indicates whether a device is distributed. If the value of the **Code** parameter is 200, the device is distributed.
      * If the distribution fails, you can perform the preceding steps to distribute devices again.
      * ## Limits
      * - This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * - You cannot call this operation to distribute devices across accounts.
      * - Each Alibaba Cloud account can create a maximum of 10 tasks to distribute products or devices. For more information about how to create a product distribution task, see [CreateProductDistributeJob](/help/en/iot-platform/latest/createproductdistributejob).
      * - Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateDeviceDistributeJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDeviceDistributeJobResponse
     */
    createDeviceDistributeJobWithOptions(request: CreateDeviceDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateDeviceDistributeJobResponse>;
    /**
      * To distribute devices, perform the following steps:
      * 1\\. Asynchronously call this operation to create a device distribution task and obtain the **JobId** parameter.
      * 2\\. Use **JobId** as a request parameter and repeatedly call the [QueryDeviceDistributeJob](~~199536~~) operation to obtain the **Status** parameter.
      * >  You must control the frequency of calls based on the QPS limit of the QueryDeviceDistributeJob operation.
      * If either of the following values is returned for the **Status** parameter, the distribution task ends:
      * *   **2**: The device distribution task is completed. This return value does not indicate that the devices are distributed. To obtain the distribution result of each device, perform the next step.
      * *   **3**: The distribution is unexpectedly interrupted. After you process the error, you can initiate a device distribution task again.
      * 3\\. Use **JobId** that is returned in Step 1 as a request parameter and call the [QueryDeviceDistributeDetail](~~199533~~) operation to obtain the **File** parameter. The File parameter indicates the file URL of the distribution result.
      * >  The file URL is valid for 10 minutes.
      * 4\\. Obtain the distribution result by using the file URL. The **Code** parameter indicates whether a device is distributed. If the value of the **Code** parameter is 200, the device is distributed.
      * If the distribution fails, you can perform the preceding steps to distribute devices again.
      * ## Limits
      * - This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * - You cannot call this operation to distribute devices across accounts.
      * - Each Alibaba Cloud account can create a maximum of 10 tasks to distribute products or devices. For more information about how to create a product distribution task, see [CreateProductDistributeJob](/help/en/iot-platform/latest/createproductdistributejob).
      * - Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateDeviceDistributeJobRequest
      * @return CreateDeviceDistributeJobResponse
     */
    createDeviceDistributeJob(request: CreateDeviceDistributeJobRequest): Promise<CreateDeviceDistributeJobResponse>;
    createDeviceDynamicGroupWithOptions(request: CreateDeviceDynamicGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateDeviceDynamicGroupResponse>;
    createDeviceDynamicGroup(request: CreateDeviceDynamicGroupRequest): Promise<CreateDeviceDynamicGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateDeviceGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateDeviceGroupResponse
     */
    createDeviceGroupWithOptions(request: CreateDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<CreateDeviceGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateDeviceGroupRequest
      * @return CreateDeviceGroupResponse
     */
    createDeviceGroup(request: CreateDeviceGroupRequest): Promise<CreateDeviceGroupResponse>;
    createDeviceTunnelWithOptions(request: CreateDeviceTunnelRequest, runtime: $Util.RuntimeOptions): Promise<CreateDeviceTunnelResponse>;
    createDeviceTunnel(request: CreateDeviceTunnelRequest): Promise<CreateDeviceTunnelResponse>;
    createDownloadDataJobWithOptions(tmpReq: CreateDownloadDataJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateDownloadDataJobResponse>;
    createDownloadDataJob(request: CreateDownloadDataJobRequest): Promise<CreateDownloadDataJobResponse>;
    /**
      * ## Limits
      * A single Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users share the quota of the Alibaba Cloud account.
      *
      * @param request CreateEdgeDriverRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateEdgeDriverResponse
     */
    createEdgeDriverWithOptions(request: CreateEdgeDriverRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeDriverResponse>;
    /**
      * ## Limits
      * A single Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users share the quota of the Alibaba Cloud account.
      *
      * @param request CreateEdgeDriverRequest
      * @return CreateEdgeDriverResponse
     */
    createEdgeDriver(request: CreateEdgeDriverRequest): Promise<CreateEdgeDriverResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateEdgeDriverVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateEdgeDriverVersionResponse
     */
    createEdgeDriverVersionWithOptions(request: CreateEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeDriverVersionResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateEdgeDriverVersionRequest
      * @return CreateEdgeDriverVersionResponse
     */
    createEdgeDriverVersion(request: CreateEdgeDriverVersionRequest): Promise<CreateEdgeDriverVersionResponse>;
    /**
      * ## Limits
      * A single Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users share the quota of the Alibaba Cloud account.
      *
      * @param request CreateEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateEdgeInstanceResponse
     */
    createEdgeInstanceWithOptions(request: CreateEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeInstanceResponse>;
    /**
      * ## Limits
      * A single Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users share the quota of the Alibaba Cloud account.
      *
      * @param request CreateEdgeInstanceRequest
      * @return CreateEdgeInstanceResponse
     */
    createEdgeInstance(request: CreateEdgeInstanceRequest): Promise<CreateEdgeInstanceResponse>;
    createEdgeInstanceChannelWithOptions(request: CreateEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeInstanceChannelResponse>;
    createEdgeInstanceChannel(request: CreateEdgeInstanceChannelRequest): Promise<CreateEdgeInstanceChannelResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateEdgeInstanceDeploymentRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateEdgeInstanceDeploymentResponse
     */
    createEdgeInstanceDeploymentWithOptions(request: CreateEdgeInstanceDeploymentRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeInstanceDeploymentResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateEdgeInstanceDeploymentRequest
      * @return CreateEdgeInstanceDeploymentResponse
     */
    createEdgeInstanceDeployment(request: CreateEdgeInstanceDeploymentRequest): Promise<CreateEdgeInstanceDeploymentResponse>;
    createEdgeInstanceMessageRoutingWithOptions(request: CreateEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeInstanceMessageRoutingResponse>;
    createEdgeInstanceMessageRouting(request: CreateEdgeInstanceMessageRoutingRequest): Promise<CreateEdgeInstanceMessageRoutingResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateEdgeOssPreSignedAddressRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateEdgeOssPreSignedAddressResponse
     */
    createEdgeOssPreSignedAddressWithOptions(request: CreateEdgeOssPreSignedAddressRequest, runtime: $Util.RuntimeOptions): Promise<CreateEdgeOssPreSignedAddressResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateEdgeOssPreSignedAddressRequest
      * @return CreateEdgeOssPreSignedAddressResponse
     */
    createEdgeOssPreSignedAddress(request: CreateEdgeOssPreSignedAddressRequest): Promise<CreateEdgeOssPreSignedAddressResponse>;
    createJobWithOptions(tmpReq: CreateJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateJobResponse>;
    createJob(request: CreateJobRequest): Promise<CreateJobResponse>;
    createLoRaNodesTaskWithOptions(request: CreateLoRaNodesTaskRequest, runtime: $Util.RuntimeOptions): Promise<CreateLoRaNodesTaskResponse>;
    createLoRaNodesTask(request: CreateLoRaNodesTaskRequest): Promise<CreateLoRaNodesTaskResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common parameters](~~30561~~).
      *
      * @param request CreateOTADynamicUpgradeJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateOTADynamicUpgradeJobResponse
     */
    createOTADynamicUpgradeJobWithOptions(request: CreateOTADynamicUpgradeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTADynamicUpgradeJobResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common parameters](~~30561~~).
      *
      * @param request CreateOTADynamicUpgradeJobRequest
      * @return CreateOTADynamicUpgradeJobResponse
     */
    createOTADynamicUpgradeJob(request: CreateOTADynamicUpgradeJobRequest): Promise<CreateOTADynamicUpgradeJobResponse>;
    /**
      * Before you call this operation to create an OTA update package, you must call the [GenerateOTAUploadURL](~~147310~~) operation to generate the information about the files that you want to add to the OTA update package and call the Object Storage Service (OSS) [PostObject](~~31988~~) operation to upload the files.
      * ## Limits
      * Each Alibaba Cloud account can have up to 500 update packages.
      * ## QPS limits
      * You can call this API operation up to 10 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateOTAFirmwareRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateOTAFirmwareResponse
     */
    createOTAFirmwareWithOptions(request: CreateOTAFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTAFirmwareResponse>;
    /**
      * Before you call this operation to create an OTA update package, you must call the [GenerateOTAUploadURL](~~147310~~) operation to generate the information about the files that you want to add to the OTA update package and call the Object Storage Service (OSS) [PostObject](~~31988~~) operation to upload the files.
      * ## Limits
      * Each Alibaba Cloud account can have up to 500 update packages.
      * ## QPS limits
      * You can call this API operation up to 10 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateOTAFirmwareRequest
      * @return CreateOTAFirmwareResponse
     */
    createOTAFirmware(request: CreateOTAFirmwareRequest): Promise<CreateOTAFirmwareResponse>;
    /**
      * ## Limits
      * OTA modules are the updatable units of the devices that belong to the same product. The default module indicates the entire firmware of a device. You can call this operation to create a custom OTA module.
      * *   You can create a maximum of 10 custom OTA modules for each product.
      * *   After an OTA module is created, you cannot modify its name. You can call the [UpdateOTAModule](~~186061~~) operation to modify the module alias and description.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateOTAModuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateOTAModuleResponse
     */
    createOTAModuleWithOptions(request: CreateOTAModuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTAModuleResponse>;
    /**
      * ## Limits
      * OTA modules are the updatable units of the devices that belong to the same product. The default module indicates the entire firmware of a device. You can call this operation to create a custom OTA module.
      * *   You can create a maximum of 10 custom OTA modules for each product.
      * *   After an OTA module is created, you cannot modify its name. You can call the [UpdateOTAModule](~~186061~~) operation to modify the module alias and description.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateOTAModuleRequest
      * @return CreateOTAModuleResponse
     */
    createOTAModule(request: CreateOTAModuleRequest): Promise<CreateOTAModuleResponse>;
    /**
      * *   If you specify that an update package does not need to be verified when you call the [CreateOTAFirmware](~~147311~~) operation, you must make sure that the update package is verified before you call the CreateOTAStaticUpgradeJob operation to create an update batch. For more information about how to create a task to verify an update package, see [CreateOTAVerifyJob](~~147480~~).
      * *   You can initiate update tasks for a maximum of 200 devices in each call. If you use a device list file, you can initiate update tasks for a maximum of 1,000,000 devices. However, you must call the [GenerateDeviceNameListURL](~~186062~~) operation to generate a URL for the device list file. Then, you can perform the operations as prompted to upload the device list file.
      * *   When you initiate update tasks for multiple devices, the devices that already have the destination firmware versions are skipped.
      * *   Each device can be in the pending or updating status only in one update task. If you initiate another update task for a device that is in the pending or updating status, the update task fails.
      * *   You can create multiple static update batches by using a single update package.
      * *   Downloading update packages through the MQTT protocol is supported only in the China (Shanghai) region.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateOTAStaticUpgradeJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateOTAStaticUpgradeJobResponse
     */
    createOTAStaticUpgradeJobWithOptions(request: CreateOTAStaticUpgradeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTAStaticUpgradeJobResponse>;
    /**
      * *   If you specify that an update package does not need to be verified when you call the [CreateOTAFirmware](~~147311~~) operation, you must make sure that the update package is verified before you call the CreateOTAStaticUpgradeJob operation to create an update batch. For more information about how to create a task to verify an update package, see [CreateOTAVerifyJob](~~147480~~).
      * *   You can initiate update tasks for a maximum of 200 devices in each call. If you use a device list file, you can initiate update tasks for a maximum of 1,000,000 devices. However, you must call the [GenerateDeviceNameListURL](~~186062~~) operation to generate a URL for the device list file. Then, you can perform the operations as prompted to upload the device list file.
      * *   When you initiate update tasks for multiple devices, the devices that already have the destination firmware versions are skipped.
      * *   Each device can be in the pending or updating status only in one update task. If you initiate another update task for a device that is in the pending or updating status, the update task fails.
      * *   You can create multiple static update batches by using a single update package.
      * *   Downloading update packages through the MQTT protocol is supported only in the China (Shanghai) region.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateOTAStaticUpgradeJobRequest
      * @return CreateOTAStaticUpgradeJobResponse
     */
    createOTAStaticUpgradeJob(request: CreateOTAStaticUpgradeJobRequest): Promise<CreateOTAStaticUpgradeJobResponse>;
    /**
      * *   You must verify an update package before you push the package to devices for a batch update. Only verified update packages can be used to update devices in batches. You can call the [QueryOTAFirmware](~~147461~~) operation to view the status of a verification task.
      * *   You cannot initiate a verification task for an update package that is being verified or has been verified.
      * *   You can specify a maximum of 10 devices for a verification task.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateOTAVerifyJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateOTAVerifyJobResponse
     */
    createOTAVerifyJobWithOptions(request: CreateOTAVerifyJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateOTAVerifyJobResponse>;
    /**
      * *   You must verify an update package before you push the package to devices for a batch update. Only verified update packages can be used to update devices in batches. You can call the [QueryOTAFirmware](~~147461~~) operation to view the status of a verification task.
      * *   You cannot initiate a verification task for an update package that is being verified or has been verified.
      * *   You can specify a maximum of 10 devices for a verification task.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateOTAVerifyJobRequest
      * @return CreateOTAVerifyJobResponse
     */
    createOTAVerifyJob(request: CreateOTAVerifyJobRequest): Promise<CreateOTAVerifyJobResponse>;
    createParserWithOptions(request: CreateParserRequest, runtime: $Util.RuntimeOptions): Promise<CreateParserResponse>;
    createParser(request: CreateParserRequest): Promise<CreateParserResponse>;
    createParserDataSourceWithOptions(request: CreateParserDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<CreateParserDataSourceResponse>;
    createParserDataSource(request: CreateParserDataSourceRequest): Promise<CreateParserDataSourceResponse>;
    /**
      * If a Thing Specification Language (TSL) model is required to create a product, you must set the **AliyunCommodityCode** parameter to iothub_senior and configure the **DataFormat** parameter.******** For more information, see the "**Request parameters**" section of this topic.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateProductRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateProductResponse
     */
    createProductWithOptions(request: CreateProductRequest, runtime: $Util.RuntimeOptions): Promise<CreateProductResponse>;
    /**
      * If a Thing Specification Language (TSL) model is required to create a product, you must set the **AliyunCommodityCode** parameter to iothub_senior and configure the **DataFormat** parameter.******** For more information, see the "**Request parameters**" section of this topic.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateProductRequest
      * @return CreateProductResponse
     */
    createProduct(request: CreateProductRequest): Promise<CreateProductResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   You cannot call this operation to distribute a product across accounts.
      * *   A product distribution task does not distribute the devices under the product.
      * *   After a product is distributed, you cannot modify its TSL model and scripts.
      * *   Each Alibaba Cloud account can create a maximum of 10 tasks to distribute products or devices. For more information about how to create a device distribution task, see [CreateDeviceDistributeJob](~~199390~~).
      * *   Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
      *     **
      *     **Note** RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateProductDistributeJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateProductDistributeJobResponse
     */
    createProductDistributeJobWithOptions(request: CreateProductDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<CreateProductDistributeJobResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   You cannot call this operation to distribute a product across accounts.
      * *   A product distribution task does not distribute the devices under the product.
      * *   After a product is distributed, you cannot modify its TSL model and scripts.
      * *   Each Alibaba Cloud account can create a maximum of 10 tasks to distribute products or devices. For more information about how to create a device distribution task, see [CreateDeviceDistributeJob](~~199390~~).
      * *   Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
      *     **
      *     **Note** RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateProductDistributeJobRequest
      * @return CreateProductDistributeJobResponse
     */
    createProductDistributeJob(request: CreateProductDistributeJobRequest): Promise<CreateProductDistributeJobResponse>;
    /**
      * *   You can create a maximum of 10 tags for a product in a single call.
      * *   Each product can have a maximum of 100 tags.
      * > You must specify the tag keys and tag values. Otherwise, the call fails. For description about the tag values, see the "**Request parameters**" section of this topic.
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateProductTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateProductTagsResponse
     */
    createProductTagsWithOptions(request: CreateProductTagsRequest, runtime: $Util.RuntimeOptions): Promise<CreateProductTagsResponse>;
    /**
      * *   You can create a maximum of 10 tags for a product in a single call.
      * *   Each product can have a maximum of 100 tags.
      * > You must specify the tag keys and tag values. Otherwise, the call fails. For description about the tag values, see the "**Request parameters**" section of this topic.
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateProductTagsRequest
      * @return CreateProductTagsResponse
     */
    createProductTags(request: CreateProductTagsRequest): Promise<CreateProductTagsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 1 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateProductTopicRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateProductTopicResponse
     */
    createProductTopicWithOptions(request: CreateProductTopicRequest, runtime: $Util.RuntimeOptions): Promise<CreateProductTopicResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 1 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateProductTopicRequest
      * @return CreateProductTopicResponse
     */
    createProductTopic(request: CreateProductTopicRequest): Promise<CreateProductTopicResponse>;
    /**
      * When you call this operation, you must specify the **ProductKey** parameter in the request.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateRuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateRuleResponse
     */
    createRuleWithOptions(request: CreateRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateRuleResponse>;
    /**
      * When you call this operation, you must specify the **ProductKey** parameter in the request.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateRuleRequest
      * @return CreateRuleResponse
     */
    createRule(request: CreateRuleRequest): Promise<CreateRuleResponse>;
    /**
      * ## Limits
      * *   Destination Alibaba Cloud services that are supported by the rules engine vary based on regions. For more information about the regions and destination cloud services that are supported by the rules engine, see [Regions and zones](~~85669~~).
      * *   You can create a maximum of 10 rule actions for each rule.
      * *   You can call this API operation to define rule actions to forward data to an IoT Platform topic, AMQP consumer group, or Alibaba Cloud service. The supported Alibaba Cloud services include Message Service (MNS), Function Compute, and Tablestore. If you need to forward data to ApsaraDB RDS, you must use the [IoT Platform console](https://iot.console.aliyun.com).
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateRuleActionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateRuleActionResponse
     */
    createRuleActionWithOptions(request: CreateRuleActionRequest, runtime: $Util.RuntimeOptions): Promise<CreateRuleActionResponse>;
    /**
      * ## Limits
      * *   Destination Alibaba Cloud services that are supported by the rules engine vary based on regions. For more information about the regions and destination cloud services that are supported by the rules engine, see [Regions and zones](~~85669~~).
      * *   You can create a maximum of 10 rule actions for each rule.
      * *   You can call this API operation to define rule actions to forward data to an IoT Platform topic, AMQP consumer group, or Alibaba Cloud service. The supported Alibaba Cloud services include Message Service (MNS), Function Compute, and Tablestore. If you need to forward data to ApsaraDB RDS, you must use the [IoT Platform console](https://iot.console.aliyun.com).
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateRuleActionRequest
      * @return CreateRuleActionResponse
     */
    createRuleAction(request: CreateRuleActionRequest): Promise<CreateRuleActionResponse>;
    createSceneRuleWithOptions(request: CreateSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<CreateSceneRuleResponse>;
    createSceneRule(request: CreateSceneRuleRequest): Promise<CreateSceneRuleResponse>;
    createSchedulePeriodWithOptions(request: CreateSchedulePeriodRequest, runtime: $Util.RuntimeOptions): Promise<CreateSchedulePeriodResponse>;
    createSchedulePeriod(request: CreateSchedulePeriodRequest): Promise<CreateSchedulePeriodResponse>;
    createSoundCodeWithOptions(request: CreateSoundCodeRequest, runtime: $Util.RuntimeOptions): Promise<CreateSoundCodeResponse>;
    createSoundCode(request: CreateSoundCodeRequest): Promise<CreateSoundCodeResponse>;
    createSoundCodeLabelWithOptions(request: CreateSoundCodeLabelRequest, runtime: $Util.RuntimeOptions): Promise<CreateSoundCodeLabelResponse>;
    createSoundCodeLabel(request: CreateSoundCodeLabelRequest): Promise<CreateSoundCodeLabelResponse>;
    createSoundCodeScheduleWithOptions(request: CreateSoundCodeScheduleRequest, runtime: $Util.RuntimeOptions): Promise<CreateSoundCodeScheduleResponse>;
    createSoundCodeSchedule(request: CreateSoundCodeScheduleRequest): Promise<CreateSoundCodeScheduleResponse>;
    createSpeechWithOptions(tmpReq: CreateSpeechRequest, runtime: $Util.RuntimeOptions): Promise<CreateSpeechResponse>;
    createSpeech(request: CreateSpeechRequest): Promise<CreateSpeechResponse>;
    createStudioAppDomainOpenWithOptions(request: CreateStudioAppDomainOpenRequest, runtime: $Util.RuntimeOptions): Promise<CreateStudioAppDomainOpenResponse>;
    createStudioAppDomainOpen(request: CreateStudioAppDomainOpenRequest): Promise<CreateStudioAppDomainOpenResponse>;
    /**
      * Server-side subscriptions are categorized into the following two types:
      * *   MNS subscription: pushes subscribed messages to MNS queues. Your server applications listen to MNS queues to receive device messages. For more information, see [Configure MNS server-side subscriptions](~~68948~~). You can call this operation to create an MNS subscription.
      * *   AMQP subscription: pushes subscribed messages to your server by using the AMQP channel. For more information, see [Configure AMQP server-side subscriptions](~~142376~~). To configure an AMQP subscription, perform the following steps:
      *     1\\. Call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group and obtain the returned consumer group ID. Messages are pushed to the consumer group. The AMQP client carries the consumer group ID when the client connected to IoT Platform. For more information, see [Connect an AMQP client to IoT Platform](~~142489~~).
      *     2\\. Call the CreateSubscribeRelation operation to create an AMQP subscription.
      *     3\\. Optional. Call the [CreateConsumerGroupSubscribeRelation](~~170354~~) operation to add a consumer group to the AMQP subscription. You can also call the [DeleteConsumerGroupSubscribeRelation](~~170357~~) operation to remove a consumer group from an AMQP subscription.
      *     4\\. Optional. Call the [QueryConsumerGroupStatus](~~170358~~) operation to query the status of a consumer group, including online client information, message consumption rate, number of accumulated messages, and last message consumption time. You can also call the [ResetConsumerGroupPosition](~~170355~~) operation to clear the accumulated messages of the consumer group.
      * ## QPS limits
      * You can call this API operation up to five times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateSubscribeRelationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateSubscribeRelationResponse
     */
    createSubscribeRelationWithOptions(request: CreateSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<CreateSubscribeRelationResponse>;
    /**
      * Server-side subscriptions are categorized into the following two types:
      * *   MNS subscription: pushes subscribed messages to MNS queues. Your server applications listen to MNS queues to receive device messages. For more information, see [Configure MNS server-side subscriptions](~~68948~~). You can call this operation to create an MNS subscription.
      * *   AMQP subscription: pushes subscribed messages to your server by using the AMQP channel. For more information, see [Configure AMQP server-side subscriptions](~~142376~~). To configure an AMQP subscription, perform the following steps:
      *     1\\. Call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group and obtain the returned consumer group ID. Messages are pushed to the consumer group. The AMQP client carries the consumer group ID when the client connected to IoT Platform. For more information, see [Connect an AMQP client to IoT Platform](~~142489~~).
      *     2\\. Call the CreateSubscribeRelation operation to create an AMQP subscription.
      *     3\\. Optional. Call the [CreateConsumerGroupSubscribeRelation](~~170354~~) operation to add a consumer group to the AMQP subscription. You can also call the [DeleteConsumerGroupSubscribeRelation](~~170357~~) operation to remove a consumer group from an AMQP subscription.
      *     4\\. Optional. Call the [QueryConsumerGroupStatus](~~170358~~) operation to query the status of a consumer group, including online client information, message consumption rate, number of accumulated messages, and last message consumption time. You can also call the [ResetConsumerGroupPosition](~~170355~~) operation to clear the accumulated messages of the consumer group.
      * ## QPS limits
      * You can call this API operation up to five times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateSubscribeRelationRequest
      * @return CreateSubscribeRelationResponse
     */
    createSubscribeRelation(request: CreateSubscribeRelationRequest): Promise<CreateSubscribeRelationResponse>;
    /**
      * ## Limits
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
      * *   Before you call the operation, you can use the [json-schema](https://github.com/everit-org/json-schema?spm=a2c4g.11186623.2.23.575832d9zD7fZb) library to verify the input parameters in **ThingModelJson**. For more information, see [Data structure of ThingModelJson](~~150457~~).
      * *   You can call this operation to add a maximum of 10 TSL features. TSL features include properties, services, and events.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateThingModelRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateThingModelResponse
     */
    createThingModelWithOptions(request: CreateThingModelRequest, runtime: $Util.RuntimeOptions): Promise<CreateThingModelResponse>;
    /**
      * ## Limits
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
      * *   Before you call the operation, you can use the [json-schema](https://github.com/everit-org/json-schema?spm=a2c4g.11186623.2.23.575832d9zD7fZb) library to verify the input parameters in **ThingModelJson**. For more information, see [Data structure of ThingModelJson](~~150457~~).
      * *   You can call this operation to add a maximum of 10 TSL features. TSL features include properties, services, and events.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateThingModelRequest
      * @return CreateThingModelResponse
     */
    createThingModel(request: CreateThingModelRequest): Promise<CreateThingModelResponse>;
    /**
      * A data parsing script is used to convert data submitted by devices into the JSON format. The data submitted by devices is in a custom format. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
      * > If the data format is **Alink JSON**, the CreateThingScript operation is not supported. Alink JSON is a standard data format that is defined by IoT Connectivity Alliance (ICA).
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateThingScriptRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateThingScriptResponse
     */
    createThingScriptWithOptions(request: CreateThingScriptRequest, runtime: $Util.RuntimeOptions): Promise<CreateThingScriptResponse>;
    /**
      * A data parsing script is used to convert data submitted by devices into the JSON format. The data submitted by devices is in a custom format. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
      * > If the data format is **Alink JSON**, the CreateThingScript operation is not supported. Alink JSON is a standard data format that is defined by IoT Connectivity Alliance (ICA).
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateThingScriptRequest
      * @return CreateThingScriptResponse
     */
    createThingScript(request: CreateThingScriptRequest): Promise<CreateThingScriptResponse>;
    createTopicConfigWithOptions(request: CreateTopicConfigRequest, runtime: $Util.RuntimeOptions): Promise<CreateTopicConfigResponse>;
    createTopicConfig(request: CreateTopicConfigRequest): Promise<CreateTopicConfigResponse>;
    /**
      * ## Limits
      * *   You can specify a maximum of 100 destination topics for a source topic.
      * *   The device to which the source topic belongs must be activated.
      * *   The source and destination topics support only custom topics.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateTopicRouteTableRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return CreateTopicRouteTableResponse
     */
    createTopicRouteTableWithOptions(request: CreateTopicRouteTableRequest, runtime: $Util.RuntimeOptions): Promise<CreateTopicRouteTableResponse>;
    /**
      * ## Limits
      * *   You can specify a maximum of 100 destination topics for a source topic.
      * *   The device to which the source topic belongs must be activated.
      * *   The source and destination topics support only custom topics.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request CreateTopicRouteTableRequest
      * @return CreateTopicRouteTableResponse
     */
    createTopicRouteTable(request: CreateTopicRouteTableRequest): Promise<CreateTopicRouteTableResponse>;
    /**
      * *   You can call the [QueryClientIds](~~371985~~) operation to view the ClientIDs of a device and obtain the number of ClientIDs.
      * *   After you call the DeleteClientIds operation, all ClientIDs of the device are deleted and cannot be resumed. To obtain a new ClientID, you can register the device again.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteClientIdsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteClientIdsResponse
     */
    deleteClientIdsWithOptions(request: DeleteClientIdsRequest, runtime: $Util.RuntimeOptions): Promise<DeleteClientIdsResponse>;
    /**
      * *   You can call the [QueryClientIds](~~371985~~) operation to view the ClientIDs of a device and obtain the number of ClientIDs.
      * *   After you call the DeleteClientIds operation, all ClientIDs of the device are deleted and cannot be resumed. To obtain a new ClientID, you can register the device again.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteClientIdsRequest
      * @return DeleteClientIdsResponse
     */
    deleteClientIds(request: DeleteClientIdsRequest): Promise<DeleteClientIdsResponse>;
    /**
      * ## Limits
      * *   You cannot delete the default consumer group provided by IoT Platform.
      * *   If the consumer group is associated with an AMQP subscription, you must disassociate the consumer group from the subscription. If the subscription has multiple consumer groups, you can call the [DeleteConsumerGroupSubscribeRelation](~~170357~~) operation to remove the consumer group from the subscription. If the subscription has only one consumer group, you can call the [UpdateSubscribeRelation](~~170351~~) operation to change the consumer group or call the [DeleteSubscribeRelation](~~170353~~) operation to delete the subscription.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteConsumerGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteConsumerGroupResponse
     */
    deleteConsumerGroupWithOptions(request: DeleteConsumerGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteConsumerGroupResponse>;
    /**
      * ## Limits
      * *   You cannot delete the default consumer group provided by IoT Platform.
      * *   If the consumer group is associated with an AMQP subscription, you must disassociate the consumer group from the subscription. If the subscription has multiple consumer groups, you can call the [DeleteConsumerGroupSubscribeRelation](~~170357~~) operation to remove the consumer group from the subscription. If the subscription has only one consumer group, you can call the [UpdateSubscribeRelation](~~170351~~) operation to change the consumer group or call the [DeleteSubscribeRelation](~~170353~~) operation to delete the subscription.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteConsumerGroupRequest
      * @return DeleteConsumerGroupResponse
     */
    deleteConsumerGroup(request: DeleteConsumerGroupRequest): Promise<DeleteConsumerGroupResponse>;
    /**
      * ## Limits
      * *   If the AMQP subscription has only one consumer group, you cannot call this operation to remove the consumer group.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteConsumerGroupSubscribeRelationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteConsumerGroupSubscribeRelationResponse
     */
    deleteConsumerGroupSubscribeRelationWithOptions(request: DeleteConsumerGroupSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<DeleteConsumerGroupSubscribeRelationResponse>;
    /**
      * ## Limits
      * *   If the AMQP subscription has only one consumer group, you cannot call this operation to remove the consumer group.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteConsumerGroupSubscribeRelationRequest
      * @return DeleteConsumerGroupSubscribeRelationResponse
     */
    deleteConsumerGroupSubscribeRelation(request: DeleteConsumerGroupSubscribeRelationRequest): Promise<DeleteConsumerGroupSubscribeRelationResponse>;
    deleteDataSourceItemWithOptions(request: DeleteDataSourceItemRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDataSourceItemResponse>;
    deleteDataSourceItem(request: DeleteDataSourceItemRequest): Promise<DeleteDataSourceItemResponse>;
    deleteDestinationWithOptions(request: DeleteDestinationRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDestinationResponse>;
    deleteDestination(request: DeleteDestinationRequest): Promise<DeleteDestinationResponse>;
    /**
      * *   When you call this operation with an Alibaba Cloud account, IoT Platform sends a verification code by text message to confirm your identity.
      * *   When you call this operation with a RAM user, IoT Platform does not send a verification code. To ensure device security, you can create custom permission policies to perform fine-grained permission management. For more information, see [Mapping of IoT Platform operations and RAM policies](~~47485~~) and [Custom permissions](~~47495~~).
      * **Warning**
      * *   After a device is deleted, the device ID (**IotId**) becomes invalid, and all other information associated with the device is deleted. In addition, you can no longer perform an operation on the device.
      * *   Before you delete a device in the IoT Platform console, make sure that the corresponding actual device is offline. Otherwise, after the device is deleted from IoT Platform, the actual device continues to initiate connection requests to IoT Platform. If the number of requests exceeds the upper limit, IoT Platform starts request throttling. In this case, access of other devices within your Alibaba Cloud account is affected.
      * *   After you delete a device, the certificate of the device becomes invalid and cannot be restored. Proceed with caution.
      * ****
      * *   You must specify a value for the **IotId** parameter or values for the **ProductKey** and **DeviceName** parameters to identify a device.
      * *   If you specify a gateway and the number of sub-devices that belong to the gateway exceeds 2,000, you can call this operation to create a device job to delete the topological relationships in an asynchronous manner. The operation returns the **JobId** parameter.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDeviceResponse
     */
    deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceResponse>;
    /**
      * *   When you call this operation with an Alibaba Cloud account, IoT Platform sends a verification code by text message to confirm your identity.
      * *   When you call this operation with a RAM user, IoT Platform does not send a verification code. To ensure device security, you can create custom permission policies to perform fine-grained permission management. For more information, see [Mapping of IoT Platform operations and RAM policies](~~47485~~) and [Custom permissions](~~47495~~).
      * **Warning**
      * *   After a device is deleted, the device ID (**IotId**) becomes invalid, and all other information associated with the device is deleted. In addition, you can no longer perform an operation on the device.
      * *   Before you delete a device in the IoT Platform console, make sure that the corresponding actual device is offline. Otherwise, after the device is deleted from IoT Platform, the actual device continues to initiate connection requests to IoT Platform. If the number of requests exceeds the upper limit, IoT Platform starts request throttling. In this case, access of other devices within your Alibaba Cloud account is affected.
      * *   After you delete a device, the certificate of the device becomes invalid and cannot be restored. Proceed with caution.
      * ****
      * *   You must specify a value for the **IotId** parameter or values for the **ProductKey** and **DeviceName** parameters to identify a device.
      * *   If you specify a gateway and the number of sub-devices that belong to the gateway exceeds 2,000, you can call this operation to create a device job to delete the topological relationships in an asynchronous manner. The operation returns the **JobId** parameter.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDeviceRequest
      * @return DeleteDeviceResponse
     */
    deleteDevice(request: DeleteDeviceRequest): Promise<DeleteDeviceResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDeviceDistributeJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDeviceDistributeJobResponse
     */
    deleteDeviceDistributeJobWithOptions(request: DeleteDeviceDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceDistributeJobResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDeviceDistributeJobRequest
      * @return DeleteDeviceDistributeJobResponse
     */
    deleteDeviceDistributeJob(request: DeleteDeviceDistributeJobRequest): Promise<DeleteDeviceDistributeJobResponse>;
    deleteDeviceDynamicGroupWithOptions(request: DeleteDeviceDynamicGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceDynamicGroupResponse>;
    deleteDeviceDynamicGroup(request: DeleteDeviceDynamicGroupRequest): Promise<DeleteDeviceDynamicGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDeviceFileRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDeviceFileResponse
     */
    deleteDeviceFileWithOptions(request: DeleteDeviceFileRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceFileResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDeviceFileRequest
      * @return DeleteDeviceFileResponse
     */
    deleteDeviceFile(request: DeleteDeviceFileRequest): Promise<DeleteDeviceFileResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDeviceGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDeviceGroupResponse
     */
    deleteDeviceGroupWithOptions(request: DeleteDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDeviceGroupRequest
      * @return DeleteDeviceGroupResponse
     */
    deleteDeviceGroup(request: DeleteDeviceGroupRequest): Promise<DeleteDeviceGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDevicePropRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteDevicePropResponse
     */
    deleteDevicePropWithOptions(request: DeleteDevicePropRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDevicePropResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteDevicePropRequest
      * @return DeleteDevicePropResponse
     */
    deleteDeviceProp(request: DeleteDevicePropRequest): Promise<DeleteDevicePropResponse>;
    deleteDeviceSpeechWithOptions(request: DeleteDeviceSpeechRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceSpeechResponse>;
    deleteDeviceSpeech(request: DeleteDeviceSpeechRequest): Promise<DeleteDeviceSpeechResponse>;
    deleteDeviceTunnelWithOptions(request: DeleteDeviceTunnelRequest, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceTunnelResponse>;
    deleteDeviceTunnel(request: DeleteDeviceTunnelRequest): Promise<DeleteDeviceTunnelResponse>;
    /**
      * ## Limits
      * *   You are not allowed to delete a driver that has a published version.
      * *   Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteEdgeDriverRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteEdgeDriverResponse
     */
    deleteEdgeDriverWithOptions(request: DeleteEdgeDriverRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeDriverResponse>;
    /**
      * ## Limits
      * *   You are not allowed to delete a driver that has a published version.
      * *   Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteEdgeDriverRequest
      * @return DeleteEdgeDriverResponse
     */
    deleteEdgeDriver(request: DeleteEdgeDriverRequest): Promise<DeleteEdgeDriverResponse>;
    /**
      * ## Limits
      * *   You are not allowed to delete a published driver version.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteEdgeDriverVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteEdgeDriverVersionResponse
     */
    deleteEdgeDriverVersionWithOptions(request: DeleteEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeDriverVersionResponse>;
    /**
      * ## Limits
      * *   You are not allowed to delete a published driver version.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteEdgeDriverVersionRequest
      * @return DeleteEdgeDriverVersionResponse
     */
    deleteEdgeDriverVersion(request: DeleteEdgeDriverVersionRequest): Promise<DeleteEdgeDriverVersionResponse>;
    /**
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteEdgeInstanceResponse
     */
    deleteEdgeInstanceWithOptions(request: DeleteEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeInstanceResponse>;
    /**
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteEdgeInstanceRequest
      * @return DeleteEdgeInstanceResponse
     */
    deleteEdgeInstance(request: DeleteEdgeInstanceRequest): Promise<DeleteEdgeInstanceResponse>;
    deleteEdgeInstanceMessageRoutingWithOptions(request: DeleteEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeInstanceMessageRoutingResponse>;
    deleteEdgeInstanceMessageRouting(request: DeleteEdgeInstanceMessageRoutingRequest): Promise<DeleteEdgeInstanceMessageRoutingResponse>;
    deleteJobWithOptions(request: DeleteJobRequest, runtime: $Util.RuntimeOptions): Promise<DeleteJobResponse>;
    deleteJob(request: DeleteJobRequest): Promise<DeleteJobResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteOTAFirmwareRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteOTAFirmwareResponse
     */
    deleteOTAFirmwareWithOptions(request: DeleteOTAFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<DeleteOTAFirmwareResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteOTAFirmwareRequest
      * @return DeleteOTAFirmwareResponse
     */
    deleteOTAFirmware(request: DeleteOTAFirmwareRequest): Promise<DeleteOTAFirmwareResponse>;
    /**
      * ## Limits
      * *   The default module cannot be deleted.
      * *   If an update package exists in an OTA module, you cannot delete the OTA module.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteOTAModuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteOTAModuleResponse
     */
    deleteOTAModuleWithOptions(request: DeleteOTAModuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteOTAModuleResponse>;
    /**
      * ## Limits
      * *   The default module cannot be deleted.
      * *   If an update package exists in an OTA module, you cannot delete the OTA module.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteOTAModuleRequest
      * @return DeleteOTAModuleResponse
     */
    deleteOTAModule(request: DeleteOTAModuleRequest): Promise<DeleteOTAModuleResponse>;
    deleteParserWithOptions(request: DeleteParserRequest, runtime: $Util.RuntimeOptions): Promise<DeleteParserResponse>;
    deleteParser(request: DeleteParserRequest): Promise<DeleteParserResponse>;
    deleteParserDataSourceWithOptions(request: DeleteParserDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteParserDataSourceResponse>;
    deleteParserDataSource(request: DeleteParserDataSourceRequest): Promise<DeleteParserDataSourceResponse>;
    /**
      * ## Limits
      * *   After a product is deleted, the ProductKey of the product is invalid. The related information about the product is also deleted. You cannot perform the required operations on the product.
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteProductRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteProductResponse
     */
    deleteProductWithOptions(request: DeleteProductRequest, runtime: $Util.RuntimeOptions): Promise<DeleteProductResponse>;
    /**
      * ## Limits
      * *   After a product is deleted, the ProductKey of the product is invalid. The related information about the product is also deleted. You cannot perform the required operations on the product.
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteProductRequest
      * @return DeleteProductResponse
     */
    deleteProduct(request: DeleteProductRequest): Promise<DeleteProductResponse>;
    /**
      * ## Limits
      * *   You can delete a maximum of 10 tags in a single call.
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteProductTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteProductTagsResponse
     */
    deleteProductTagsWithOptions(request: DeleteProductTagsRequest, runtime: $Util.RuntimeOptions): Promise<DeleteProductTagsResponse>;
    /**
      * ## Limits
      * *   You can delete a maximum of 10 tags in a single call.
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteProductTagsRequest
      * @return DeleteProductTagsResponse
     */
    deleteProductTags(request: DeleteProductTagsRequest): Promise<DeleteProductTagsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteProductTopicRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteProductTopicResponse
     */
    deleteProductTopicWithOptions(request: DeleteProductTopicRequest, runtime: $Util.RuntimeOptions): Promise<DeleteProductTopicResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteProductTopicRequest
      * @return DeleteProductTopicResponse
     */
    deleteProductTopic(request: DeleteProductTopicRequest): Promise<DeleteProductTopicResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteRuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteRuleResponse
     */
    deleteRuleWithOptions(request: DeleteRuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteRuleResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteRuleRequest
      * @return DeleteRuleResponse
     */
    deleteRule(request: DeleteRuleRequest): Promise<DeleteRuleResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteRuleActionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteRuleActionResponse
     */
    deleteRuleActionWithOptions(request: DeleteRuleActionRequest, runtime: $Util.RuntimeOptions): Promise<DeleteRuleActionResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteRuleActionRequest
      * @return DeleteRuleActionResponse
     */
    deleteRuleAction(request: DeleteRuleActionRequest): Promise<DeleteRuleActionResponse>;
    deleteSceneRuleWithOptions(request: DeleteSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSceneRuleResponse>;
    deleteSceneRule(request: DeleteSceneRuleRequest): Promise<DeleteSceneRuleResponse>;
    deleteSchedulePeriodWithOptions(request: DeleteSchedulePeriodRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSchedulePeriodResponse>;
    deleteSchedulePeriod(request: DeleteSchedulePeriodRequest): Promise<DeleteSchedulePeriodResponse>;
    deleteShareTaskDeviceWithOptions(request: DeleteShareTaskDeviceRequest, runtime: $Util.RuntimeOptions): Promise<DeleteShareTaskDeviceResponse>;
    deleteShareTaskDevice(request: DeleteShareTaskDeviceRequest): Promise<DeleteShareTaskDeviceResponse>;
    deleteSoundCodeWithOptions(request: DeleteSoundCodeRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSoundCodeResponse>;
    deleteSoundCode(request: DeleteSoundCodeRequest): Promise<DeleteSoundCodeResponse>;
    deleteSoundCodeLabelWithOptions(request: DeleteSoundCodeLabelRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSoundCodeLabelResponse>;
    deleteSoundCodeLabel(request: DeleteSoundCodeLabelRequest): Promise<DeleteSoundCodeLabelResponse>;
    deleteSoundCodeScheduleWithOptions(request: DeleteSoundCodeScheduleRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSoundCodeScheduleResponse>;
    deleteSoundCodeSchedule(request: DeleteSoundCodeScheduleRequest): Promise<DeleteSoundCodeScheduleResponse>;
    deleteSpeechWithOptions(request: DeleteSpeechRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSpeechResponse>;
    deleteSpeech(request: DeleteSpeechRequest): Promise<DeleteSpeechResponse>;
    deleteStudioAppDomainOpenWithOptions(request: DeleteStudioAppDomainOpenRequest, runtime: $Util.RuntimeOptions): Promise<DeleteStudioAppDomainOpenResponse>;
    deleteStudioAppDomainOpen(request: DeleteStudioAppDomainOpenRequest): Promise<DeleteStudioAppDomainOpenResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteSubscribeRelationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteSubscribeRelationResponse
     */
    deleteSubscribeRelationWithOptions(request: DeleteSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSubscribeRelationResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteSubscribeRelationRequest
      * @return DeleteSubscribeRelationResponse
     */
    deleteSubscribeRelation(request: DeleteSubscribeRelationRequest): Promise<DeleteSubscribeRelationResponse>;
    /**
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call the DeleteThingModel operation.
      * *   If an existing feature or custom TSL module in a product is not published, you can call the DeleteThingModel operation to remove the feature or delete the custom TSL module.
      * *   When you call the DeleteThingModel operation, you must specify a value for the **ProductKey** parameter. The following list describes how the DeleteThingModel operation works:
      *     *   If you specify a value only for the **ProductKey** parameter, the operation deletes all custom TSL modules and removes all features in the default TSL module from the specified product.
      *     *   If you specify values only for the **ProductKey** and **FunctionBlockId** parameters, the operation deletes the specified custom TSL module from the specified product.
      *     *   If you specify a value for the **ProductKey** parameter and a value for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from the default TSL module of the specified product. The operation removes the specified features only if the features exist. If the value that you specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter does not exist in the default TSL module, the operation returns the same result as when you specify a value only for the **ProductKey** parameter.
      *     *   If you specify values for the **ProductKey** and **FunctionBlockId** parameters and a value for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from a specified custom TSL module in a specified product. The operation removes the specified features only if the features exist. If the value that you specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter does not exist, the operation returns the same result as when you specify values only for the **ProductKey** and **FunctionBlockId** parameters.
      * > You must specify up to 10 identifiers for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter.
      * *   After you call the DeleteThingModel operation to remove one or more features from a product, you must call the [PublishThingModel](~~150311~~) operation to re-publish the TSL model of the product. This way, the change takes effect.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 5 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request DeleteThingModelRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteThingModelResponse
     */
    deleteThingModelWithOptions(request: DeleteThingModelRequest, runtime: $Util.RuntimeOptions): Promise<DeleteThingModelResponse>;
    /**
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call the DeleteThingModel operation.
      * *   If an existing feature or custom TSL module in a product is not published, you can call the DeleteThingModel operation to remove the feature or delete the custom TSL module.
      * *   When you call the DeleteThingModel operation, you must specify a value for the **ProductKey** parameter. The following list describes how the DeleteThingModel operation works:
      *     *   If you specify a value only for the **ProductKey** parameter, the operation deletes all custom TSL modules and removes all features in the default TSL module from the specified product.
      *     *   If you specify values only for the **ProductKey** and **FunctionBlockId** parameters, the operation deletes the specified custom TSL module from the specified product.
      *     *   If you specify a value for the **ProductKey** parameter and a value for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from the default TSL module of the specified product. The operation removes the specified features only if the features exist. If the value that you specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter does not exist in the default TSL module, the operation returns the same result as when you specify a value only for the **ProductKey** parameter.
      *     *   If you specify values for the **ProductKey** and **FunctionBlockId** parameters and a value for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from a specified custom TSL module in a specified product. The operation removes the specified features only if the features exist. If the value that you specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter does not exist, the operation returns the same result as when you specify values only for the **ProductKey** and **FunctionBlockId** parameters.
      * > You must specify up to 10 identifiers for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter.
      * *   After you call the DeleteThingModel operation to remove one or more features from a product, you must call the [PublishThingModel](~~150311~~) operation to re-publish the TSL model of the product. This way, the change takes effect.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 5 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request DeleteThingModelRequest
      * @return DeleteThingModelResponse
     */
    deleteThingModel(request: DeleteThingModelRequest): Promise<DeleteThingModelResponse>;
    deleteTopicConfigWithOptions(request: DeleteTopicConfigRequest, runtime: $Util.RuntimeOptions): Promise<DeleteTopicConfigResponse>;
    deleteTopicConfig(request: DeleteTopicConfigRequest): Promise<DeleteTopicConfigResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteTopicRouteTableRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DeleteTopicRouteTableResponse
     */
    deleteTopicRouteTableWithOptions(request: DeleteTopicRouteTableRequest, runtime: $Util.RuntimeOptions): Promise<DeleteTopicRouteTableResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DeleteTopicRouteTableRequest
      * @return DeleteTopicRouteTableResponse
     */
    deleteTopicRouteTable(request: DeleteTopicRouteTableRequest): Promise<DeleteTopicRouteTableResponse>;
    /**
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request DetachDestinationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DetachDestinationResponse
     */
    detachDestinationWithOptions(request: DetachDestinationRequest, runtime: $Util.RuntimeOptions): Promise<DetachDestinationResponse>;
    /**
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request DetachDestinationRequest
      * @return DetachDestinationResponse
     */
    detachDestination(request: DetachDestinationRequest): Promise<DetachDestinationResponse>;
    detachParserDataSourceWithOptions(request: DetachParserDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<DetachParserDataSourceResponse>;
    detachParserDataSource(request: DetachParserDataSourceRequest): Promise<DetachParserDataSourceResponse>;
    disableDeviceTunnelWithOptions(request: DisableDeviceTunnelRequest, runtime: $Util.RuntimeOptions): Promise<DisableDeviceTunnelResponse>;
    disableDeviceTunnel(request: DisableDeviceTunnelRequest): Promise<DisableDeviceTunnelResponse>;
    disableDeviceTunnelShareWithOptions(request: DisableDeviceTunnelShareRequest, runtime: $Util.RuntimeOptions): Promise<DisableDeviceTunnelShareResponse>;
    disableDeviceTunnelShare(request: DisableDeviceTunnelShareRequest): Promise<DisableDeviceTunnelShareResponse>;
    disableSceneRuleWithOptions(request: DisableSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<DisableSceneRuleResponse>;
    disableSceneRule(request: DisableSceneRuleRequest): Promise<DisableSceneRuleResponse>;
    /**
      * ## Limits
      * *   After a device is disabled, you cannot connect the device to IoT Platform. You can perform device-specific operations on the device. However, the information about the device is still retained in IoT Platform. You can use the [EnableThing](~~69603~~) API operation to connect the disabled device to IoT Platform again.
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DisableThingRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return DisableThingResponse
     */
    disableThingWithOptions(request: DisableThingRequest, runtime: $Util.RuntimeOptions): Promise<DisableThingResponse>;
    /**
      * ## Limits
      * *   After a device is disabled, you cannot connect the device to IoT Platform. You can perform device-specific operations on the device. However, the information about the device is still retained in IoT Platform. You can use the [EnableThing](~~69603~~) API operation to connect the disabled device to IoT Platform again.
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request DisableThingRequest
      * @return DisableThingResponse
     */
    disableThing(request: DisableThingRequest): Promise<DisableThingResponse>;
    enableDeviceTunnelWithOptions(request: EnableDeviceTunnelRequest, runtime: $Util.RuntimeOptions): Promise<EnableDeviceTunnelResponse>;
    enableDeviceTunnel(request: EnableDeviceTunnelRequest): Promise<EnableDeviceTunnelResponse>;
    enableDeviceTunnelShareWithOptions(request: EnableDeviceTunnelShareRequest, runtime: $Util.RuntimeOptions): Promise<EnableDeviceTunnelShareResponse>;
    enableDeviceTunnelShare(request: EnableDeviceTunnelShareRequest): Promise<EnableDeviceTunnelShareResponse>;
    enableSceneRuleWithOptions(request: EnableSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<EnableSceneRuleResponse>;
    enableSceneRule(request: EnableSceneRuleRequest): Promise<EnableSceneRuleResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request EnableThingRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return EnableThingResponse
     */
    enableThingWithOptions(request: EnableThingRequest, runtime: $Util.RuntimeOptions): Promise<EnableThingResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request EnableThingRequest
      * @return EnableThingResponse
     */
    enableThing(request: EnableThingRequest): Promise<EnableThingResponse>;
    /**
      * This operation can be used with other operations to upload a device list file. Procedure:
      * 1. Call this operation to generate the information of a device list file that you want to upload to OSS.
      * The response parameters of this API operation include:
      * The following request parameters of the OSS [PostObject](/help/en/object-storage-service/latest/postobject) operation that is used to upload the device list file: **Key**, **AccessKeyId**, **Signature**, and **Policy**.
      * 2. Use an [OSS SDK](/help/en/object-storage-service/latest/sdk-code-samples-overview) to call the [PostObject](/help/en/object-storage-service/latest/postobject) operation to upload the device list file within 1 minute after a response is returned. For more information about sample code, see the "Usage of response parameters" section in this topic.
      * >  The parameter information that is returned by this operation is valid for 1 minute. You must upload the device list file within 1 minute.  3. After you upload the device list file, call the [CreateOTAStaticUpgradeJob](/help/en/iot-platform/latest/e1qtmo) operation of IoT Platform to create a static update batch within 60 minutes.
      * If you upload device list files but you do not call the CreateOTAStaticUpgradeJob operation to create a static update batch, the system automatically deletes the uploaded files. The system deletes files on a regular basis.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      * ## Requirements
      * *   A device list file contains the names of devices. Separate multiple device names with line feeds. Each line contains only one device name. A device list file must be in the CSV format. The maximum size of a device list file is 5 MB.
      * *   Each device list file can contain up to 10,000 names for the devices in a product that is related to an update package. If the number of device names in a device list file exceeds the limit, an error occurs when you use the file to create a static update batch.
      *
      * @param request GenerateDeviceNameListURLRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GenerateDeviceNameListURLResponse
     */
    generateDeviceNameListURLWithOptions(request: GenerateDeviceNameListURLRequest, runtime: $Util.RuntimeOptions): Promise<GenerateDeviceNameListURLResponse>;
    /**
      * This operation can be used with other operations to upload a device list file. Procedure:
      * 1. Call this operation to generate the information of a device list file that you want to upload to OSS.
      * The response parameters of this API operation include:
      * The following request parameters of the OSS [PostObject](/help/en/object-storage-service/latest/postobject) operation that is used to upload the device list file: **Key**, **AccessKeyId**, **Signature**, and **Policy**.
      * 2. Use an [OSS SDK](/help/en/object-storage-service/latest/sdk-code-samples-overview) to call the [PostObject](/help/en/object-storage-service/latest/postobject) operation to upload the device list file within 1 minute after a response is returned. For more information about sample code, see the "Usage of response parameters" section in this topic.
      * >  The parameter information that is returned by this operation is valid for 1 minute. You must upload the device list file within 1 minute.  3. After you upload the device list file, call the [CreateOTAStaticUpgradeJob](/help/en/iot-platform/latest/e1qtmo) operation of IoT Platform to create a static update batch within 60 minutes.
      * If you upload device list files but you do not call the CreateOTAStaticUpgradeJob operation to create a static update batch, the system automatically deletes the uploaded files. The system deletes files on a regular basis.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      * ## Requirements
      * *   A device list file contains the names of devices. Separate multiple device names with line feeds. Each line contains only one device name. A device list file must be in the CSV format. The maximum size of a device list file is 5 MB.
      * *   Each device list file can contain up to 10,000 names for the devices in a product that is related to an update package. If the number of device names in a device list file exceeds the limit, an error occurs when you use the file to create a static update batch.
      *
      * @param request GenerateDeviceNameListURLRequest
      * @return GenerateDeviceNameListURLResponse
     */
    generateDeviceNameListURL(request: GenerateDeviceNameListURLRequest): Promise<GenerateDeviceNameListURLResponse>;
    generateFileUploadURLWithOptions(request: GenerateFileUploadURLRequest, runtime: $Util.RuntimeOptions): Promise<GenerateFileUploadURLResponse>;
    generateFileUploadURL(request: GenerateFileUploadURLRequest): Promise<GenerateFileUploadURLResponse>;
    /**
      * This operation can be used together with other operations to create an update package. Procedure:
      * 1\\. Call this API operation to generate the details of an update package file that you want to upload to OSS.
      * The following section describes the response parameters of this API operation:
      * *   The following request parameters of the OSS [PostObject](~~31988~~) operation that is used to upload the update package file: **Key**, **OSSAccessKeyId**, **Signature**, and **Policy**.
      * *   The following request parameter of the [CreateOTAFirmware](~~147311~~) operation that is used to create the update package: **FirmwareUrl**.
      * 2\\. Use an [OSS SDK](~~52834~~) to call the [PostObject](~~31988~~) operation to upload the update package file. For more information about sample code, see the "Usage of response parameters" section.
      * > The parameter information that is returned by this operation is valid for 1 minute. You must upload the update package file within 1 minute. The maximum size of the uploaded update package file is 1,000 MB.
      * 3\\. After the update package file is uploaded, call the [CreateOTAFirmware](~~147311~~) operation to create an update package within 60 minutes.
      * If update package files are uploaded but you do not call the CreateOTAFirmware operation to create update packages for the files, the uploaded files are automatically deleted by the system on a regular basis.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request GenerateOTAUploadURLRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GenerateOTAUploadURLResponse
     */
    generateOTAUploadURLWithOptions(request: GenerateOTAUploadURLRequest, runtime: $Util.RuntimeOptions): Promise<GenerateOTAUploadURLResponse>;
    /**
      * This operation can be used together with other operations to create an update package. Procedure:
      * 1\\. Call this API operation to generate the details of an update package file that you want to upload to OSS.
      * The following section describes the response parameters of this API operation:
      * *   The following request parameters of the OSS [PostObject](~~31988~~) operation that is used to upload the update package file: **Key**, **OSSAccessKeyId**, **Signature**, and **Policy**.
      * *   The following request parameter of the [CreateOTAFirmware](~~147311~~) operation that is used to create the update package: **FirmwareUrl**.
      * 2\\. Use an [OSS SDK](~~52834~~) to call the [PostObject](~~31988~~) operation to upload the update package file. For more information about sample code, see the "Usage of response parameters" section.
      * > The parameter information that is returned by this operation is valid for 1 minute. You must upload the update package file within 1 minute. The maximum size of the uploaded update package file is 1,000 MB.
      * 3\\. After the update package file is uploaded, call the [CreateOTAFirmware](~~147311~~) operation to create an update package within 60 minutes.
      * If update package files are uploaded but you do not call the CreateOTAFirmware operation to create update packages for the files, the uploaded files are automatically deleted by the system on a regular basis.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request GenerateOTAUploadURLRequest
      * @return GenerateOTAUploadURLResponse
     */
    generateOTAUploadURL(request: GenerateOTAUploadURLRequest): Promise<GenerateOTAUploadURLResponse>;
    getDataAPIServiceDetailWithOptions(request: GetDataAPIServiceDetailRequest, runtime: $Util.RuntimeOptions): Promise<GetDataAPIServiceDetailResponse>;
    getDataAPIServiceDetail(request: GetDataAPIServiceDetailRequest): Promise<GetDataAPIServiceDetailResponse>;
    getDestinationWithOptions(request: GetDestinationRequest, runtime: $Util.RuntimeOptions): Promise<GetDestinationResponse>;
    getDestination(request: GetDestinationRequest): Promise<GetDestinationResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 500 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetDeviceShadowRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetDeviceShadowResponse
     */
    getDeviceShadowWithOptions(request: GetDeviceShadowRequest, runtime: $Util.RuntimeOptions): Promise<GetDeviceShadowResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 500 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetDeviceShadowRequest
      * @return GetDeviceShadowResponse
     */
    getDeviceShadow(request: GetDeviceShadowRequest): Promise<GetDeviceShadowResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetDeviceStatusRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetDeviceStatusResponse
     */
    getDeviceStatusWithOptions(request: GetDeviceStatusRequest, runtime: $Util.RuntimeOptions): Promise<GetDeviceStatusResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetDeviceStatusRequest
      * @return GetDeviceStatusResponse
     */
    getDeviceStatus(request: GetDeviceStatusRequest): Promise<GetDeviceStatusResponse>;
    getDeviceTunnelShareStatusWithOptions(request: GetDeviceTunnelShareStatusRequest, runtime: $Util.RuntimeOptions): Promise<GetDeviceTunnelShareStatusResponse>;
    getDeviceTunnelShareStatus(request: GetDeviceTunnelShareStatusRequest): Promise<GetDeviceTunnelShareStatusResponse>;
    getDeviceTunnelStatusWithOptions(request: GetDeviceTunnelStatusRequest, runtime: $Util.RuntimeOptions): Promise<GetDeviceTunnelStatusResponse>;
    getDeviceTunnelStatus(request: GetDeviceTunnelStatusRequest): Promise<GetDeviceTunnelStatusResponse>;
    getDownloadFileWithOptions(tmpReq: GetDownloadFileRequest, runtime: $Util.RuntimeOptions): Promise<GetDownloadFileResponse>;
    getDownloadFile(request: GetDownloadFileRequest): Promise<GetDownloadFileResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetEdgeDriverVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetEdgeDriverVersionResponse
     */
    getEdgeDriverVersionWithOptions(request: GetEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<GetEdgeDriverVersionResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetEdgeDriverVersionRequest
      * @return GetEdgeDriverVersionResponse
     */
    getEdgeDriverVersion(request: GetEdgeDriverVersionRequest): Promise<GetEdgeDriverVersionResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetEdgeInstanceResponse
     */
    getEdgeInstanceWithOptions(request: GetEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<GetEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetEdgeInstanceRequest
      * @return GetEdgeInstanceResponse
     */
    getEdgeInstance(request: GetEdgeInstanceRequest): Promise<GetEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetEdgeInstanceDeploymentRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetEdgeInstanceDeploymentResponse
     */
    getEdgeInstanceDeploymentWithOptions(request: GetEdgeInstanceDeploymentRequest, runtime: $Util.RuntimeOptions): Promise<GetEdgeInstanceDeploymentResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetEdgeInstanceDeploymentRequest
      * @return GetEdgeInstanceDeploymentResponse
     */
    getEdgeInstanceDeployment(request: GetEdgeInstanceDeploymentRequest): Promise<GetEdgeInstanceDeploymentResponse>;
    getEdgeInstanceMessageRoutingWithOptions(request: GetEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<GetEdgeInstanceMessageRoutingResponse>;
    getEdgeInstanceMessageRouting(request: GetEdgeInstanceMessageRoutingRequest): Promise<GetEdgeInstanceMessageRoutingResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetGatewayBySubDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetGatewayBySubDeviceResponse
     */
    getGatewayBySubDeviceWithOptions(request: GetGatewayBySubDeviceRequest, runtime: $Util.RuntimeOptions): Promise<GetGatewayBySubDeviceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetGatewayBySubDeviceRequest
      * @return GetGatewayBySubDeviceResponse
     */
    getGatewayBySubDevice(request: GetGatewayBySubDeviceRequest): Promise<GetGatewayBySubDeviceResponse>;
    getLoraNodesTaskWithOptions(request: GetLoraNodesTaskRequest, runtime: $Util.RuntimeOptions): Promise<GetLoraNodesTaskResponse>;
    getLoraNodesTask(request: GetLoraNodesTaskRequest): Promise<GetLoraNodesTaskResponse>;
    getParserWithOptions(request: GetParserRequest, runtime: $Util.RuntimeOptions): Promise<GetParserResponse>;
    getParser(request: GetParserRequest): Promise<GetParserResponse>;
    getParserDataSourceWithOptions(request: GetParserDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<GetParserDataSourceResponse>;
    getParserDataSource(request: GetParserDataSourceRequest): Promise<GetParserDataSourceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetRuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetRuleResponse
     */
    getRuleWithOptions(request: GetRuleRequest, runtime: $Util.RuntimeOptions): Promise<GetRuleResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetRuleRequest
      * @return GetRuleResponse
     */
    getRule(request: GetRuleRequest): Promise<GetRuleResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request GetRuleActionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetRuleActionResponse
     */
    getRuleActionWithOptions(request: GetRuleActionRequest, runtime: $Util.RuntimeOptions): Promise<GetRuleActionResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request GetRuleActionRequest
      * @return GetRuleActionResponse
     */
    getRuleAction(request: GetRuleActionRequest): Promise<GetRuleActionResponse>;
    getSceneRuleWithOptions(request: GetSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<GetSceneRuleResponse>;
    getSceneRule(request: GetSceneRuleRequest): Promise<GetSceneRuleResponse>;
    getShareSpeechModelAudioWithOptions(request: GetShareSpeechModelAudioRequest, runtime: $Util.RuntimeOptions): Promise<GetShareSpeechModelAudioResponse>;
    getShareSpeechModelAudio(request: GetShareSpeechModelAudioRequest): Promise<GetShareSpeechModelAudioResponse>;
    getShareTaskByDeviceOpenWithOptions(request: GetShareTaskByDeviceOpenRequest, runtime: $Util.RuntimeOptions): Promise<GetShareTaskByDeviceOpenResponse>;
    getShareTaskByDeviceOpen(request: GetShareTaskByDeviceOpenRequest): Promise<GetShareTaskByDeviceOpenResponse>;
    getSoundCodeAudioWithOptions(request: GetSoundCodeAudioRequest, runtime: $Util.RuntimeOptions): Promise<GetSoundCodeAudioResponse>;
    getSoundCodeAudio(request: GetSoundCodeAudioRequest): Promise<GetSoundCodeAudioResponse>;
    getSoundCodeScheduleWithOptions(request: GetSoundCodeScheduleRequest, runtime: $Util.RuntimeOptions): Promise<GetSoundCodeScheduleResponse>;
    getSoundCodeSchedule(request: GetSoundCodeScheduleRequest): Promise<GetSoundCodeScheduleResponse>;
    getSpeechDeviceDetailWithOptions(request: GetSpeechDeviceDetailRequest, runtime: $Util.RuntimeOptions): Promise<GetSpeechDeviceDetailResponse>;
    getSpeechDeviceDetail(request: GetSpeechDeviceDetailRequest): Promise<GetSpeechDeviceDetailResponse>;
    getSpeechLicenseDeviceStatisticsWithOptions(request: GetSpeechLicenseDeviceStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<GetSpeechLicenseDeviceStatisticsResponse>;
    getSpeechLicenseDeviceStatistics(request: GetSpeechLicenseDeviceStatisticsRequest): Promise<GetSpeechLicenseDeviceStatisticsResponse>;
    getSpeechVoiceWithOptions(runtime: $Util.RuntimeOptions): Promise<GetSpeechVoiceResponse>;
    getSpeechVoice(): Promise<GetSpeechVoiceResponse>;
    getStudioAppTokenOpenWithOptions(request: GetStudioAppTokenOpenRequest, runtime: $Util.RuntimeOptions): Promise<GetStudioAppTokenOpenResponse>;
    getStudioAppTokenOpen(request: GetStudioAppTokenOpenRequest): Promise<GetStudioAppTokenOpenResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request GetThingModelTslRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetThingModelTslResponse
     */
    getThingModelTslWithOptions(request: GetThingModelTslRequest, runtime: $Util.RuntimeOptions): Promise<GetThingModelTslResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request GetThingModelTslRequest
      * @return GetThingModelTslResponse
     */
    getThingModelTsl(request: GetThingModelTslRequest): Promise<GetThingModelTslResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetThingModelTslPublishedRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetThingModelTslPublishedResponse
     */
    getThingModelTslPublishedWithOptions(request: GetThingModelTslPublishedRequest, runtime: $Util.RuntimeOptions): Promise<GetThingModelTslPublishedResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetThingModelTslPublishedRequest
      * @return GetThingModelTslPublishedResponse
     */
    getThingModelTslPublished(request: GetThingModelTslPublishedRequest): Promise<GetThingModelTslPublishedResponse>;
    /**
      * *   A data parsing script is used to convert the custom-formatted data to JSON data after the data is submitted by a device. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetThingScriptRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetThingScriptResponse
     */
    getThingScriptWithOptions(request: GetThingScriptRequest, runtime: $Util.RuntimeOptions): Promise<GetThingScriptResponse>;
    /**
      * *   A data parsing script is used to convert the custom-formatted data to JSON data after the data is submitted by a device. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetThingScriptRequest
      * @return GetThingScriptResponse
     */
    getThingScript(request: GetThingScriptRequest): Promise<GetThingScriptResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetThingTemplateRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetThingTemplateResponse
     */
    getThingTemplateWithOptions(request: GetThingTemplateRequest, runtime: $Util.RuntimeOptions): Promise<GetThingTemplateResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetThingTemplateRequest
      * @return GetThingTemplateResponse
     */
    getThingTemplate(request: GetThingTemplateRequest): Promise<GetThingTemplateResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can initiate a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetThingTopoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return GetThingTopoResponse
     */
    getThingTopoWithOptions(request: GetThingTopoRequest, runtime: $Util.RuntimeOptions): Promise<GetThingTopoResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can initiate a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request GetThingTopoRequest
      * @return GetThingTopoResponse
     */
    getThingTopo(request: GetThingTopoRequest): Promise<GetThingTopoResponse>;
    gisQueryDeviceLocationWithOptions(request: GisQueryDeviceLocationRequest, runtime: $Util.RuntimeOptions): Promise<GisQueryDeviceLocationResponse>;
    gisQueryDeviceLocation(request: GisQueryDeviceLocationRequest): Promise<GisQueryDeviceLocationResponse>;
    gisSearchDeviceTraceWithOptions(request: GisSearchDeviceTraceRequest, runtime: $Util.RuntimeOptions): Promise<GisSearchDeviceTraceResponse>;
    gisSearchDeviceTrace(request: GisSearchDeviceTraceRequest): Promise<GisSearchDeviceTraceResponse>;
    importDTDataWithOptions(request: ImportDTDataRequest, runtime: $Util.RuntimeOptions): Promise<ImportDTDataResponse>;
    importDTData(request: ImportDTDataRequest): Promise<ImportDTDataResponse>;
    importDeviceWithOptions(request: ImportDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ImportDeviceResponse>;
    importDevice(request: ImportDeviceRequest): Promise<ImportDeviceResponse>;
    /**
      * ## Limits
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ImportThingModelTslRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ImportThingModelTslResponse
     */
    importThingModelTslWithOptions(request: ImportThingModelTslRequest, runtime: $Util.RuntimeOptions): Promise<ImportThingModelTslResponse>;
    /**
      * ## Limits
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ImportThingModelTslRequest
      * @return ImportThingModelTslResponse
     */
    importThingModelTsl(request: ImportThingModelTslRequest): Promise<ImportThingModelTslResponse>;
    invokeDataAPIServiceWithOptions(request: InvokeDataAPIServiceRequest, runtime: $Util.RuntimeOptions): Promise<InvokeDataAPIServiceResponse>;
    invokeDataAPIService(request: InvokeDataAPIServiceRequest): Promise<InvokeDataAPIServiceResponse>;
    /**
      * When you define a service in a Thing Specification Language (TSL) model, the mode in which the service is called is specified. When you call a service by using this operation, IoT Platform uses a call mode based on the value of the **Identifier** parameter.
      * *   Synchronous mode: IoT Platform sends a revert-remote procedure call (RRPC) request to a device. Then, the device synchronously returns an RRPC response. For more information about how to use an RRPC, see [What is RRPC?](~~90567~~)
      * *   Asynchronous mode: IoT Platform sends an RRPC request to a device. Then, the device asynchronously returns an RRPC response. For more information about topics, see [Device properties, events, and services](~~89301~~).
      * > If you set the Checksum Type parameter to **Verification-free** when you create a product, the asynchronous mode is used.
      * When the device receives the service call, the device returns a response to the service caller. When you configure the device, you must specify the response logic and response parameters. The data formats of response parameters must comply with the Alink protocol. Example:
      * ```
      * {
      * 	"id": "58***89",
      * 	"code": 200,
      * 	"data": {},
      * 	"message": "success",
      * 	"localizedMsg": "localizedMsg"
      * }
      * ```
      * > *   The **id** parameter specifies the unique identifier of the request. The ID is generated by IoT Platform. The device can obtain the ID from the request parameters and then return the ID.
      * >*   The **code** parameter specifies the result of the service call. The value of the parameter is an integer.
      * >*   The **data** parameter specifies the result of the service call. This parameter is returned to the service caller. You can configure the parameters that you want to include in the returned result. The data must be in the JSON format.
      * >*   The **message** and **localizedMsg** parameters are optional.
      * >*   Link SDK for C of IoT Platform provides an example on how to use a TSL model. For more information, see [Call device services](~~258239~~).
      * ## Limits
      * If you synchronously call a service, the timeout period is 8 seconds. If a server does not receive a response within 8 seconds, a timeout error occurs. No limit is imposed on the timeout period of asynchronous calls.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request InvokeThingServiceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return InvokeThingServiceResponse
     */
    invokeThingServiceWithOptions(request: InvokeThingServiceRequest, runtime: $Util.RuntimeOptions): Promise<InvokeThingServiceResponse>;
    /**
      * When you define a service in a Thing Specification Language (TSL) model, the mode in which the service is called is specified. When you call a service by using this operation, IoT Platform uses a call mode based on the value of the **Identifier** parameter.
      * *   Synchronous mode: IoT Platform sends a revert-remote procedure call (RRPC) request to a device. Then, the device synchronously returns an RRPC response. For more information about how to use an RRPC, see [What is RRPC?](~~90567~~)
      * *   Asynchronous mode: IoT Platform sends an RRPC request to a device. Then, the device asynchronously returns an RRPC response. For more information about topics, see [Device properties, events, and services](~~89301~~).
      * > If you set the Checksum Type parameter to **Verification-free** when you create a product, the asynchronous mode is used.
      * When the device receives the service call, the device returns a response to the service caller. When you configure the device, you must specify the response logic and response parameters. The data formats of response parameters must comply with the Alink protocol. Example:
      * ```
      * {
      * 	"id": "58***89",
      * 	"code": 200,
      * 	"data": {},
      * 	"message": "success",
      * 	"localizedMsg": "localizedMsg"
      * }
      * ```
      * > *   The **id** parameter specifies the unique identifier of the request. The ID is generated by IoT Platform. The device can obtain the ID from the request parameters and then return the ID.
      * >*   The **code** parameter specifies the result of the service call. The value of the parameter is an integer.
      * >*   The **data** parameter specifies the result of the service call. This parameter is returned to the service caller. You can configure the parameters that you want to include in the returned result. The data must be in the JSON format.
      * >*   The **message** and **localizedMsg** parameters are optional.
      * >*   Link SDK for C of IoT Platform provides an example on how to use a TSL model. For more information, see [Call device services](~~258239~~).
      * ## Limits
      * If you synchronously call a service, the timeout period is 8 seconds. If a server does not receive a response within 8 seconds, a timeout error occurs. No limit is imposed on the timeout period of asynchronous calls.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request InvokeThingServiceRequest
      * @return InvokeThingServiceResponse
     */
    invokeThingService(request: InvokeThingServiceRequest): Promise<InvokeThingServiceResponse>;
    /**
      * You can only asynchronously call this operation.
      * When the device receives the service call, the device returns a response to the service caller. When you configure the device, you must specify the response logic and response parameters. The data formats of response parameters must comply with the Alink protocol. Example:
      * ```
      * {
      * 	"id": "58***89",
      * 	"code": 200,
      * 	"data": {},
      * 	"message": "success",
      * 	"localizedMsg": "localizedMsg"
      * }
      * ```
      * > *   The **id** parameter specifies the unique identifier of the request. The ID is generated by IoT Platform. The device can obtain the ID from the request parameters and return the ID.
      * >*   The **code** parameter specifies the result of the service call. The value of the parameter is an integer.
      * >*   The **data** parameter specifies the result of the service call. This parameter is returned to the service caller. You can specify the parameters included in the returned result. The data must be in JSON format.
      * >*   The **message** and **localizedMsg** parameters are optional.
      * >*    Link SDK for C of IoT Platform provides an example on how to use a TSL model. For more information, see [Call device services](~~258239~~).
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request InvokeThingsServiceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return InvokeThingsServiceResponse
     */
    invokeThingsServiceWithOptions(request: InvokeThingsServiceRequest, runtime: $Util.RuntimeOptions): Promise<InvokeThingsServiceResponse>;
    /**
      * You can only asynchronously call this operation.
      * When the device receives the service call, the device returns a response to the service caller. When you configure the device, you must specify the response logic and response parameters. The data formats of response parameters must comply with the Alink protocol. Example:
      * ```
      * {
      * 	"id": "58***89",
      * 	"code": 200,
      * 	"data": {},
      * 	"message": "success",
      * 	"localizedMsg": "localizedMsg"
      * }
      * ```
      * > *   The **id** parameter specifies the unique identifier of the request. The ID is generated by IoT Platform. The device can obtain the ID from the request parameters and return the ID.
      * >*   The **code** parameter specifies the result of the service call. The value of the parameter is an integer.
      * >*   The **data** parameter specifies the result of the service call. This parameter is returned to the service caller. You can specify the parameters included in the returned result. The data must be in JSON format.
      * >*   The **message** and **localizedMsg** parameters are optional.
      * >*    Link SDK for C of IoT Platform provides an example on how to use a TSL model. For more information, see [Call device services](~~258239~~).
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request InvokeThingsServiceRequest
      * @return InvokeThingsServiceResponse
     */
    invokeThingsService(request: InvokeThingsServiceRequest): Promise<InvokeThingsServiceResponse>;
    listAnalyticsDataWithOptions(request: ListAnalyticsDataRequest, runtime: $Util.RuntimeOptions): Promise<ListAnalyticsDataResponse>;
    listAnalyticsData(request: ListAnalyticsDataRequest): Promise<ListAnalyticsDataResponse>;
    listDataSourceItemWithOptions(request: ListDataSourceItemRequest, runtime: $Util.RuntimeOptions): Promise<ListDataSourceItemResponse>;
    listDataSourceItem(request: ListDataSourceItemRequest): Promise<ListDataSourceItemResponse>;
    listDestinationWithOptions(request: ListDestinationRequest, runtime: $Util.RuntimeOptions): Promise<ListDestinationResponse>;
    listDestination(request: ListDestinationRequest): Promise<ListDestinationResponse>;
    /**
      * If you use an Enterprise Edition instance, you must specify the **IotInstanceId** parameter when you call this operation. Otherwise, the call fails.
      * ## QPS limits
      * You can call this API operation up to five times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListDeviceDistributeJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListDeviceDistributeJobResponse
     */
    listDeviceDistributeJobWithOptions(request: ListDeviceDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<ListDeviceDistributeJobResponse>;
    /**
      * If you use an Enterprise Edition instance, you must specify the **IotInstanceId** parameter when you call this operation. Otherwise, the call fails.
      * ## QPS limits
      * You can call this API operation up to five times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListDeviceDistributeJobRequest
      * @return ListDeviceDistributeJobResponse
     */
    listDeviceDistributeJob(request: ListDeviceDistributeJobRequest): Promise<ListDeviceDistributeJobResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      * *   Multiple Alibaba Cloud accounts can run a maximum of 200 QPS at the same time.
      *
      * @param request ListDistributedDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListDistributedDeviceResponse
     */
    listDistributedDeviceWithOptions(request: ListDistributedDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ListDistributedDeviceResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      * *   Multiple Alibaba Cloud accounts can run a maximum of 200 QPS at the same time.
      *
      * @param request ListDistributedDeviceRequest
      * @return ListDistributedDeviceResponse
     */
    listDistributedDevice(request: ListDistributedDeviceRequest): Promise<ListDistributedDeviceResponse>;
    /**
      * You can call this operation only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * ## QPS limits
      * You can call this API operation up to five times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListDistributedProductRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListDistributedProductResponse
     */
    listDistributedProductWithOptions(request: ListDistributedProductRequest, runtime: $Util.RuntimeOptions): Promise<ListDistributedProductResponse>;
    /**
      * You can call this operation only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * ## QPS limits
      * You can call this API operation up to five times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListDistributedProductRequest
      * @return ListDistributedProductResponse
     */
    listDistributedProduct(request: ListDistributedProductRequest): Promise<ListDistributedProductResponse>;
    listJobWithOptions(request: ListJobRequest, runtime: $Util.RuntimeOptions): Promise<ListJobResponse>;
    listJob(request: ListJobRequest): Promise<ListJobResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAFirmwareRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListOTAFirmwareResponse
     */
    listOTAFirmwareWithOptions(request: ListOTAFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAFirmwareResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAFirmwareRequest
      * @return ListOTAFirmwareResponse
     */
    listOTAFirmware(request: ListOTAFirmwareRequest): Promise<ListOTAFirmwareResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAJobByDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListOTAJobByDeviceResponse
     */
    listOTAJobByDeviceWithOptions(request: ListOTAJobByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAJobByDeviceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAJobByDeviceRequest
      * @return ListOTAJobByDeviceResponse
     */
    listOTAJobByDevice(request: ListOTAJobByDeviceRequest): Promise<ListOTAJobByDeviceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAJobByFirmwareRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListOTAJobByFirmwareResponse
     */
    listOTAJobByFirmwareWithOptions(request: ListOTAJobByFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAJobByFirmwareResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAJobByFirmwareRequest
      * @return ListOTAJobByFirmwareResponse
     */
    listOTAJobByFirmware(request: ListOTAJobByFirmwareRequest): Promise<ListOTAJobByFirmwareResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAModuleByProductRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListOTAModuleByProductResponse
     */
    listOTAModuleByProductWithOptions(request: ListOTAModuleByProductRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAModuleByProductResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAModuleByProductRequest
      * @return ListOTAModuleByProductResponse
     */
    listOTAModuleByProduct(request: ListOTAModuleByProductRequest): Promise<ListOTAModuleByProductResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAModuleVersionsByDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListOTAModuleVersionsByDeviceResponse
     */
    listOTAModuleVersionsByDeviceWithOptions(request: ListOTAModuleVersionsByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAModuleVersionsByDeviceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAModuleVersionsByDeviceRequest
      * @return ListOTAModuleVersionsByDeviceResponse
     */
    listOTAModuleVersionsByDevice(request: ListOTAModuleVersionsByDeviceRequest): Promise<ListOTAModuleVersionsByDeviceResponse>;
    /**
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request ListOTATaskByJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListOTATaskByJobResponse
     */
    listOTATaskByJobWithOptions(request: ListOTATaskByJobRequest, runtime: $Util.RuntimeOptions): Promise<ListOTATaskByJobResponse>;
    /**
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request ListOTATaskByJobRequest
      * @return ListOTATaskByJobResponse
     */
    listOTATaskByJob(request: ListOTATaskByJobRequest): Promise<ListOTATaskByJobResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAUnfinishedTaskByDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListOTAUnfinishedTaskByDeviceResponse
     */
    listOTAUnfinishedTaskByDeviceWithOptions(request: ListOTAUnfinishedTaskByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ListOTAUnfinishedTaskByDeviceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListOTAUnfinishedTaskByDeviceRequest
      * @return ListOTAUnfinishedTaskByDeviceResponse
     */
    listOTAUnfinishedTaskByDevice(request: ListOTAUnfinishedTaskByDeviceRequest): Promise<ListOTAUnfinishedTaskByDeviceResponse>;
    listParserWithOptions(request: ListParserRequest, runtime: $Util.RuntimeOptions): Promise<ListParserResponse>;
    listParser(request: ListParserRequest): Promise<ListParserResponse>;
    listParserDataSourceWithOptions(request: ListParserDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<ListParserDataSourceResponse>;
    listParserDataSource(request: ListParserDataSourceRequest): Promise<ListParserDataSourceResponse>;
    listParserDestinationWithOptions(request: ListParserDestinationRequest, runtime: $Util.RuntimeOptions): Promise<ListParserDestinationResponse>;
    listParserDestination(request: ListParserDestinationRequest): Promise<ListParserDestinationResponse>;
    /**
      * ## Limits
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      * *   You can specify a tag key or a tag key-value pair for search.
      * *   If you specify multiple tags, the logical relationship among these tags is **OR**.
      *
      * @param request ListProductByTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListProductByTagsResponse
     */
    listProductByTagsWithOptions(request: ListProductByTagsRequest, runtime: $Util.RuntimeOptions): Promise<ListProductByTagsResponse>;
    /**
      * ## Limits
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      * *   You can specify a tag key or a tag key-value pair for search.
      * *   If you specify multiple tags, the logical relationship among these tags is **OR**.
      *
      * @param request ListProductByTagsRequest
      * @return ListProductByTagsResponse
     */
    listProductByTags(request: ListProductByTagsRequest): Promise<ListProductByTagsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListProductTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListProductTagsResponse
     */
    listProductTagsWithOptions(request: ListProductTagsRequest, runtime: $Util.RuntimeOptions): Promise<ListProductTagsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListProductTagsRequest
      * @return ListProductTagsResponse
     */
    listProductTags(request: ListProductTagsRequest): Promise<ListProductTagsResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 20 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListRuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListRuleResponse
     */
    listRuleWithOptions(request: ListRuleRequest, runtime: $Util.RuntimeOptions): Promise<ListRuleResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 20 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListRuleRequest
      * @return ListRuleResponse
     */
    listRule(request: ListRuleRequest): Promise<ListRuleResponse>;
    /**
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListRuleActionsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListRuleActionsResponse
     */
    listRuleActionsWithOptions(request: ListRuleActionsRequest, runtime: $Util.RuntimeOptions): Promise<ListRuleActionsResponse>;
    /**
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListRuleActionsRequest
      * @return ListRuleActionsResponse
     */
    listRuleActions(request: ListRuleActionsRequest): Promise<ListRuleActionsResponse>;
    listTaskWithOptions(tmpReq: ListTaskRequest, runtime: $Util.RuntimeOptions): Promise<ListTaskResponse>;
    listTask(request: ListTaskRequest): Promise<ListTaskResponse>;
    /**
      * You can manage TSL models by version. After you import a TSL model by calling the [ImportThingModelTsl](~~150320~~) operation, copy a TSL model by calling the [CopyThingModel](~~150322~~) operation, or edit a TSL model, you must publish the TSL model by calling the [PublishThingModel](~~150311~~) operation. Then, the TSL model can be used. Each time a TSL model of a product is published, a new version is generated.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListThingModelVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListThingModelVersionResponse
     */
    listThingModelVersionWithOptions(request: ListThingModelVersionRequest, runtime: $Util.RuntimeOptions): Promise<ListThingModelVersionResponse>;
    /**
      * You can manage TSL models by version. After you import a TSL model by calling the [ImportThingModelTsl](~~150320~~) operation, copy a TSL model by calling the [CopyThingModel](~~150322~~) operation, or edit a TSL model, you must publish the TSL model by calling the [PublishThingModel](~~150311~~) operation. Then, the TSL model can be used. Each time a TSL model of a product is published, a new version is generated.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListThingModelVersionRequest
      * @return ListThingModelVersionResponse
     */
    listThingModelVersion(request: ListThingModelVersionRequest): Promise<ListThingModelVersionResponse>;
    /**
      * IoT Platform provides product categories that have defined TSL models, such as street lamps, vehicle location cards, and water immersion detectors.
      * When you call the [CreateProduct](~~69123~~) operation to create a product, you can set the CategoryKey parameter to specify a product category. The product that you create references the standardized TSL model of the specified category.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListThingTemplatesRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ListThingTemplatesResponse
     */
    listThingTemplatesWithOptions(request: ListThingTemplatesRequest, runtime: $Util.RuntimeOptions): Promise<ListThingTemplatesResponse>;
    /**
      * IoT Platform provides product categories that have defined TSL models, such as street lamps, vehicle location cards, and water immersion detectors.
      * When you call the [CreateProduct](~~69123~~) operation to create a product, you can set the CategoryKey parameter to specify a product category. The product that you create references the standardized TSL model of the specified category.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ListThingTemplatesRequest
      * @return ListThingTemplatesResponse
     */
    listThingTemplates(request: ListThingTemplatesRequest): Promise<ListThingTemplatesResponse>;
    /**
      * A successful response indicates that the command to add topological relationships is sent to the gateway. It does not indicate that the topological relationships are added.
      * When you develop the gateway, you must subscribe to the topic that is used to send notifications when you add topological relationships. For more information about the topic and message format, see [Manage topological relationships](~~89299~~).
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request NotifyAddThingTopoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return NotifyAddThingTopoResponse
     */
    notifyAddThingTopoWithOptions(request: NotifyAddThingTopoRequest, runtime: $Util.RuntimeOptions): Promise<NotifyAddThingTopoResponse>;
    /**
      * A successful response indicates that the command to add topological relationships is sent to the gateway. It does not indicate that the topological relationships are added.
      * When you develop the gateway, you must subscribe to the topic that is used to send notifications when you add topological relationships. For more information about the topic and message format, see [Manage topological relationships](~~89299~~).
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request NotifyAddThingTopoRequest
      * @return NotifyAddThingTopoResponse
     */
    notifyAddThingTopo(request: NotifyAddThingTopoRequest): Promise<NotifyAddThingTopoResponse>;
    openIotServiceWithOptions(request: OpenIotServiceRequest, runtime: $Util.RuntimeOptions): Promise<OpenIotServiceResponse>;
    openIotService(request: OpenIotServiceRequest): Promise<OpenIotServiceResponse>;
    packageSoundCodeLabelBatchAudioWithOptions(request: PackageSoundCodeLabelBatchAudioRequest, runtime: $Util.RuntimeOptions): Promise<PackageSoundCodeLabelBatchAudioResponse>;
    packageSoundCodeLabelBatchAudio(request: PackageSoundCodeLabelBatchAudioRequest): Promise<PackageSoundCodeLabelBatchAudioResponse>;
    pageQuerySharedSpeechOpenWithOptions(request: PageQuerySharedSpeechOpenRequest, runtime: $Util.RuntimeOptions): Promise<PageQuerySharedSpeechOpenResponse>;
    pageQuerySharedSpeechOpen(request: PageQuerySharedSpeechOpenRequest): Promise<PageQuerySharedSpeechOpenResponse>;
    pageQuerySpeechBroadcastHourWithOptions(request: PageQuerySpeechBroadcastHourRequest, runtime: $Util.RuntimeOptions): Promise<PageQuerySpeechBroadcastHourResponse>;
    pageQuerySpeechBroadcastHour(request: PageQuerySpeechBroadcastHourRequest): Promise<PageQuerySpeechBroadcastHourResponse>;
    printByTemplateWithOptions(request: PrintByTemplateRequest, runtime: $Util.RuntimeOptions): Promise<PrintByTemplateResponse>;
    printByTemplate(request: PrintByTemplateRequest): Promise<PrintByTemplateResponse>;
    /**
      * This operation does not support device property settings and service invocations.
      * *   To set properties, call the [SetDeviceProperty](~~69579~~) or [SetDevicesProperty](~~96243~~) operation.
      * *   To invoke a service, call the [InvokeThingService](~~69584~~) or [InvokeThingsService](~~96242~~) operation.
      * ## QPS limit
      * You can call this API operation up to 1,600 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request PubRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return PubResponse
     */
    pubWithOptions(request: PubRequest, runtime: $Util.RuntimeOptions): Promise<PubResponse>;
    /**
      * This operation does not support device property settings and service invocations.
      * *   To set properties, call the [SetDeviceProperty](~~69579~~) or [SetDevicesProperty](~~96243~~) operation.
      * *   To invoke a service, call the [InvokeThingService](~~69584~~) or [InvokeThingsService](~~96242~~) operation.
      * ## QPS limit
      * You can call this API operation up to 1,600 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request PubRequest
      * @return PubResponse
     */
    pub(request: PubRequest): Promise<PubResponse>;
    /**
      * You can use the **TopicFullName** parameter in the **request** to specify the devices to which you want to broadcast messages. For more information, see the description about the **TopicFullName** parameter in this topic.
      * ## QPS limits
      * - Each Alibaba Cloud account can run only one query per second (QPS) to broadcast a message to devices that subscribe to a topic.
      * - Each Alibaba Cloud account can run only one query per minute (QPM) to broadcast a message to all online devices of a product.      >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request PubBroadcastRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return PubBroadcastResponse
     */
    pubBroadcastWithOptions(request: PubBroadcastRequest, runtime: $Util.RuntimeOptions): Promise<PubBroadcastResponse>;
    /**
      * You can use the **TopicFullName** parameter in the **request** to specify the devices to which you want to broadcast messages. For more information, see the description about the **TopicFullName** parameter in this topic.
      * ## QPS limits
      * - Each Alibaba Cloud account can run only one query per second (QPS) to broadcast a message to devices that subscribe to a topic.
      * - Each Alibaba Cloud account can run only one query per minute (QPM) to broadcast a message to all online devices of a product.      >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request PubBroadcastRequest
      * @return PubBroadcastResponse
     */
    pubBroadcast(request: PubBroadcastRequest): Promise<PubBroadcastResponse>;
    publishScriptWithOptions(request: PublishScriptRequest, runtime: $Util.RuntimeOptions): Promise<PublishScriptResponse>;
    publishScript(request: PublishScriptRequest): Promise<PublishScriptResponse>;
    publishStudioAppWithOptions(request: PublishStudioAppRequest, runtime: $Util.RuntimeOptions): Promise<PublishStudioAppResponse>;
    publishStudioApp(request: PublishStudioAppRequest): Promise<PublishStudioAppResponse>;
    /**
      * ## Limits
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request PublishThingModelRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return PublishThingModelResponse
     */
    publishThingModelWithOptions(request: PublishThingModelRequest, runtime: $Util.RuntimeOptions): Promise<PublishThingModelResponse>;
    /**
      * ## Limits
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request PublishThingModelRequest
      * @return PublishThingModelResponse
     */
    publishThingModel(request: PublishThingModelRequest): Promise<PublishThingModelResponse>;
    pushSpeechWithOptions(request: PushSpeechRequest, runtime: $Util.RuntimeOptions): Promise<PushSpeechResponse>;
    pushSpeech(request: PushSpeechRequest): Promise<PushSpeechResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 30 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryBatchRegisterDeviceStatusRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryBatchRegisterDeviceStatusResponse
     */
    queryBatchRegisterDeviceStatusWithOptions(request: QueryBatchRegisterDeviceStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryBatchRegisterDeviceStatusResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 30 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryBatchRegisterDeviceStatusRequest
      * @return QueryBatchRegisterDeviceStatusResponse
     */
    queryBatchRegisterDeviceStatus(request: QueryBatchRegisterDeviceStatusRequest): Promise<QueryBatchRegisterDeviceStatusResponse>;
    queryCertUrlByApplyIdWithOptions(request: QueryCertUrlByApplyIdRequest, runtime: $Util.RuntimeOptions): Promise<QueryCertUrlByApplyIdResponse>;
    queryCertUrlByApplyId(request: QueryCertUrlByApplyIdRequest): Promise<QueryCertUrlByApplyIdResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryClientIdsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryClientIdsResponse
     */
    queryClientIdsWithOptions(request: QueryClientIdsRequest, runtime: $Util.RuntimeOptions): Promise<QueryClientIdsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryClientIdsRequest
      * @return QueryClientIdsResponse
     */
    queryClientIds(request: QueryClientIdsRequest): Promise<QueryClientIdsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryConsumerGroupByGroupIdRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryConsumerGroupByGroupIdResponse
     */
    queryConsumerGroupByGroupIdWithOptions(request: QueryConsumerGroupByGroupIdRequest, runtime: $Util.RuntimeOptions): Promise<QueryConsumerGroupByGroupIdResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryConsumerGroupByGroupIdRequest
      * @return QueryConsumerGroupByGroupIdResponse
     */
    queryConsumerGroupByGroupId(request: QueryConsumerGroupByGroupIdRequest): Promise<QueryConsumerGroupByGroupIdResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryConsumerGroupListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryConsumerGroupListResponse
     */
    queryConsumerGroupListWithOptions(request: QueryConsumerGroupListRequest, runtime: $Util.RuntimeOptions): Promise<QueryConsumerGroupListResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryConsumerGroupListRequest
      * @return QueryConsumerGroupListResponse
     */
    queryConsumerGroupList(request: QueryConsumerGroupListRequest): Promise<QueryConsumerGroupListResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryConsumerGroupStatusRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryConsumerGroupStatusResponse
     */
    queryConsumerGroupStatusWithOptions(request: QueryConsumerGroupStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryConsumerGroupStatusResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryConsumerGroupStatusRequest
      * @return QueryConsumerGroupStatusResponse
     */
    queryConsumerGroupStatus(request: QueryConsumerGroupStatusRequest): Promise<QueryConsumerGroupStatusResponse>;
    queryDetailSceneRuleLogWithOptions(request: QueryDetailSceneRuleLogRequest, runtime: $Util.RuntimeOptions): Promise<QueryDetailSceneRuleLogResponse>;
    queryDetailSceneRuleLog(request: QueryDetailSceneRuleLogRequest): Promise<QueryDetailSceneRuleLogResponse>;
    /**
      * The QueryDevice operation can return up to one million devices each time you call the operation.
      * ## QPS limits
      * - You can call this API operation up to 50 times per second per account. >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      * - If the product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter is greater than or equal to 100,000, the queries per second (QPS) of this operation decreases.
      * In this case, you can call this API operation up to two times per second per account.
      *
      * @param request QueryDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceResponse
     */
    queryDeviceWithOptions(request: QueryDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceResponse>;
    /**
      * The QueryDevice operation can return up to one million devices each time you call the operation.
      * ## QPS limits
      * - You can call this API operation up to 50 times per second per account. >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      * - If the product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter is greater than or equal to 100,000, the queries per second (QPS) of this operation decreases.
      * In this case, you can call this API operation up to two times per second per account.
      *
      * @param request QueryDeviceRequest
      * @return QueryDeviceResponse
     */
    queryDevice(request: QueryDeviceRequest): Promise<QueryDeviceResponse>;
    /**
      * *   You can query devices on Enterprise Edition instances only in the China (Shanghai) and Japan (Tokyo) regions.
      * *   The QueryDeviceBySQL operation can return up to 10,000 devices each time you call the operation. For more information, see the "`Syntax of LIMIT clauses`" section of this topic.
      * ## QPS limits
      * You can call this API operation up to 10 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceBySQLRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceBySQLResponse
     */
    queryDeviceBySQLWithOptions(request: QueryDeviceBySQLRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceBySQLResponse>;
    /**
      * *   You can query devices on Enterprise Edition instances only in the China (Shanghai) and Japan (Tokyo) regions.
      * *   The QueryDeviceBySQL operation can return up to 10,000 devices each time you call the operation. For more information, see the "`Syntax of LIMIT clauses`" section of this topic.
      * ## QPS limits
      * You can call this API operation up to 10 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceBySQLRequest
      * @return QueryDeviceBySQLResponse
     */
    queryDeviceBySQL(request: QueryDeviceBySQLRequest): Promise<QueryDeviceBySQLResponse>;
    /**
      * ## Limits
      * *   After the status of a device changes, the new status is applied within 10 seconds. After the new status is applied, you can search for the device by using the new status. Before the new status is applied, you can search for the device by using the previous status.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceByStatusRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceByStatusResponse
     */
    queryDeviceByStatusWithOptions(request: QueryDeviceByStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceByStatusResponse>;
    /**
      * ## Limits
      * *   After the status of a device changes, the new status is applied within 10 seconds. After the new status is applied, you can search for the device by using the new status. Before the new status is applied, you can search for the device by using the previous status.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceByStatusRequest
      * @return QueryDeviceByStatusResponse
     */
    queryDeviceByStatus(request: QueryDeviceByStatusRequest): Promise<QueryDeviceByStatusResponse>;
    /**
      * ## Limits
      * *   You can specify a maximum of 10 tags in a single call.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceByTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceByTagsResponse
     */
    queryDeviceByTagsWithOptions(request: QueryDeviceByTagsRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceByTagsResponse>;
    /**
      * ## Limits
      * *   You can specify a maximum of 10 tags in a single call.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceByTagsRequest
      * @return QueryDeviceByTagsResponse
     */
    queryDeviceByTags(request: QueryDeviceByTagsRequest): Promise<QueryDeviceByTagsResponse>;
    queryDeviceCertWithOptions(request: QueryDeviceCertRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceCertResponse>;
    queryDeviceCert(request: QueryDeviceCertRequest): Promise<QueryDeviceCertResponse>;
    /**
      * *   The desired values of read-only properties cannot be queried.
      * *   You can query the desired values of up to 10 properties in a single call.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceDesiredPropertyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceDesiredPropertyResponse
     */
    queryDeviceDesiredPropertyWithOptions(request: QueryDeviceDesiredPropertyRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceDesiredPropertyResponse>;
    /**
      * *   The desired values of read-only properties cannot be queried.
      * *   You can query the desired values of up to 10 properties in a single call.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceDesiredPropertyRequest
      * @return QueryDeviceDesiredPropertyResponse
     */
    queryDeviceDesiredProperty(request: QueryDeviceDesiredPropertyRequest): Promise<QueryDeviceDesiredPropertyResponse>;
    /**
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceDetailRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceDetailResponse
     */
    queryDeviceDetailWithOptions(request: QueryDeviceDetailRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceDetailResponse>;
    /**
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceDetailRequest
      * @return QueryDeviceDetailResponse
     */
    queryDeviceDetail(request: QueryDeviceDetailRequest): Promise<QueryDeviceDetailResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceDistributeDetailRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceDistributeDetailResponse
     */
    queryDeviceDistributeDetailWithOptions(request: QueryDeviceDistributeDetailRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceDistributeDetailResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceDistributeDetailRequest
      * @return QueryDeviceDistributeDetailResponse
     */
    queryDeviceDistributeDetail(request: QueryDeviceDistributeDetailRequest): Promise<QueryDeviceDistributeDetailResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceDistributeJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceDistributeJobResponse
     */
    queryDeviceDistributeJobWithOptions(request: QueryDeviceDistributeJobRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceDistributeJobResponse>;
    /**
      * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceDistributeJobRequest
      * @return QueryDeviceDistributeJobResponse
     */
    queryDeviceDistributeJob(request: QueryDeviceDistributeJobRequest): Promise<QueryDeviceDistributeJobResponse>;
    /**
      * You can query only the event records that are generated in the previous 30 days.
      * >  The storage period of an event record is calculated from the day when the record is generated.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request QueryDeviceEventDataRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceEventDataResponse
     */
    queryDeviceEventDataWithOptions(request: QueryDeviceEventDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceEventDataResponse>;
    /**
      * You can query only the event records that are generated in the previous 30 days.
      * >  The storage period of an event record is calculated from the day when the record is generated.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request QueryDeviceEventDataRequest
      * @return QueryDeviceEventDataResponse
     */
    queryDeviceEventData(request: QueryDeviceEventDataRequest): Promise<QueryDeviceEventDataResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceFileRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceFileResponse
     */
    queryDeviceFileWithOptions(request: QueryDeviceFileRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceFileResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceFileRequest
      * @return QueryDeviceFileResponse
     */
    queryDeviceFile(request: QueryDeviceFileRequest): Promise<QueryDeviceFileResponse>;
    /**
      * ## Limits
      * *   The returned file information for this operation call does not contain download URLs. To obtain the download URL of a file, call [QueryDeviceFile](~~112002~~).
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceFileListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceFileListResponse
     */
    queryDeviceFileListWithOptions(request: QueryDeviceFileListRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceFileListResponse>;
    /**
      * ## Limits
      * *   The returned file information for this operation call does not contain download URLs. To obtain the download URL of a file, call [QueryDeviceFile](~~112002~~).
      * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceFileListRequest
      * @return QueryDeviceFileListResponse
     */
    queryDeviceFileList(request: QueryDeviceFileListRequest): Promise<QueryDeviceFileListResponse>;
    /**
      * ## Limits
      * *   You can add a device to a maximum of 10 groups.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupByDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceGroupByDeviceResponse
     */
    queryDeviceGroupByDeviceWithOptions(request: QueryDeviceGroupByDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupByDeviceResponse>;
    /**
      * ## Limits
      * *   You can add a device to a maximum of 10 groups.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupByDeviceRequest
      * @return QueryDeviceGroupByDeviceResponse
     */
    queryDeviceGroupByDevice(request: QueryDeviceGroupByDeviceRequest): Promise<QueryDeviceGroupByDeviceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupByTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceGroupByTagsResponse
     */
    queryDeviceGroupByTagsWithOptions(request: QueryDeviceGroupByTagsRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupByTagsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupByTagsRequest
      * @return QueryDeviceGroupByTagsResponse
     */
    queryDeviceGroupByTags(request: QueryDeviceGroupByTagsRequest): Promise<QueryDeviceGroupByTagsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 30 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupInfoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceGroupInfoResponse
     */
    queryDeviceGroupInfoWithOptions(request: QueryDeviceGroupInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupInfoResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 30 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupInfoRequest
      * @return QueryDeviceGroupInfoResponse
     */
    queryDeviceGroupInfo(request: QueryDeviceGroupInfoRequest): Promise<QueryDeviceGroupInfoResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 100 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceGroupListResponse
     */
    queryDeviceGroupListWithOptions(request: QueryDeviceGroupListRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupListResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 100 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupListRequest
      * @return QueryDeviceGroupListResponse
     */
    queryDeviceGroupList(request: QueryDeviceGroupListRequest): Promise<QueryDeviceGroupListResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupTagListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceGroupTagListResponse
     */
    queryDeviceGroupTagListWithOptions(request: QueryDeviceGroupTagListRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceGroupTagListResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceGroupTagListRequest
      * @return QueryDeviceGroupTagListResponse
     */
    queryDeviceGroupTagList(request: QueryDeviceGroupTagListRequest): Promise<QueryDeviceGroupTagListResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request QueryDeviceInfoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceInfoResponse
     */
    queryDeviceInfoWithOptions(request: QueryDeviceInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceInfoResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request QueryDeviceInfoRequest
      * @return QueryDeviceInfoResponse
     */
    queryDeviceInfo(request: QueryDeviceInfoRequest): Promise<QueryDeviceInfoResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceListByDeviceGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceListByDeviceGroupResponse
     */
    queryDeviceListByDeviceGroupWithOptions(request: QueryDeviceListByDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceListByDeviceGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceListByDeviceGroupRequest
      * @return QueryDeviceListByDeviceGroupResponse
     */
    queryDeviceListByDeviceGroup(request: QueryDeviceListByDeviceGroupRequest): Promise<QueryDeviceListByDeviceGroupResponse>;
    /**
      * ## Limits
      * *   You can query only the event records that are generated in the last 30 days.
      * >  The storage period of an event record is calculated from the day when the record is generated.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceOriginalEventDataRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceOriginalEventDataResponse
     */
    queryDeviceOriginalEventDataWithOptions(request: QueryDeviceOriginalEventDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceOriginalEventDataResponse>;
    /**
      * ## Limits
      * *   You can query only the event records that are generated in the last 30 days.
      * >  The storage period of an event record is calculated from the day when the record is generated.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceOriginalEventDataRequest
      * @return QueryDeviceOriginalEventDataResponse
     */
    queryDeviceOriginalEventData(request: QueryDeviceOriginalEventDataRequest): Promise<QueryDeviceOriginalEventDataResponse>;
    /**
      * You can query only the property records that are generated within the previous 30 days.
      * >  The data of a property is stored from the day when the data is generated.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceOriginalPropertyDataRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceOriginalPropertyDataResponse
     */
    queryDeviceOriginalPropertyDataWithOptions(request: QueryDeviceOriginalPropertyDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceOriginalPropertyDataResponse>;
    /**
      * You can query only the property records that are generated within the previous 30 days.
      * >  The data of a property is stored from the day when the data is generated.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceOriginalPropertyDataRequest
      * @return QueryDeviceOriginalPropertyDataResponse
     */
    queryDeviceOriginalPropertyData(request: QueryDeviceOriginalPropertyDataRequest): Promise<QueryDeviceOriginalPropertyDataResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceOriginalPropertyStatusRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceOriginalPropertyStatusResponse
     */
    queryDeviceOriginalPropertyStatusWithOptions(request: QueryDeviceOriginalPropertyStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceOriginalPropertyStatusResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceOriginalPropertyStatusRequest
      * @return QueryDeviceOriginalPropertyStatusResponse
     */
    queryDeviceOriginalPropertyStatus(request: QueryDeviceOriginalPropertyStatusRequest): Promise<QueryDeviceOriginalPropertyStatusResponse>;
    /**
      * ## Limits
      * *   You can query only the service call records that are generated in the last 30 days.
      * >  The storage period of a service call record is calculated from the day when the service is called.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceOriginalServiceDataRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceOriginalServiceDataResponse
     */
    queryDeviceOriginalServiceDataWithOptions(request: QueryDeviceOriginalServiceDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceOriginalServiceDataResponse>;
    /**
      * ## Limits
      * *   You can query only the service call records that are generated in the last 30 days.
      * >  The storage period of a service call record is calculated from the day when the service is called.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceOriginalServiceDataRequest
      * @return QueryDeviceOriginalServiceDataResponse
     */
    queryDeviceOriginalServiceData(request: QueryDeviceOriginalServiceDataRequest): Promise<QueryDeviceOriginalServiceDataResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDevicePropRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDevicePropResponse
     */
    queryDevicePropWithOptions(request: QueryDevicePropRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDevicePropRequest
      * @return QueryDevicePropResponse
     */
    queryDeviceProp(request: QueryDevicePropRequest): Promise<QueryDevicePropResponse>;
    /**
      * When you call this operation to query property records within a specified period, the number of records for a property at a point in time may reach the limit.**** The limit is specified by the **PageSize** parameter. In this case, the query stops. Some records of other properties may be not returned.**** You can check whether all records of a property are returned based on the NextValid repsonse parameter:
      * - If the value of the **NextValid** parameter is true, unretrieved records exist in the period that is indicated by the **NextTime** and **EndTime** parameter.
      * You can use the value of the **NextTime** response parameter as the value of the StartTime request parameter and call this operation again to query the rest records. You can call this operation multiple times until the value of the **NextValid** parameter is false.  >  To retrieve all property records within a specified period, you can set the **PageSize** parameter to the maximum value. Then, call this operation multiple times until the value of the **NextValid** parameter is false.
      * - If the value of the **NextValid** parameter is false, all property records are returned.
      * ## Limits
      * *   A maximum of 10 properties can be queried at a time. A maximum of 100 records can be queried for each property.
      * *   You can query property data that is generated within the last 30 days.
      * > The storage period of a property record is calculated from the day when the property record was generated.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDevicePropertiesDataRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDevicePropertiesDataResponse
     */
    queryDevicePropertiesDataWithOptions(request: QueryDevicePropertiesDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropertiesDataResponse>;
    /**
      * When you call this operation to query property records within a specified period, the number of records for a property at a point in time may reach the limit.**** The limit is specified by the **PageSize** parameter. In this case, the query stops. Some records of other properties may be not returned.**** You can check whether all records of a property are returned based on the NextValid repsonse parameter:
      * - If the value of the **NextValid** parameter is true, unretrieved records exist in the period that is indicated by the **NextTime** and **EndTime** parameter.
      * You can use the value of the **NextTime** response parameter as the value of the StartTime request parameter and call this operation again to query the rest records. You can call this operation multiple times until the value of the **NextValid** parameter is false.  >  To retrieve all property records within a specified period, you can set the **PageSize** parameter to the maximum value. Then, call this operation multiple times until the value of the **NextValid** parameter is false.
      * - If the value of the **NextValid** parameter is false, all property records are returned.
      * ## Limits
      * *   A maximum of 10 properties can be queried at a time. A maximum of 100 records can be queried for each property.
      * *   You can query property data that is generated within the last 30 days.
      * > The storage period of a property record is calculated from the day when the property record was generated.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDevicePropertiesDataRequest
      * @return QueryDevicePropertiesDataResponse
     */
    queryDevicePropertiesData(request: QueryDevicePropertiesDataRequest): Promise<QueryDevicePropertiesDataResponse>;
    /**
      * If a device or a digital twin node has multiple properties, you can call this operation to query the data of the properties multiple times. You must specify a value for the **Identifier** parameter each time you call the operation. You can also call the [QueryDevicePropertiesData](~~99237~~) operation and specify multiple values for the **Identifier** parameter to query the data of the properties.
      * ## Limits
      * You can query only property data that is generated within the previous 30 days.
      * >  The data of a property is stored from the day when the data is generated.
      *
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request QueryDevicePropertyDataRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDevicePropertyDataResponse
     */
    queryDevicePropertyDataWithOptions(request: QueryDevicePropertyDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropertyDataResponse>;
    /**
      * If a device or a digital twin node has multiple properties, you can call this operation to query the data of the properties multiple times. You must specify a value for the **Identifier** parameter each time you call the operation. You can also call the [QueryDevicePropertiesData](~~99237~~) operation and specify multiple values for the **Identifier** parameter to query the data of the properties.
      * ## Limits
      * You can query only property data that is generated within the previous 30 days.
      * >  The data of a property is stored from the day when the data is generated.
      *
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request QueryDevicePropertyDataRequest
      * @return QueryDevicePropertyDataResponse
     */
    queryDevicePropertyData(request: QueryDevicePropertyDataRequest): Promise<QueryDevicePropertyDataResponse>;
    /**
      * To query the property data of a digital twin node, you must set the **IotId** parameter to the ID of the digital twin node.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 200 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request QueryDevicePropertyStatusRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDevicePropertyStatusResponse
     */
    queryDevicePropertyStatusWithOptions(request: QueryDevicePropertyStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropertyStatusResponse>;
    /**
      * To query the property data of a digital twin node, you must set the **IotId** parameter to the ID of the digital twin node.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 200 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request QueryDevicePropertyStatusRequest
      * @return QueryDevicePropertyStatusResponse
     */
    queryDevicePropertyStatus(request: QueryDevicePropertyStatusRequest): Promise<QueryDevicePropertyStatusResponse>;
    queryDeviceProvisioningWithOptions(request: QueryDeviceProvisioningRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceProvisioningResponse>;
    queryDeviceProvisioning(request: QueryDeviceProvisioningRequest): Promise<QueryDeviceProvisioningResponse>;
    /**
      * You can query only the service call records of the previous 30 days.
      * >  The storage period of a service call record is calculated from the day when the service is called.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceServiceDataRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceServiceDataResponse
     */
    queryDeviceServiceDataWithOptions(request: QueryDeviceServiceDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceServiceDataResponse>;
    /**
      * You can query only the service call records of the previous 30 days.
      * >  The storage period of a service call record is calculated from the day when the service is called.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceServiceDataRequest
      * @return QueryDeviceServiceDataResponse
     */
    queryDeviceServiceData(request: QueryDeviceServiceDataRequest): Promise<QueryDeviceServiceDataResponse>;
    queryDeviceSpeechWithOptions(request: QueryDeviceSpeechRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceSpeechResponse>;
    queryDeviceSpeech(request: QueryDeviceSpeechRequest): Promise<QueryDeviceSpeechResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceStatisticsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceStatisticsResponse
     */
    queryDeviceStatisticsWithOptions(request: QueryDeviceStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceStatisticsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceStatisticsRequest
      * @return QueryDeviceStatisticsResponse
     */
    queryDeviceStatistics(request: QueryDeviceStatisticsRequest): Promise<QueryDeviceStatisticsResponse>;
    /**
      * ## QPS limits
      * You can call this operation up to 100 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceSubTopicRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryDeviceSubTopicResponse
     */
    queryDeviceSubTopicWithOptions(request: QueryDeviceSubTopicRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceSubTopicResponse>;
    /**
      * ## QPS limits
      * You can call this operation up to 100 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryDeviceSubTopicRequest
      * @return QueryDeviceSubTopicResponse
     */
    queryDeviceSubTopic(request: QueryDeviceSubTopicRequest): Promise<QueryDeviceSubTopicResponse>;
    queryDeviceTunnelWithOptions(request: QueryDeviceTunnelRequest, runtime: $Util.RuntimeOptions): Promise<QueryDeviceTunnelResponse>;
    queryDeviceTunnel(request: QueryDeviceTunnelRequest): Promise<QueryDeviceTunnelResponse>;
    queryDevicesHotStorageDataWithOptions(request: QueryDevicesHotStorageDataRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicesHotStorageDataResponse>;
    queryDevicesHotStorageData(request: QueryDevicesHotStorageDataRequest): Promise<QueryDevicesHotStorageDataResponse>;
    queryDevicesHotStorageDataStatusWithOptions(request: QueryDevicesHotStorageDataStatusRequest, runtime: $Util.RuntimeOptions): Promise<QueryDevicesHotStorageDataStatusResponse>;
    queryDevicesHotStorageDataStatus(request: QueryDevicesHotStorageDataStatusRequest): Promise<QueryDevicesHotStorageDataStatusResponse>;
    queryDynamicGroupDevicesWithOptions(request: QueryDynamicGroupDevicesRequest, runtime: $Util.RuntimeOptions): Promise<QueryDynamicGroupDevicesResponse>;
    queryDynamicGroupDevices(request: QueryDynamicGroupDevicesRequest): Promise<QueryDynamicGroupDevicesResponse>;
    /**
      * ## Limits
      * A single Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users share the quota of the Alibaba Cloud account.
      *
      * @param request QueryEdgeDriverRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryEdgeDriverResponse
     */
    queryEdgeDriverWithOptions(request: QueryEdgeDriverRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeDriverResponse>;
    /**
      * ## Limits
      * A single Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users share the quota of the Alibaba Cloud account.
      *
      * @param request QueryEdgeDriverRequest
      * @return QueryEdgeDriverResponse
     */
    queryEdgeDriver(request: QueryEdgeDriverRequest): Promise<QueryEdgeDriverResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeDriverVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryEdgeDriverVersionResponse
     */
    queryEdgeDriverVersionWithOptions(request: QueryEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeDriverVersionResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeDriverVersionRequest
      * @return QueryEdgeDriverVersionResponse
     */
    queryEdgeDriverVersion(request: QueryEdgeDriverVersionRequest): Promise<QueryEdgeDriverVersionResponse>;
    /**
      * In addition to the preceding exclusive request parameters, you must specify common request parameters when calling this API operation. For more information about common request parameters, see [Common parameters](~~30561~~).
      *
      * @param request QueryEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryEdgeInstanceResponse
     */
    queryEdgeInstanceWithOptions(request: QueryEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceResponse>;
    /**
      * In addition to the preceding exclusive request parameters, you must specify common request parameters when calling this API operation. For more information about common request parameters, see [Common parameters](~~30561~~).
      *
      * @param request QueryEdgeInstanceRequest
      * @return QueryEdgeInstanceResponse
     */
    queryEdgeInstance(request: QueryEdgeInstanceRequest): Promise<QueryEdgeInstanceResponse>;
    queryEdgeInstanceChannelWithOptions(request: QueryEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceChannelResponse>;
    queryEdgeInstanceChannel(request: QueryEdgeInstanceChannelRequest): Promise<QueryEdgeInstanceChannelResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeInstanceDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryEdgeInstanceDeviceResponse
     */
    queryEdgeInstanceDeviceWithOptions(request: QueryEdgeInstanceDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceDeviceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeInstanceDeviceRequest
      * @return QueryEdgeInstanceDeviceResponse
     */
    queryEdgeInstanceDevice(request: QueryEdgeInstanceDeviceRequest): Promise<QueryEdgeInstanceDeviceResponse>;
    queryEdgeInstanceDeviceByDriverWithOptions(request: QueryEdgeInstanceDeviceByDriverRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceDeviceByDriverResponse>;
    queryEdgeInstanceDeviceByDriver(request: QueryEdgeInstanceDeviceByDriverRequest): Promise<QueryEdgeInstanceDeviceByDriverResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeInstanceDriverRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryEdgeInstanceDriverResponse
     */
    queryEdgeInstanceDriverWithOptions(request: QueryEdgeInstanceDriverRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceDriverResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeInstanceDriverRequest
      * @return QueryEdgeInstanceDriverResponse
     */
    queryEdgeInstanceDriver(request: QueryEdgeInstanceDriverRequest): Promise<QueryEdgeInstanceDriverResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeInstanceGatewayRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryEdgeInstanceGatewayResponse
     */
    queryEdgeInstanceGatewayWithOptions(request: QueryEdgeInstanceGatewayRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceGatewayResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeInstanceGatewayRequest
      * @return QueryEdgeInstanceGatewayResponse
     */
    queryEdgeInstanceGateway(request: QueryEdgeInstanceGatewayRequest): Promise<QueryEdgeInstanceGatewayResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeInstanceHistoricDeploymentRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryEdgeInstanceHistoricDeploymentResponse
     */
    queryEdgeInstanceHistoricDeploymentWithOptions(request: QueryEdgeInstanceHistoricDeploymentRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceHistoricDeploymentResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryEdgeInstanceHistoricDeploymentRequest
      * @return QueryEdgeInstanceHistoricDeploymentResponse
     */
    queryEdgeInstanceHistoricDeployment(request: QueryEdgeInstanceHistoricDeploymentRequest): Promise<QueryEdgeInstanceHistoricDeploymentResponse>;
    queryEdgeInstanceMessageRoutingWithOptions(request: QueryEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceMessageRoutingResponse>;
    queryEdgeInstanceMessageRouting(request: QueryEdgeInstanceMessageRoutingRequest): Promise<QueryEdgeInstanceMessageRoutingResponse>;
    queryEdgeInstanceSceneRuleWithOptions(request: QueryEdgeInstanceSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<QueryEdgeInstanceSceneRuleResponse>;
    queryEdgeInstanceSceneRule(request: QueryEdgeInstanceSceneRuleRequest): Promise<QueryEdgeInstanceSceneRuleResponse>;
    queryImportedDeviceByApplyIdWithOptions(request: QueryImportedDeviceByApplyIdRequest, runtime: $Util.RuntimeOptions): Promise<QueryImportedDeviceByApplyIdResponse>;
    queryImportedDeviceByApplyId(request: QueryImportedDeviceByApplyIdRequest): Promise<QueryImportedDeviceByApplyIdResponse>;
    queryJobWithOptions(request: QueryJobRequest, runtime: $Util.RuntimeOptions): Promise<QueryJobResponse>;
    queryJob(request: QueryJobRequest): Promise<QueryJobResponse>;
    queryJobStatisticsWithOptions(request: QueryJobStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<QueryJobStatisticsResponse>;
    queryJobStatistics(request: QueryJobStatisticsRequest): Promise<QueryJobStatisticsResponse>;
    queryLicenseDeviceListWithOptions(request: QueryLicenseDeviceListRequest, runtime: $Util.RuntimeOptions): Promise<QueryLicenseDeviceListResponse>;
    queryLicenseDeviceList(request: QueryLicenseDeviceListRequest): Promise<QueryLicenseDeviceListResponse>;
    queryLoRaJoinPermissionsWithOptions(request: QueryLoRaJoinPermissionsRequest, runtime: $Util.RuntimeOptions): Promise<QueryLoRaJoinPermissionsResponse>;
    queryLoRaJoinPermissions(request: QueryLoRaJoinPermissionsRequest): Promise<QueryLoRaJoinPermissionsResponse>;
    queryMessageInfoWithOptions(request: QueryMessageInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryMessageInfoResponse>;
    queryMessageInfo(request: QueryMessageInfoRequest): Promise<QueryMessageInfoResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryOTAFirmwareRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryOTAFirmwareResponse
     */
    queryOTAFirmwareWithOptions(request: QueryOTAFirmwareRequest, runtime: $Util.RuntimeOptions): Promise<QueryOTAFirmwareResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryOTAFirmwareRequest
      * @return QueryOTAFirmwareResponse
     */
    queryOTAFirmware(request: QueryOTAFirmwareRequest): Promise<QueryOTAFirmwareResponse>;
    /**
      * After you call the [CreateOTAVerifyJob](~~147480~~), [CreateOTAStaticUpgradeJob](~~147496~~), or [CreateOTADynamicUpgradeJob](~~147887~~) API operation to create an update batch, the **JobId** parameter is returned. You can use this parameter to query the details of the update batch.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryOTAJobRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryOTAJobResponse
     */
    queryOTAJobWithOptions(request: QueryOTAJobRequest, runtime: $Util.RuntimeOptions): Promise<QueryOTAJobResponse>;
    /**
      * After you call the [CreateOTAVerifyJob](~~147480~~), [CreateOTAStaticUpgradeJob](~~147496~~), or [CreateOTADynamicUpgradeJob](~~147887~~) API operation to create an update batch, the **JobId** parameter is returned. You can use this parameter to query the details of the update batch.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryOTAJobRequest
      * @return QueryOTAJobResponse
     */
    queryOTAJob(request: QueryOTAJobRequest): Promise<QueryOTAJobResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryPageByApplyIdRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryPageByApplyIdResponse
     */
    queryPageByApplyIdWithOptions(request: QueryPageByApplyIdRequest, runtime: $Util.RuntimeOptions): Promise<QueryPageByApplyIdResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryPageByApplyIdRequest
      * @return QueryPageByApplyIdResponse
     */
    queryPageByApplyId(request: QueryPageByApplyIdRequest): Promise<QueryPageByApplyIdResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryProductRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryProductResponse
     */
    queryProductWithOptions(request: QueryProductRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryProductRequest
      * @return QueryProductResponse
     */
    queryProduct(request: QueryProductRequest): Promise<QueryProductResponse>;
    queryProductCertInfoWithOptions(request: QueryProductCertInfoRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductCertInfoResponse>;
    queryProductCertInfo(request: QueryProductCertInfoRequest): Promise<QueryProductCertInfoResponse>;
    /**
      * ## QPS limits
      * *   Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * > The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      * *   If the product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter is greater than or equal to 100,000, the QPS of this operation decreases.
      *     In this case, each Alibaba Cloud account can run up to 2 QPS.
      *
      * @param request QueryProductListRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryProductListResponse
     */
    queryProductListWithOptions(request: QueryProductListRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductListResponse>;
    /**
      * ## QPS limits
      * *   Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * > The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      * *   If the product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter is greater than or equal to 100,000, the QPS of this operation decreases.
      *     In this case, each Alibaba Cloud account can run up to 2 QPS.
      *
      * @param request QueryProductListRequest
      * @return QueryProductListResponse
     */
    queryProductList(request: QueryProductListRequest): Promise<QueryProductListResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 3 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryProductTopicRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryProductTopicResponse
     */
    queryProductTopicWithOptions(request: QueryProductTopicRequest, runtime: $Util.RuntimeOptions): Promise<QueryProductTopicResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 3 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryProductTopicRequest
      * @return QueryProductTopicResponse
     */
    queryProductTopic(request: QueryProductTopicRequest): Promise<QueryProductTopicResponse>;
    queryProjectShareDeviceListWithOptions(request: QueryProjectShareDeviceListRequest, runtime: $Util.RuntimeOptions): Promise<QueryProjectShareDeviceListResponse>;
    queryProjectShareDeviceList(request: QueryProjectShareDeviceListRequest): Promise<QueryProjectShareDeviceListResponse>;
    querySceneRuleWithOptions(request: QuerySceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<QuerySceneRuleResponse>;
    querySceneRule(request: QuerySceneRuleRequest): Promise<QuerySceneRuleResponse>;
    querySchedulePeriodListWithOptions(request: QuerySchedulePeriodListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySchedulePeriodListResponse>;
    querySchedulePeriodList(request: QuerySchedulePeriodListRequest): Promise<QuerySchedulePeriodListResponse>;
    queryShareTaskDeviceListWithOptions(request: QueryShareTaskDeviceListRequest, runtime: $Util.RuntimeOptions): Promise<QueryShareTaskDeviceListResponse>;
    queryShareTaskDeviceList(request: QueryShareTaskDeviceListRequest): Promise<QueryShareTaskDeviceListResponse>;
    querySolutionDeviceGroupPageWithOptions(request: QuerySolutionDeviceGroupPageRequest, runtime: $Util.RuntimeOptions): Promise<QuerySolutionDeviceGroupPageResponse>;
    querySolutionDeviceGroupPage(request: QuerySolutionDeviceGroupPageRequest): Promise<QuerySolutionDeviceGroupPageResponse>;
    querySoundCodeLabelBatchFailedResultWithOptions(request: QuerySoundCodeLabelBatchFailedResultRequest, runtime: $Util.RuntimeOptions): Promise<QuerySoundCodeLabelBatchFailedResultResponse>;
    querySoundCodeLabelBatchFailedResult(request: QuerySoundCodeLabelBatchFailedResultRequest): Promise<QuerySoundCodeLabelBatchFailedResultResponse>;
    querySoundCodeLabelBatchListWithOptions(request: QuerySoundCodeLabelBatchListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySoundCodeLabelBatchListResponse>;
    querySoundCodeLabelBatchList(request: QuerySoundCodeLabelBatchListRequest): Promise<QuerySoundCodeLabelBatchListResponse>;
    querySoundCodeLabelListWithOptions(request: QuerySoundCodeLabelListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySoundCodeLabelListResponse>;
    querySoundCodeLabelList(request: QuerySoundCodeLabelListRequest): Promise<QuerySoundCodeLabelListResponse>;
    querySoundCodeListWithOptions(request: QuerySoundCodeListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySoundCodeListResponse>;
    querySoundCodeList(request: QuerySoundCodeListRequest): Promise<QuerySoundCodeListResponse>;
    querySoundCodeScheduleListWithOptions(request: QuerySoundCodeScheduleListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySoundCodeScheduleListResponse>;
    querySoundCodeScheduleList(request: QuerySoundCodeScheduleListRequest): Promise<QuerySoundCodeScheduleListResponse>;
    querySpeechWithOptions(request: QuerySpeechRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechResponse>;
    querySpeech(request: QuerySpeechRequest): Promise<QuerySpeechResponse>;
    querySpeechDeviceWithOptions(request: QuerySpeechDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechDeviceResponse>;
    querySpeechDevice(request: QuerySpeechDeviceRequest): Promise<QuerySpeechDeviceResponse>;
    querySpeechLicenseAvailableQuotaWithOptions(request: QuerySpeechLicenseAvailableQuotaRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechLicenseAvailableQuotaResponse>;
    querySpeechLicenseAvailableQuota(request: QuerySpeechLicenseAvailableQuotaRequest): Promise<QuerySpeechLicenseAvailableQuotaResponse>;
    querySpeechLicenseDeviceListWithOptions(request: QuerySpeechLicenseDeviceListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechLicenseDeviceListResponse>;
    querySpeechLicenseDeviceList(request: QuerySpeechLicenseDeviceListRequest): Promise<QuerySpeechLicenseDeviceListResponse>;
    querySpeechListWithOptions(request: QuerySpeechListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechListResponse>;
    querySpeechList(request: QuerySpeechListRequest): Promise<QuerySpeechListResponse>;
    querySpeechPushJobWithOptions(request: QuerySpeechPushJobRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechPushJobResponse>;
    querySpeechPushJob(request: QuerySpeechPushJobRequest): Promise<QuerySpeechPushJobResponse>;
    querySpeechPushJobDeviceWithOptions(request: QuerySpeechPushJobDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechPushJobDeviceResponse>;
    querySpeechPushJobDevice(request: QuerySpeechPushJobDeviceRequest): Promise<QuerySpeechPushJobDeviceResponse>;
    querySpeechPushJobSpeechWithOptions(request: QuerySpeechPushJobSpeechRequest, runtime: $Util.RuntimeOptions): Promise<QuerySpeechPushJobSpeechResponse>;
    querySpeechPushJobSpeech(request: QuerySpeechPushJobSpeechRequest): Promise<QuerySpeechPushJobSpeechResponse>;
    queryStudioAppDomainListOpenWithOptions(request: QueryStudioAppDomainListOpenRequest, runtime: $Util.RuntimeOptions): Promise<QueryStudioAppDomainListOpenResponse>;
    queryStudioAppDomainListOpen(request: QueryStudioAppDomainListOpenRequest): Promise<QueryStudioAppDomainListOpenResponse>;
    queryStudioAppListWithOptions(request: QueryStudioAppListRequest, runtime: $Util.RuntimeOptions): Promise<QueryStudioAppListResponse>;
    queryStudioAppList(request: QueryStudioAppListRequest): Promise<QueryStudioAppListResponse>;
    queryStudioAppPageListOpenWithOptions(request: QueryStudioAppPageListOpenRequest, runtime: $Util.RuntimeOptions): Promise<QueryStudioAppPageListOpenResponse>;
    queryStudioAppPageListOpen(request: QueryStudioAppPageListOpenRequest): Promise<QueryStudioAppPageListOpenResponse>;
    queryStudioProjectListWithOptions(request: QueryStudioProjectListRequest, runtime: $Util.RuntimeOptions): Promise<QueryStudioProjectListResponse>;
    queryStudioProjectList(request: QueryStudioProjectListRequest): Promise<QueryStudioProjectListResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QuerySubscribeRelationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QuerySubscribeRelationResponse
     */
    querySubscribeRelationWithOptions(request: QuerySubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<QuerySubscribeRelationResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QuerySubscribeRelationRequest
      * @return QuerySubscribeRelationResponse
     */
    querySubscribeRelation(request: QuerySubscribeRelationRequest): Promise<QuerySubscribeRelationResponse>;
    querySummarySceneRuleLogWithOptions(request: QuerySummarySceneRuleLogRequest, runtime: $Util.RuntimeOptions): Promise<QuerySummarySceneRuleLogResponse>;
    querySummarySceneRuleLog(request: QuerySummarySceneRuleLogRequest): Promise<QuerySummarySceneRuleLogResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QuerySuperDeviceGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QuerySuperDeviceGroupResponse
     */
    querySuperDeviceGroupWithOptions(request: QuerySuperDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<QuerySuperDeviceGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QuerySuperDeviceGroupRequest
      * @return QuerySuperDeviceGroupResponse
     */
    querySuperDeviceGroup(request: QuerySuperDeviceGroupRequest): Promise<QuerySuperDeviceGroupResponse>;
    queryTaskWithOptions(request: QueryTaskRequest, runtime: $Util.RuntimeOptions): Promise<QueryTaskResponse>;
    queryTask(request: QueryTaskRequest): Promise<QueryTaskResponse>;
    /**
      * TSL features include properties, services, and events.
      * If you add custom modules to a TSL model and the value of the **FunctionBlockId** parameter is empty, you can obtain the TSL features of each custom module. If the value of the FunctionBlockId parameter is not empty, you can obtain the TSL features of a specified custom module.
      * For more information about the data format of the **ThingModelJson** parameter, see [Data structure of ThingModelJson](~~150457~~).
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryThingModelRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryThingModelResponse
     */
    queryThingModelWithOptions(request: QueryThingModelRequest, runtime: $Util.RuntimeOptions): Promise<QueryThingModelResponse>;
    /**
      * TSL features include properties, services, and events.
      * If you add custom modules to a TSL model and the value of the **FunctionBlockId** parameter is empty, you can obtain the TSL features of each custom module. If the value of the FunctionBlockId parameter is not empty, you can obtain the TSL features of a specified custom module.
      * For more information about the data format of the **ThingModelJson** parameter, see [Data structure of ThingModelJson](~~150457~~).
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryThingModelRequest
      * @return QueryThingModelResponse
     */
    queryThingModel(request: QueryThingModelRequest): Promise<QueryThingModelResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryThingModelExtendConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryThingModelExtendConfigResponse
     */
    queryThingModelExtendConfigWithOptions(request: QueryThingModelExtendConfigRequest, runtime: $Util.RuntimeOptions): Promise<QueryThingModelExtendConfigResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryThingModelExtendConfigRequest
      * @return QueryThingModelExtendConfigResponse
     */
    queryThingModelExtendConfig(request: QueryThingModelExtendConfigRequest): Promise<QueryThingModelExtendConfigResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryThingModelExtendConfigPublishedRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryThingModelExtendConfigPublishedResponse
     */
    queryThingModelExtendConfigPublishedWithOptions(request: QueryThingModelExtendConfigPublishedRequest, runtime: $Util.RuntimeOptions): Promise<QueryThingModelExtendConfigPublishedResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryThingModelExtendConfigPublishedRequest
      * @return QueryThingModelExtendConfigPublishedResponse
     */
    queryThingModelExtendConfigPublished(request: QueryThingModelExtendConfigPublishedRequest): Promise<QueryThingModelExtendConfigPublishedResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryThingModelPublishedRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryThingModelPublishedResponse
     */
    queryThingModelPublishedWithOptions(request: QueryThingModelPublishedRequest, runtime: $Util.RuntimeOptions): Promise<QueryThingModelPublishedResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryThingModelPublishedRequest
      * @return QueryThingModelPublishedResponse
     */
    queryThingModelPublished(request: QueryThingModelPublishedRequest): Promise<QueryThingModelPublishedResponse>;
    queryTopicConfigWithOptions(request: QueryTopicConfigRequest, runtime: $Util.RuntimeOptions): Promise<QueryTopicConfigResponse>;
    queryTopicConfig(request: QueryTopicConfigRequest): Promise<QueryTopicConfigResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request QueryTopicReverseRouteTableRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryTopicReverseRouteTableResponse
     */
    queryTopicReverseRouteTableWithOptions(request: QueryTopicReverseRouteTableRequest, runtime: $Util.RuntimeOptions): Promise<QueryTopicReverseRouteTableResponse>;
    /**
      * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
      *
      * @param request QueryTopicReverseRouteTableRequest
      * @return QueryTopicReverseRouteTableResponse
     */
    queryTopicReverseRouteTable(request: QueryTopicReverseRouteTableRequest): Promise<QueryTopicReverseRouteTableResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryTopicRouteTableRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryTopicRouteTableResponse
     */
    queryTopicRouteTableWithOptions(request: QueryTopicRouteTableRequest, runtime: $Util.RuntimeOptions): Promise<QueryTopicRouteTableResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request QueryTopicRouteTableRequest
      * @return QueryTopicRouteTableResponse
     */
    queryTopicRouteTable(request: QueryTopicRouteTableRequest): Promise<QueryTopicRouteTableResponse>;
    /**
      * *   You can call this operation to query the information about a device of a JT/T 808 gateway product.
      * *   When you call this operation, you must specify a **ProductKey** and a **DeviceName**. Otherwise, the call fails.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request QueryVehicleDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return QueryVehicleDeviceResponse
     */
    queryVehicleDeviceWithOptions(request: QueryVehicleDeviceRequest, runtime: $Util.RuntimeOptions): Promise<QueryVehicleDeviceResponse>;
    /**
      * *   You can call this operation to query the information about a device of a JT/T 808 gateway product.
      * *   When you call this operation, you must specify a **ProductKey** and a **DeviceName**. Otherwise, the call fails.
      * ## QPS limits
      * You can call this API operation up to 50 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request QueryVehicleDeviceRequest
      * @return QueryVehicleDeviceResponse
     */
    queryVehicleDevice(request: QueryVehicleDeviceRequest): Promise<QueryVehicleDeviceResponse>;
    /**
      * If the device fails to send a response within the timeout period after you call the operation, IoT Platform considers that the call fails even if the device receives the message. The timeout period is specified by the **Timeout** parameter.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 1000 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request RRpcRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RRpcResponse
     */
    rRpcWithOptions(request: RRpcRequest, runtime: $Util.RuntimeOptions): Promise<RRpcResponse>;
    /**
      * If the device fails to send a response within the timeout period after you call the operation, IoT Platform considers that the call fails even if the device receives the message. The timeout period is specified by the **Timeout** parameter.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 1000 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request RRpcRequest
      * @return RRpcResponse
     */
    rRpc(request: RRpcRequest): Promise<RRpcResponse>;
    reBindLicenseDeviceWithOptions(request: ReBindLicenseDeviceRequest, runtime: $Util.RuntimeOptions): Promise<ReBindLicenseDeviceResponse>;
    reBindLicenseDevice(request: ReBindLicenseDeviceRequest): Promise<ReBindLicenseDeviceResponse>;
    recognizeCarNumWithOptions(request: RecognizeCarNumRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeCarNumResponse>;
    recognizeCarNum(request: RecognizeCarNumRequest): Promise<RecognizeCarNumResponse>;
    recognizePictureGeneralWithOptions(request: RecognizePictureGeneralRequest, runtime: $Util.RuntimeOptions): Promise<RecognizePictureGeneralResponse>;
    recognizePictureGeneral(request: RecognizePictureGeneralRequest): Promise<RecognizePictureGeneralResponse>;
    refreshDeviceTunnelSharePasswordWithOptions(request: RefreshDeviceTunnelSharePasswordRequest, runtime: $Util.RuntimeOptions): Promise<RefreshDeviceTunnelSharePasswordResponse>;
    refreshDeviceTunnelSharePassword(request: RefreshDeviceTunnelSharePasswordRequest): Promise<RefreshDeviceTunnelSharePasswordResponse>;
    refreshStudioAppTokenOpenWithOptions(request: RefreshStudioAppTokenOpenRequest, runtime: $Util.RuntimeOptions): Promise<RefreshStudioAppTokenOpenResponse>;
    refreshStudioAppTokenOpen(request: RefreshStudioAppTokenOpenRequest): Promise<RefreshStudioAppTokenOpenResponse>;
    /**
      * If you call this operation to register a device under a product, the device is added to the product in the IoT Platform console. After the device is registered, IoT Platform issues the IotId parameter to the device. This parameter is a globally unique identifier (GUID) of the device. To perform operations on a device, you must use the IotId parameter to identify the device.
      * You can also use a combination of the ProductKey and DeviceName parameters to identify a device. A ProductKey is issued by IoT Platform to a product when you create the product. A DeviceName is specified or randomly generated when you create a device. The IotId parameter has a higher priority than a combination of the ProductKey and DeviceName parameters.
      * For information about how to register multiple devices under a product at the same time, see [BatchRegisterDeviceWithApplyId](~~69514~~).
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 30 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request RegisterDeviceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RegisterDeviceResponse
     */
    registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: $Util.RuntimeOptions): Promise<RegisterDeviceResponse>;
    /**
      * If you call this operation to register a device under a product, the device is added to the product in the IoT Platform console. After the device is registered, IoT Platform issues the IotId parameter to the device. This parameter is a globally unique identifier (GUID) of the device. To perform operations on a device, you must use the IotId parameter to identify the device.
      * You can also use a combination of the ProductKey and DeviceName parameters to identify a device. A ProductKey is issued by IoT Platform to a product when you create the product. A DeviceName is specified or randomly generated when you create a device. The IotId parameter has a higher priority than a combination of the ProductKey and DeviceName parameters.
      * For information about how to register multiple devices under a product at the same time, see [BatchRegisterDeviceWithApplyId](~~69514~~).
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 30 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request RegisterDeviceRequest
      * @return RegisterDeviceResponse
     */
    registerDevice(request: RegisterDeviceRequest): Promise<RegisterDeviceResponse>;
    releaseEdgeDriverVersionWithOptions(request: ReleaseEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseEdgeDriverVersionResponse>;
    releaseEdgeDriverVersion(request: ReleaseEdgeDriverVersionRequest): Promise<ReleaseEdgeDriverVersionResponse>;
    /**
      * *   After a product is published, you cannot call the [CreateThingModel](~~150323~~), [UpdateThingModel](~~151240~~), [ImportThingModelTSL](~~150320~~), [PublishThingModel](~~150311~~), [DeleteThingModel](~~150312~~), or [CopyThingModel](~~150322~~) operation to edit the Thing Specification Language (TSL) model of the product. To edit the TSL model, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ReleaseProductRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReleaseProductResponse
     */
    releaseProductWithOptions(request: ReleaseProductRequest, runtime: $Util.RuntimeOptions): Promise<ReleaseProductResponse>;
    /**
      * *   After a product is published, you cannot call the [CreateThingModel](~~150323~~), [UpdateThingModel](~~151240~~), [ImportThingModelTSL](~~150320~~), [PublishThingModel](~~150311~~), [DeleteThingModel](~~150312~~), or [CopyThingModel](~~150322~~) operation to edit the Thing Specification Language (TSL) model of the product. To edit the TSL model, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ReleaseProductRequest
      * @return ReleaseProductResponse
     */
    releaseProduct(request: ReleaseProductRequest): Promise<ReleaseProductResponse>;
    /**
      * *   If you specify a gateway, this operation removes the topological relationships between the gateway and all attached sub-devices.
      * *   If you specify a sub-device, this operation removes the topological relationship between the sub-device and the gateway to which the sub-device is attached.
      * # QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request RemoveThingTopoRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return RemoveThingTopoResponse
     */
    removeThingTopoWithOptions(request: RemoveThingTopoRequest, runtime: $Util.RuntimeOptions): Promise<RemoveThingTopoResponse>;
    /**
      * *   If you specify a gateway, this operation removes the topological relationships between the gateway and all attached sub-devices.
      * *   If you specify a sub-device, this operation removes the topological relationship between the sub-device and the gateway to which the sub-device is attached.
      * # QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request RemoveThingTopoRequest
      * @return RemoveThingTopoResponse
     */
    removeThingTopo(request: RemoveThingTopoRequest): Promise<RemoveThingTopoResponse>;
    replaceEdgeInstanceGatewayWithOptions(request: ReplaceEdgeInstanceGatewayRequest, runtime: $Util.RuntimeOptions): Promise<ReplaceEdgeInstanceGatewayResponse>;
    replaceEdgeInstanceGateway(request: ReplaceEdgeInstanceGatewayRequest): Promise<ReplaceEdgeInstanceGatewayResponse>;
    rerunJobWithOptions(request: RerunJobRequest, runtime: $Util.RuntimeOptions): Promise<RerunJobResponse>;
    rerunJob(request: RerunJobRequest): Promise<RerunJobResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ResetConsumerGroupPositionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ResetConsumerGroupPositionResponse
     */
    resetConsumerGroupPositionWithOptions(request: ResetConsumerGroupPositionRequest, runtime: $Util.RuntimeOptions): Promise<ResetConsumerGroupPositionResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ResetConsumerGroupPositionRequest
      * @return ResetConsumerGroupPositionResponse
     */
    resetConsumerGroupPosition(request: ResetConsumerGroupPositionRequest): Promise<ResetConsumerGroupPositionResponse>;
    /**
      * *   After you use dynamic registration to obtain the device certificate information of a directly connected device and activate the device, you can call this operation to reset the dynamic registration status of the status to unregistered in the IoT Platform console. Then, you can use dynamic registration again to obtain the device certificate information. The device certificate information includes ProductKey, DeviceName, and DeviceSecret.
      * > This operation is called to reset the dynamic registration status instead of activation status of a device. After you call the operation to reset the dynamic registration status of a device, the status of the device in the IoT Platform console is not reset to inactive.
      * *   If you specify a gateway and the number of sub-devices that belong to the gateway exceeds 2,000, you can call this operation to create a device job to delete the topological relationships in an asynchronous manner. The operation returns the **JobId** parameter.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request ResetThingRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ResetThingResponse
     */
    resetThingWithOptions(request: ResetThingRequest, runtime: $Util.RuntimeOptions): Promise<ResetThingResponse>;
    /**
      * *   After you use dynamic registration to obtain the device certificate information of a directly connected device and activate the device, you can call this operation to reset the dynamic registration status of the status to unregistered in the IoT Platform console. Then, you can use dynamic registration again to obtain the device certificate information. The device certificate information includes ProductKey, DeviceName, and DeviceSecret.
      * > This operation is called to reset the dynamic registration status instead of activation status of a device. After you call the operation to reset the dynamic registration status of a device, the status of the device in the IoT Platform console is not reset to inactive.
      * *   If you specify a gateway and the number of sub-devices that belong to the gateway exceeds 2,000, you can call this operation to create a device job to delete the topological relationships in an asynchronous manner. The operation returns the **JobId** parameter.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request ResetThingRequest
      * @return ResetThingResponse
     */
    resetThing(request: ResetThingRequest): Promise<ResetThingResponse>;
    retrySoundCodeLabelBatchWithOptions(request: RetrySoundCodeLabelBatchRequest, runtime: $Util.RuntimeOptions): Promise<RetrySoundCodeLabelBatchResponse>;
    retrySoundCodeLabelBatch(request: RetrySoundCodeLabelBatchRequest): Promise<RetrySoundCodeLabelBatchResponse>;
    /**
      * If the update task requires confirmation, you must make sure that it has been confirmed before you call this operation. You can call the [ConfirmOTATask](~~254666~~) operation to confirm update tasks.
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ReupgradeOTATaskRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return ReupgradeOTATaskResponse
     */
    reupgradeOTATaskWithOptions(request: ReupgradeOTATaskRequest, runtime: $Util.RuntimeOptions): Promise<ReupgradeOTATaskResponse>;
    /**
      * If the update task requires confirmation, you must make sure that it has been confirmed before you call this operation. You can call the [ConfirmOTATask](~~254666~~) operation to confirm update tasks.
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request ReupgradeOTATaskRequest
      * @return ReupgradeOTATaskResponse
     */
    reupgradeOTATask(request: ReupgradeOTATaskRequest): Promise<ReupgradeOTATaskResponse>;
    /**
      * *   A device can have a maximum of 100 tags.
      * *   You can modify or add a maximum of 100 tags at a time.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SaveDevicePropRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SaveDevicePropResponse
     */
    saveDevicePropWithOptions(request: SaveDevicePropRequest, runtime: $Util.RuntimeOptions): Promise<SaveDevicePropResponse>;
    /**
      * *   A device can have a maximum of 100 tags.
      * *   You can modify or add a maximum of 100 tags at a time.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SaveDevicePropRequest
      * @return SaveDevicePropResponse
     */
    saveDeviceProp(request: SaveDevicePropRequest): Promise<SaveDevicePropResponse>;
    saveScriptWithOptions(request: SaveScriptRequest, runtime: $Util.RuntimeOptions): Promise<SaveScriptResponse>;
    saveScript(request: SaveScriptRequest): Promise<SaveScriptResponse>;
    /**
      * *   You cannot query the desired values of read-only properties.
      * *   You can specify up to 10 desired property values in a call.
      * *   After a device is created, the value of the **Version** parameter is 0. If you want to configure the **Version** parameter the first time you specify a desired property value, set the **Version** parameter to 0.
      * > If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SetDeviceDesiredPropertyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SetDeviceDesiredPropertyResponse
     */
    setDeviceDesiredPropertyWithOptions(request: SetDeviceDesiredPropertyRequest, runtime: $Util.RuntimeOptions): Promise<SetDeviceDesiredPropertyResponse>;
    /**
      * *   You cannot query the desired values of read-only properties.
      * *   You can specify up to 10 desired property values in a call.
      * *   After a device is created, the value of the **Version** parameter is 0. If you want to configure the **Version** parameter the first time you specify a desired property value, set the **Version** parameter to 0.
      * > If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SetDeviceDesiredPropertyRequest
      * @return SetDeviceDesiredPropertyResponse
     */
    setDeviceDesiredProperty(request: SetDeviceDesiredPropertyRequest): Promise<SetDeviceDesiredPropertyResponse>;
    /**
      * A device group can have a maximum of 100 tags.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SetDeviceGroupTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SetDeviceGroupTagsResponse
     */
    setDeviceGroupTagsWithOptions(request: SetDeviceGroupTagsRequest, runtime: $Util.RuntimeOptions): Promise<SetDeviceGroupTagsResponse>;
    /**
      * A device group can have a maximum of 100 tags.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SetDeviceGroupTagsRequest
      * @return SetDeviceGroupTagsResponse
     */
    setDeviceGroupTags(request: SetDeviceGroupTagsRequest): Promise<SetDeviceGroupTagsResponse>;
    /**
      * After IoT Platform sends a request to configure device properties, the device receives and processes the request in an asynchronous manner. When you call this operation, a successful response indicates that IoT Platform sent a request. The response does not indicate that the device received and processed the request. After the device SDK responds to the request, the device properties are configured.
      * > If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SetDevicePropertyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SetDevicePropertyResponse
     */
    setDevicePropertyWithOptions(request: SetDevicePropertyRequest, runtime: $Util.RuntimeOptions): Promise<SetDevicePropertyResponse>;
    /**
      * After IoT Platform sends a request to configure device properties, the device receives and processes the request in an asynchronous manner. When you call this operation, a successful response indicates that IoT Platform sent a request. The response does not indicate that the device received and processed the request. After the device SDK responds to the request, the device properties are configured.
      * > If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 500 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SetDevicePropertyRequest
      * @return SetDevicePropertyResponse
     */
    setDeviceProperty(request: SetDevicePropertyRequest): Promise<SetDevicePropertyResponse>;
    /**
      * If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SetDevicesPropertyRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SetDevicesPropertyResponse
     */
    setDevicesPropertyWithOptions(request: SetDevicesPropertyRequest, runtime: $Util.RuntimeOptions): Promise<SetDevicesPropertyResponse>;
    /**
      * If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request SetDevicesPropertyRequest
      * @return SetDevicesPropertyResponse
     */
    setDevicesProperty(request: SetDevicesPropertyRequest): Promise<SetDevicesPropertyResponse>;
    setEdgeInstanceDriverConfigsWithOptions(request: SetEdgeInstanceDriverConfigsRequest, runtime: $Util.RuntimeOptions): Promise<SetEdgeInstanceDriverConfigsResponse>;
    setEdgeInstanceDriverConfigs(request: SetEdgeInstanceDriverConfigsRequest): Promise<SetEdgeInstanceDriverConfigsResponse>;
    setProductCertInfoWithOptions(request: SetProductCertInfoRequest, runtime: $Util.RuntimeOptions): Promise<SetProductCertInfoResponse>;
    setProductCertInfo(request: SetProductCertInfoRequest): Promise<SetProductCertInfoResponse>;
    setStudioProjectCooperationWithOptions(request: SetStudioProjectCooperationRequest, runtime: $Util.RuntimeOptions): Promise<SetStudioProjectCooperationResponse>;
    setStudioProjectCooperation(request: SetStudioProjectCooperationRequest): Promise<SetStudioProjectCooperationResponse>;
    setupStudioAppAuthModeOpenWithOptions(request: SetupStudioAppAuthModeOpenRequest, runtime: $Util.RuntimeOptions): Promise<SetupStudioAppAuthModeOpenResponse>;
    setupStudioAppAuthModeOpen(request: SetupStudioAppAuthModeOpenRequest): Promise<SetupStudioAppAuthModeOpenResponse>;
    shareSpeechByCombinationWithOptions(request: ShareSpeechByCombinationRequest, runtime: $Util.RuntimeOptions): Promise<ShareSpeechByCombinationResponse>;
    shareSpeechByCombination(request: ShareSpeechByCombinationRequest): Promise<ShareSpeechByCombinationResponse>;
    speechByCombinationWithOptions(request: SpeechByCombinationRequest, runtime: $Util.RuntimeOptions): Promise<SpeechByCombinationResponse>;
    speechByCombination(request: SpeechByCombinationRequest): Promise<SpeechByCombinationResponse>;
    speechBySynthesisWithOptions(request: SpeechBySynthesisRequest, runtime: $Util.RuntimeOptions): Promise<SpeechBySynthesisResponse>;
    speechBySynthesis(request: SpeechBySynthesisRequest): Promise<SpeechBySynthesisResponse>;
    startParserWithOptions(request: StartParserRequest, runtime: $Util.RuntimeOptions): Promise<StartParserResponse>;
    startParser(request: StartParserRequest): Promise<StartParserResponse>;
    /**
      * ## Limits
      * *   You must verify that the rule has SQL statements configured before you start the rule. If you do not set an SQL statement when you create the rule, call the [UpdateRule](~~69513~~) operation to add an SQL statement and update the rule.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request StartRuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return StartRuleResponse
     */
    startRuleWithOptions(request: StartRuleRequest, runtime: $Util.RuntimeOptions): Promise<StartRuleResponse>;
    /**
      * ## Limits
      * *   You must verify that the rule has SQL statements configured before you start the rule. If you do not set an SQL statement when you create the rule, call the [UpdateRule](~~69513~~) operation to add an SQL statement and update the rule.
      * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request StartRuleRequest
      * @return StartRuleResponse
     */
    startRule(request: StartRuleRequest): Promise<StartRuleResponse>;
    stopParserWithOptions(request: StopParserRequest, runtime: $Util.RuntimeOptions): Promise<StopParserResponse>;
    stopParser(request: StopParserRequest): Promise<StopParserResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request StopRuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return StopRuleResponse
     */
    stopRuleWithOptions(request: StopRuleRequest, runtime: $Util.RuntimeOptions): Promise<StopRuleResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request StopRuleRequest
      * @return StopRuleResponse
     */
    stopRule(request: StopRuleRequest): Promise<StopRuleResponse>;
    /**
      * *   The device that needs to subscribe to topics must be connected to IoT Platform and online.
      * *   You can call this operation to subscribe to the topics of a specified device. You can specify a maximum of 10 topics in a single call.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request SubscribeTopicRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return SubscribeTopicResponse
     */
    subscribeTopicWithOptions(request: SubscribeTopicRequest, runtime: $Util.RuntimeOptions): Promise<SubscribeTopicResponse>;
    /**
      * *   The device that needs to subscribe to topics must be connected to IoT Platform and online.
      * *   You can call this operation to subscribe to the topics of a specified device. You can specify a maximum of 10 topics in a single call.
      * ## QPS limits
      * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
      * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
      *
      * @param request SubscribeTopicRequest
      * @return SubscribeTopicResponse
     */
    subscribeTopic(request: SubscribeTopicRequest): Promise<SubscribeTopicResponse>;
    syncSpeechByCombinationWithOptions(request: SyncSpeechByCombinationRequest, runtime: $Util.RuntimeOptions): Promise<SyncSpeechByCombinationResponse>;
    syncSpeechByCombination(request: SyncSpeechByCombinationRequest): Promise<SyncSpeechByCombinationResponse>;
    testSpeechWithOptions(tmpReq: TestSpeechRequest, runtime: $Util.RuntimeOptions): Promise<TestSpeechResponse>;
    testSpeech(request: TestSpeechRequest): Promise<TestSpeechResponse>;
    testSwitchWithOptions(request: TestSwitchRequest, runtime: $Util.RuntimeOptions): Promise<TestSwitchResponse>;
    testSwitch(request: TestSwitchRequest): Promise<TestSwitchResponse>;
    /**
      * You can call the [QueryClientIds](~~371985~~) operation to view the ClientIDs of a device.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request TransformClientIdRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return TransformClientIdResponse
     */
    transformClientIdWithOptions(request: TransformClientIdRequest, runtime: $Util.RuntimeOptions): Promise<TransformClientIdResponse>;
    /**
      * You can call the [QueryClientIds](~~371985~~) operation to view the ClientIDs of a device.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request TransformClientIdRequest
      * @return TransformClientIdResponse
     */
    transformClientId(request: TransformClientIdRequest): Promise<TransformClientIdResponse>;
    triggerSceneRuleWithOptions(request: TriggerSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<TriggerSceneRuleResponse>;
    triggerSceneRule(request: TriggerSceneRuleRequest): Promise<TriggerSceneRuleResponse>;
    unbindApplicationFromEdgeInstanceWithOptions(request: UnbindApplicationFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UnbindApplicationFromEdgeInstanceResponse>;
    unbindApplicationFromEdgeInstance(request: UnbindApplicationFromEdgeInstanceRequest): Promise<UnbindApplicationFromEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UnbindDriverFromEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UnbindDriverFromEdgeInstanceResponse
     */
    unbindDriverFromEdgeInstanceWithOptions(request: UnbindDriverFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UnbindDriverFromEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UnbindDriverFromEdgeInstanceRequest
      * @return UnbindDriverFromEdgeInstanceResponse
     */
    unbindDriverFromEdgeInstance(request: UnbindDriverFromEdgeInstanceRequest): Promise<UnbindDriverFromEdgeInstanceResponse>;
    unbindLicenseProductWithOptions(request: UnbindLicenseProductRequest, runtime: $Util.RuntimeOptions): Promise<UnbindLicenseProductResponse>;
    unbindLicenseProduct(request: UnbindLicenseProductRequest): Promise<UnbindLicenseProductResponse>;
    unbindRoleFromEdgeInstanceWithOptions(request: UnbindRoleFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UnbindRoleFromEdgeInstanceResponse>;
    unbindRoleFromEdgeInstance(request: UnbindRoleFromEdgeInstanceRequest): Promise<UnbindRoleFromEdgeInstanceResponse>;
    unbindSceneRuleFromEdgeInstanceWithOptions(request: UnbindSceneRuleFromEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UnbindSceneRuleFromEdgeInstanceResponse>;
    unbindSceneRuleFromEdgeInstance(request: UnbindSceneRuleFromEdgeInstanceRequest): Promise<UnbindSceneRuleFromEdgeInstanceResponse>;
    /**
      * ## Limits
      * *   You cannot modify the default consumer group provided by IoT Platform.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateConsumerGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateConsumerGroupResponse
     */
    updateConsumerGroupWithOptions(request: UpdateConsumerGroupRequest, runtime: $Util.RuntimeOptions): Promise<UpdateConsumerGroupResponse>;
    /**
      * ## Limits
      * *   You cannot modify the default consumer group provided by IoT Platform.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateConsumerGroupRequest
      * @return UpdateConsumerGroupResponse
     */
    updateConsumerGroup(request: UpdateConsumerGroupRequest): Promise<UpdateConsumerGroupResponse>;
    updateDestinationWithOptions(request: UpdateDestinationRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDestinationResponse>;
    updateDestination(request: UpdateDestinationRequest): Promise<UpdateDestinationResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateDeviceGroupRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateDeviceGroupResponse
     */
    updateDeviceGroupWithOptions(request: UpdateDeviceGroupRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDeviceGroupResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateDeviceGroupRequest
      * @return UpdateDeviceGroupResponse
     */
    updateDeviceGroup(request: UpdateDeviceGroupRequest): Promise<UpdateDeviceGroupResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 500 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateDeviceShadowRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateDeviceShadowResponse
     */
    updateDeviceShadowWithOptions(request: UpdateDeviceShadowRequest, runtime: $Util.RuntimeOptions): Promise<UpdateDeviceShadowResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 500 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateDeviceShadowRequest
      * @return UpdateDeviceShadowResponse
     */
    updateDeviceShadow(request: UpdateDeviceShadowRequest): Promise<UpdateDeviceShadowResponse>;
    /**
      * ## Limits
      * *   If a request parameter is not specified, the original value of the parameter will be cleared for the driver version.
      * *   You are not allowed to update a published driver version.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateEdgeDriverVersionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateEdgeDriverVersionResponse
     */
    updateEdgeDriverVersionWithOptions(request: UpdateEdgeDriverVersionRequest, runtime: $Util.RuntimeOptions): Promise<UpdateEdgeDriverVersionResponse>;
    /**
      * ## Limits
      * *   If a request parameter is not specified, the original value of the parameter will be cleared for the driver version.
      * *   You are not allowed to update a published driver version.
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateEdgeDriverVersionRequest
      * @return UpdateEdgeDriverVersionResponse
     */
    updateEdgeDriverVersion(request: UpdateEdgeDriverVersionRequest): Promise<UpdateEdgeDriverVersionResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateEdgeInstanceRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateEdgeInstanceResponse
     */
    updateEdgeInstanceWithOptions(request: UpdateEdgeInstanceRequest, runtime: $Util.RuntimeOptions): Promise<UpdateEdgeInstanceResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateEdgeInstanceRequest
      * @return UpdateEdgeInstanceResponse
     */
    updateEdgeInstance(request: UpdateEdgeInstanceRequest): Promise<UpdateEdgeInstanceResponse>;
    updateEdgeInstanceChannelWithOptions(request: UpdateEdgeInstanceChannelRequest, runtime: $Util.RuntimeOptions): Promise<UpdateEdgeInstanceChannelResponse>;
    updateEdgeInstanceChannel(request: UpdateEdgeInstanceChannelRequest): Promise<UpdateEdgeInstanceChannelResponse>;
    updateEdgeInstanceMessageRoutingWithOptions(request: UpdateEdgeInstanceMessageRoutingRequest, runtime: $Util.RuntimeOptions): Promise<UpdateEdgeInstanceMessageRoutingResponse>;
    updateEdgeInstanceMessageRouting(request: UpdateEdgeInstanceMessageRoutingRequest): Promise<UpdateEdgeInstanceMessageRoutingResponse>;
    updateJobWithOptions(tmpReq: UpdateJobRequest, runtime: $Util.RuntimeOptions): Promise<UpdateJobResponse>;
    updateJob(request: UpdateJobRequest): Promise<UpdateJobResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateOTAModuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateOTAModuleResponse
     */
    updateOTAModuleWithOptions(request: UpdateOTAModuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateOTAModuleResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateOTAModuleRequest
      * @return UpdateOTAModuleResponse
     */
    updateOTAModule(request: UpdateOTAModuleRequest): Promise<UpdateOTAModuleResponse>;
    updateParserWithOptions(request: UpdateParserRequest, runtime: $Util.RuntimeOptions): Promise<UpdateParserResponse>;
    updateParser(request: UpdateParserRequest): Promise<UpdateParserResponse>;
    updateParserDataSourceWithOptions(request: UpdateParserDataSourceRequest, runtime: $Util.RuntimeOptions): Promise<UpdateParserDataSourceResponse>;
    updateParserDataSource(request: UpdateParserDataSourceRequest): Promise<UpdateParserDataSourceResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 10 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateProductRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateProductResponse
     */
    updateProductWithOptions(request: UpdateProductRequest, runtime: $Util.RuntimeOptions): Promise<UpdateProductResponse>;
    /**
      * ## QPS limits
      * You can call this API operation up to 10 times per second per account.
      * >  The RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateProductRequest
      * @return UpdateProductResponse
     */
    updateProduct(request: UpdateProductRequest): Promise<UpdateProductResponse>;
    /**
      * ## Message deduplication rules
      * Based on the rules that you set, IoT Platform determines whether to use the rules engine or server-side subscriptions to forward property data that is submitted by devices to a specified destination.
      * The triggering conditions of rules are related by the logic AND relation. For example, if you set the PropertyValueFilter=true and PropertyTimestampFilter=true conditions, the rule to remove duplicate messages is triggered only when both of the conditions are met.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateProductFilterConfigRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateProductFilterConfigResponse
     */
    updateProductFilterConfigWithOptions(request: UpdateProductFilterConfigRequest, runtime: $Util.RuntimeOptions): Promise<UpdateProductFilterConfigResponse>;
    /**
      * ## Message deduplication rules
      * Based on the rules that you set, IoT Platform determines whether to use the rules engine or server-side subscriptions to forward property data that is submitted by devices to a specified destination.
      * The triggering conditions of rules are related by the logic AND relation. For example, if you set the PropertyValueFilter=true and PropertyTimestampFilter=true conditions, the rule to remove duplicate messages is triggered only when both of the conditions are met.
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateProductFilterConfigRequest
      * @return UpdateProductFilterConfigResponse
     */
    updateProductFilterConfig(request: UpdateProductFilterConfigRequest): Promise<UpdateProductFilterConfigResponse>;
    /**
      * You can update a maximum of 10 tags in a single call.
      * > You must specify the tag keys and tag values. Otherwise, the call fails. For description about the tag values, see the "**Request parameters**" section of this topic.
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateProductTagsRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateProductTagsResponse
     */
    updateProductTagsWithOptions(request: UpdateProductTagsRequest, runtime: $Util.RuntimeOptions): Promise<UpdateProductTagsResponse>;
    /**
      * You can update a maximum of 10 tags in a single call.
      * > You must specify the tag keys and tag values. Otherwise, the call fails. For description about the tag values, see the "**Request parameters**" section of this topic.
      * ## QPS limits
      * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
      * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateProductTagsRequest
      * @return UpdateProductTagsResponse
     */
    updateProductTags(request: UpdateProductTagsRequest): Promise<UpdateProductTagsResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateProductTopicRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateProductTopicResponse
     */
    updateProductTopicWithOptions(request: UpdateProductTopicRequest, runtime: $Util.RuntimeOptions): Promise<UpdateProductTopicResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateProductTopicRequest
      * @return UpdateProductTopicResponse
     */
    updateProductTopic(request: UpdateProductTopicRequest): Promise<UpdateProductTopicResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateRuleRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateRuleResponse
     */
    updateRuleWithOptions(request: UpdateRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateRuleResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateRuleRequest
      * @return UpdateRuleResponse
     */
    updateRule(request: UpdateRuleRequest): Promise<UpdateRuleResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateRuleActionRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateRuleActionResponse
     */
    updateRuleActionWithOptions(request: UpdateRuleActionRequest, runtime: $Util.RuntimeOptions): Promise<UpdateRuleActionResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateRuleActionRequest
      * @return UpdateRuleActionResponse
     */
    updateRuleAction(request: UpdateRuleActionRequest): Promise<UpdateRuleActionResponse>;
    updateSceneRuleWithOptions(request: UpdateSceneRuleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSceneRuleResponse>;
    updateSceneRule(request: UpdateSceneRuleRequest): Promise<UpdateSceneRuleResponse>;
    updateSchedulePeriodWithOptions(request: UpdateSchedulePeriodRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSchedulePeriodResponse>;
    updateSchedulePeriod(request: UpdateSchedulePeriodRequest): Promise<UpdateSchedulePeriodResponse>;
    updateSoundCodeWithOptions(request: UpdateSoundCodeRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSoundCodeResponse>;
    updateSoundCode(request: UpdateSoundCodeRequest): Promise<UpdateSoundCodeResponse>;
    updateSoundCodeLabelWithOptions(request: UpdateSoundCodeLabelRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSoundCodeLabelResponse>;
    updateSoundCodeLabel(request: UpdateSoundCodeLabelRequest): Promise<UpdateSoundCodeLabelResponse>;
    updateSoundCodeScheduleWithOptions(request: UpdateSoundCodeScheduleRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSoundCodeScheduleResponse>;
    updateSoundCodeSchedule(request: UpdateSoundCodeScheduleRequest): Promise<UpdateSoundCodeScheduleResponse>;
    updateSpeechWithOptions(tmpReq: UpdateSpeechRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSpeechResponse>;
    updateSpeech(request: UpdateSpeechRequest): Promise<UpdateSpeechResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateSubscribeRelationRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateSubscribeRelationResponse
     */
    updateSubscribeRelationWithOptions(request: UpdateSubscribeRelationRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSubscribeRelationResponse>;
    /**
      * ## Limits
      * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * >  RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateSubscribeRelationRequest
      * @return UpdateSubscribeRelationResponse
     */
    updateSubscribeRelation(request: UpdateSubscribeRelationRequest): Promise<UpdateSubscribeRelationResponse>;
    /**
      * ## Limits
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
      * *   When you call this operation, you can use the [json-schema](https://github.com/everit-org/json-schema?spm=a2c4g.11186623.2.23.575832d9zD7fZb) library to verify the input parameters in **ThingModelJson**. For more information, see [Data structure of ThingModelJson](~~150457~~).
      * *   You can call this operation to update only one feature. TSL features include properties, services, and events.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateThingModelRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateThingModelResponse
     */
    updateThingModelWithOptions(request: UpdateThingModelRequest, runtime: $Util.RuntimeOptions): Promise<UpdateThingModelResponse>;
    /**
      * ## Limits
      * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
      * *   When you call this operation, you can use the [json-schema](https://github.com/everit-org/json-schema?spm=a2c4g.11186623.2.23.575832d9zD7fZb) library to verify the input parameters in **ThingModelJson**. For more information, see [Data structure of ThingModelJson](~~150457~~).
      * *   You can call this operation to update only one feature. TSL features include properties, services, and events.
      * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateThingModelRequest
      * @return UpdateThingModelResponse
     */
    updateThingModel(request: UpdateThingModelRequest): Promise<UpdateThingModelResponse>;
    /**
      * *   A data parsing script is used to convert the custom-formatted data to JSON data after the data is submitted by a device. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateThingScriptRequest
      * @param runtime runtime options for this request RuntimeOptions
      * @return UpdateThingScriptResponse
     */
    updateThingScriptWithOptions(request: UpdateThingScriptRequest, runtime: $Util.RuntimeOptions): Promise<UpdateThingScriptResponse>;
    /**
      * *   A data parsing script is used to convert the custom-formatted data to JSON data after the data is submitted by a device. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
      * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
      * > RAM users of an Alibaba Cloud account share the quota of the account.
      *
      * @param request UpdateThingScriptRequest
      * @return UpdateThingScriptResponse
     */
    updateThingScript(request: UpdateThingScriptRequest): Promise<UpdateThingScriptResponse>;
    updateTopicConfigWithOptions(request: UpdateTopicConfigRequest, runtime: $Util.RuntimeOptions): Promise<UpdateTopicConfigResponse>;
    updateTopicConfig(request: UpdateTopicConfigRequest): Promise<UpdateTopicConfigResponse>;
    writeDevicesHotStorageDataWithOptions(request: WriteDevicesHotStorageDataRequest, runtime: $Util.RuntimeOptions): Promise<WriteDevicesHotStorageDataResponse>;
    writeDevicesHotStorageData(request: WriteDevicesHotStorageDataRequest): Promise<WriteDevicesHotStorageDataResponse>;
}
